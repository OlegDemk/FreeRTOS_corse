
big_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001200c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b7c  0801219c  0801219c  0002219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d18  08014d18  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08014d18  08014d18  00024d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d20  08014d20  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d20  08014d20  00024d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d24  08014d24  00024d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08014d28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          00005694  200000a8  200000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000573c  2000573c  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000370ca  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006867  00000000  00000000  000671a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024f8  00000000  00000000  0006da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022c8  00000000  00000000  0006ff08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028704  00000000  00000000  000721d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e360  00000000  00000000  0009a8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7da8  00000000  00000000  000c8c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b09dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1d4  00000000  00000000  001b0a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012184 	.word	0x08012184

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08012184 	.word	0x08012184

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <time_i2c_write_single>:



/*function to transmit one byte of data to register_address on ds3231 (device_address: 0X68)*/
void time_i2c_write_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af04      	add	r7, sp, #16
 800059e:	4603      	mov	r3, r0
 80005a0:	603a      	str	r2, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	460b      	mov	r3, r1
 80005a6:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Write(&hi2c3, DS3231_I2C_ADDRESS<<1, DS3231_REGISTER_SECONDS_DEFAULT, 1, &seco, 1, 1000);
	//HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	HAL_I2C_Mem_Write(&hi2c3, (uint16_t)device_address<<1, register_address, 1, data_byte, 1, 1000);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b299      	uxth	r1, r3
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <time_i2c_write_single+0x3c>)
 80005c6:	f006 f91f 	bl	8006808 <HAL_I2C_Mem_Write>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20004b24 	.word	0x20004b24

080005d8 <time_i2c_write_multi>:

/*function to transmit an array of data to device_address, starting from start_register_address*/
void time_i2c_write_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af04      	add	r7, sp, #16
 80005de:	603a      	str	r2, [r7, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c3, device_address<<1, start_register_address, 1, data_array, data_length, 1000);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	b299      	uxth	r1, r3
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	797b      	ldrb	r3, [r7, #5]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	9002      	str	r0, [sp, #8]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <time_i2c_write_multi+0x44>)
 800060e:	f006 f8fb 	bl	8006808 <HAL_I2C_Mem_Write>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20004b24 	.word	0x20004b24

08000620 <time_i2c_read_single>:

/*function to read one byte of data from register_address on ds3231*/
void time_i2c_read_single(uint8_t device_address, uint8_t register_address, uint8_t *data_byte)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	4603      	mov	r3, r0
 8000628:	603a      	str	r2, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	460b      	mov	r3, r1
 800062e:	71bb      	strb	r3, [r7, #6]
	//HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,register_address, 1, data_byte, 1, 1000);
	HAL_I2C_Mem_Read(&hi2c3, device_address<<1,register_address, 1, data_byte, 1, 1000);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	b29b      	uxth	r3, r3
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b299      	uxth	r1, r3
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	b29a      	uxth	r2, r3
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	9302      	str	r3, [sp, #8]
 8000642:	2301      	movs	r3, #1
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <time_i2c_read_single+0x3c>)
 800064e:	f006 f9d5 	bl	80069fc <HAL_I2C_Mem_Read>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20004b24 	.word	0x20004b24

08000660 <time_i2c_read_multi>:

/*function to read an array of data from device_address*/
void time_i2c_read_multi(uint8_t device_address, uint8_t start_register_address, uint8_t *data_array, uint8_t data_length)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af04      	add	r7, sp, #16
 8000666:	603a      	str	r2, [r7, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	460b      	mov	r3, r1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	4613      	mov	r3, r2
 8000674:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c3, (uint16_t)device_address<<1,start_register_address, 1, data_array, data_length, 1000);
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	b29b      	uxth	r3, r3
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	b299      	uxth	r1, r3
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	b29a      	uxth	r2, r3
 8000682:	797b      	ldrb	r3, [r7, #5]
 8000684:	b29b      	uxth	r3, r3
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	9002      	str	r0, [sp, #8]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <time_i2c_read_multi+0x44>)
 8000696:	f006 f9b1 	bl	80069fc <HAL_I2C_Mem_Read>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20004b24 	.word	0x20004b24

080006a8 <ds3231_I2C_init>:

/*function to initialize I2C peripheral in 100khz or 400khz*/
void ds3231_I2C_init()
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <ds3231_read>:
  }
}

/*function to read internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_read(uint8_t option, uint8_t *data_array)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  switch (option)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b0e      	cmp	r3, #14
 80006c8:	f200 80ac 	bhi.w	8000824 <ds3231_read+0x16c>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <ds3231_read+0x1c>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	08000711 	.word	0x08000711
 80006d8:	0800072d 	.word	0x0800072d
 80006dc:	08000749 	.word	0x08000749
 80006e0:	08000765 	.word	0x08000765
 80006e4:	08000781 	.word	0x08000781
 80006e8:	0800079d 	.word	0x0800079d
 80006ec:	080007b9 	.word	0x080007b9
 80006f0:	080007d5 	.word	0x080007d5
 80006f4:	080007e9 	.word	0x080007e9
 80006f8:	080007fd 	.word	0x080007fd
 80006fc:	08000825 	.word	0x08000825
 8000700:	08000825 	.word	0x08000825
 8000704:	08000825 	.word	0x08000825
 8000708:	08000825 	.word	0x08000825
 800070c:	0800080f 	.word	0x0800080f
  {
    case SECOND:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &register_current_value);
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <ds3231_read+0x17c>)
 8000712:	2100      	movs	r1, #0
 8000714:	2068      	movs	r0, #104	; 0x68
 8000716:	f7ff ff83 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800071a:	4b46      	ldr	r3, [pc, #280]	; (8000834 <ds3231_read+0x17c>)
 800071c:	781a      	ldrb	r2, [r3, #0]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000722:	2101      	movs	r1, #1
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 f9cf 	bl	8000ac8 <BCD_to_HEX>
      break;
 800072a:	e07d      	b.n	8000828 <ds3231_read+0x170>
    case MINUTE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &register_current_value);
 800072c:	4a41      	ldr	r2, [pc, #260]	; (8000834 <ds3231_read+0x17c>)
 800072e:	2101      	movs	r1, #1
 8000730:	2068      	movs	r0, #104	; 0x68
 8000732:	f7ff ff75 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000736:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <ds3231_read+0x17c>)
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800073e:	2101      	movs	r1, #1
 8000740:	6838      	ldr	r0, [r7, #0]
 8000742:	f000 f9c1 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000746:	e06f      	b.n	8000828 <ds3231_read+0x170>
    case HOUR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &register_current_value);
 8000748:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <ds3231_read+0x17c>)
 800074a:	2102      	movs	r1, #2
 800074c:	2068      	movs	r0, #104	; 0x68
 800074e:	f7ff ff67 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000752:	4b38      	ldr	r3, [pc, #224]	; (8000834 <ds3231_read+0x17c>)
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 800075a:	2101      	movs	r1, #1
 800075c:	6838      	ldr	r0, [r7, #0]
 800075e:	f000 f9b3 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000762:	e061      	b.n	8000828 <ds3231_read+0x170>
    case DAY_OF_WEEK:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &register_current_value);
 8000764:	4a33      	ldr	r2, [pc, #204]	; (8000834 <ds3231_read+0x17c>)
 8000766:	2103      	movs	r1, #3
 8000768:	2068      	movs	r0, #104	; 0x68
 800076a:	f7ff ff59 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <ds3231_read+0x17c>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000776:	2101      	movs	r1, #1
 8000778:	6838      	ldr	r0, [r7, #0]
 800077a:	f000 f9a5 	bl	8000ac8 <BCD_to_HEX>
      break;
 800077e:	e053      	b.n	8000828 <ds3231_read+0x170>
    case DATE:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &register_current_value);
 8000780:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <ds3231_read+0x17c>)
 8000782:	2104      	movs	r1, #4
 8000784:	2068      	movs	r0, #104	; 0x68
 8000786:	f7ff ff4b 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <ds3231_read+0x17c>)
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 8000792:	2101      	movs	r1, #1
 8000794:	6838      	ldr	r0, [r7, #0]
 8000796:	f000 f997 	bl	8000ac8 <BCD_to_HEX>
      break;
 800079a:	e045      	b.n	8000828 <ds3231_read+0x170>
    case MONTH:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &register_current_value);
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <ds3231_read+0x17c>)
 800079e:	2105      	movs	r1, #5
 80007a0:	2068      	movs	r0, #104	; 0x68
 80007a2:	f7ff ff3d 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007a6:	4b23      	ldr	r3, [pc, #140]	; (8000834 <ds3231_read+0x17c>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007ae:	2101      	movs	r1, #1
 80007b0:	6838      	ldr	r0, [r7, #0]
 80007b2:	f000 f989 	bl	8000ac8 <BCD_to_HEX>
      break;
 80007b6:	e037      	b.n	8000828 <ds3231_read+0x170>
    case YEAR:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &register_current_value);
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <ds3231_read+0x17c>)
 80007ba:	2106      	movs	r1, #6
 80007bc:	2068      	movs	r0, #104	; 0x68
 80007be:	f7ff ff2f 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <ds3231_read+0x17c>)
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	701a      	strb	r2, [r3, #0]
      BCD_to_HEX(data_array, 1);
 80007ca:	2101      	movs	r1, #1
 80007cc:	6838      	ldr	r0, [r7, #0]
 80007ce:	f000 f97b 	bl	8000ac8 <BCD_to_HEX>
      break;
 80007d2:	e029      	b.n	8000828 <ds3231_read+0x170>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <ds3231_read+0x17c>)
 80007d6:	210e      	movs	r1, #14
 80007d8:	2068      	movs	r0, #104	; 0x68
 80007da:	f7ff ff21 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <ds3231_read+0x17c>)
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	701a      	strb	r2, [r3, #0]
      break;
 80007e6:	e01f      	b.n	8000828 <ds3231_read+0x170>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 80007e8:	4a12      	ldr	r2, [pc, #72]	; (8000834 <ds3231_read+0x17c>)
 80007ea:	210f      	movs	r1, #15
 80007ec:	2068      	movs	r0, #104	; 0x68
 80007ee:	f7ff ff17 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <ds3231_read+0x17c>)
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
      break;
 80007fa:	e015      	b.n	8000828 <ds3231_read+0x170>
    case AGING_OFFSET:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_current_value);
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <ds3231_read+0x17c>)
 80007fe:	2110      	movs	r1, #16
 8000800:	2068      	movs	r0, #104	; 0x68
 8000802:	f7ff ff0d 	bl	8000620 <time_i2c_read_single>
      *data_array = register_current_value;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <ds3231_read+0x17c>)
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	701a      	strb	r2, [r3, #0]
    case TIME:
      time_i2c_read_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, data_array, 7);
 800080e:	2307      	movs	r3, #7
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	2100      	movs	r1, #0
 8000814:	2068      	movs	r0, #104	; 0x68
 8000816:	f7ff ff23 	bl	8000660 <time_i2c_read_multi>
      BCD_to_HEX(data_array, 7);
 800081a:	2107      	movs	r1, #7
 800081c:	6838      	ldr	r0, [r7, #0]
 800081e:	f000 f953 	bl	8000ac8 <BCD_to_HEX>
      break;
 8000822:	e001      	b.n	8000828 <ds3231_read+0x170>
    default:
      return OPERATION_FAILED;
 8000824:	2300      	movs	r3, #0
 8000826:	e000      	b.n	800082a <ds3231_read+0x172>
  }
  return OPERATION_DONE;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000c4 	.word	0x200000c4

08000838 <ds3231_set>:

/*function to set internal registers of ds3231, one register at a time or an array of registers*/
uint8_t ds3231_set(uint8_t option, uint8_t *data_array)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b0e      	cmp	r3, #14
 8000848:	f200 80d5 	bhi.w	80009f6 <ds3231_set+0x1be>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <ds3231_set+0x1c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000891 	.word	0x08000891
 8000858:	080008ad 	.word	0x080008ad
 800085c:	080008c9 	.word	0x080008c9
 8000860:	080008e5 	.word	0x080008e5
 8000864:	08000901 	.word	0x08000901
 8000868:	0800091d 	.word	0x0800091d
 800086c:	08000939 	.word	0x08000939
 8000870:	08000955 	.word	0x08000955
 8000874:	0800098d 	.word	0x0800098d
 8000878:	080009e3 	.word	0x080009e3
 800087c:	080009f7 	.word	0x080009f7
 8000880:	080009f7 	.word	0x080009f7
 8000884:	080009f7 	.word	0x080009f7
 8000888:	080009f7 	.word	0x080009f7
 800088c:	080009c5 	.word	0x080009c5
  {
    case SECOND:
      time_registers_clone[0] = *data_array;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <ds3231_set+0x1cc>)
 8000896:	701a      	strb	r2, [r3, #0]
      HEX_to_BCD(&time_registers_clone[0], 1);
 8000898:	2101      	movs	r1, #1
 800089a:	485a      	ldr	r0, [pc, #360]	; (8000a04 <ds3231_set+0x1cc>)
 800089c:	f000 f953 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0]);
 80008a0:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <ds3231_set+0x1cc>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2068      	movs	r0, #104	; 0x68
 80008a6:	f7ff fe77 	bl	8000598 <time_i2c_write_single>
      break;
 80008aa:	e0a6      	b.n	80009fa <ds3231_set+0x1c2>
    case MINUTE:
      time_registers_clone[1] = *data_array;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <ds3231_set+0x1cc>)
 80008b2:	705a      	strb	r2, [r3, #1]
      HEX_to_BCD(&time_registers_clone[1], 1);
 80008b4:	2101      	movs	r1, #1
 80008b6:	4854      	ldr	r0, [pc, #336]	; (8000a08 <ds3231_set+0x1d0>)
 80008b8:	f000 f945 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MINUTES, &time_registers_clone[1]);
 80008bc:	4a52      	ldr	r2, [pc, #328]	; (8000a08 <ds3231_set+0x1d0>)
 80008be:	2101      	movs	r1, #1
 80008c0:	2068      	movs	r0, #104	; 0x68
 80008c2:	f7ff fe69 	bl	8000598 <time_i2c_write_single>
      break;
 80008c6:	e098      	b.n	80009fa <ds3231_set+0x1c2>
    case HOUR:
      time_registers_clone[2] = *data_array;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <ds3231_set+0x1cc>)
 80008ce:	709a      	strb	r2, [r3, #2]
      HEX_to_BCD(&time_registers_clone[2], 1);
 80008d0:	2101      	movs	r1, #1
 80008d2:	484e      	ldr	r0, [pc, #312]	; (8000a0c <ds3231_set+0x1d4>)
 80008d4:	f000 f937 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_HOURS, &time_registers_clone[2]);
 80008d8:	4a4c      	ldr	r2, [pc, #304]	; (8000a0c <ds3231_set+0x1d4>)
 80008da:	2102      	movs	r1, #2
 80008dc:	2068      	movs	r0, #104	; 0x68
 80008de:	f7ff fe5b 	bl	8000598 <time_i2c_write_single>
      break;
 80008e2:	e08a      	b.n	80009fa <ds3231_set+0x1c2>
    case DAY_OF_WEEK:
      time_registers_clone[3] = *data_array;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <ds3231_set+0x1cc>)
 80008ea:	70da      	strb	r2, [r3, #3]
      HEX_to_BCD(&time_registers_clone[3], 1);
 80008ec:	2101      	movs	r1, #1
 80008ee:	4848      	ldr	r0, [pc, #288]	; (8000a10 <ds3231_set+0x1d8>)
 80008f0:	f000 f929 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DAY_OF_WEEK, &time_registers_clone[3]);
 80008f4:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <ds3231_set+0x1d8>)
 80008f6:	2103      	movs	r1, #3
 80008f8:	2068      	movs	r0, #104	; 0x68
 80008fa:	f7ff fe4d 	bl	8000598 <time_i2c_write_single>
      break;
 80008fe:	e07c      	b.n	80009fa <ds3231_set+0x1c2>
    case DATE:
      time_registers_clone[4] = *data_array;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <ds3231_set+0x1cc>)
 8000906:	711a      	strb	r2, [r3, #4]
      HEX_to_BCD(&time_registers_clone[4], 1);
 8000908:	2101      	movs	r1, #1
 800090a:	4842      	ldr	r0, [pc, #264]	; (8000a14 <ds3231_set+0x1dc>)
 800090c:	f000 f91b 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_DATE, &time_registers_clone[4]);
 8000910:	4a40      	ldr	r2, [pc, #256]	; (8000a14 <ds3231_set+0x1dc>)
 8000912:	2104      	movs	r1, #4
 8000914:	2068      	movs	r0, #104	; 0x68
 8000916:	f7ff fe3f 	bl	8000598 <time_i2c_write_single>
      break;
 800091a:	e06e      	b.n	80009fa <ds3231_set+0x1c2>
    case MONTH:
      time_registers_clone[5] = *data_array;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <ds3231_set+0x1cc>)
 8000922:	715a      	strb	r2, [r3, #5]
      HEX_to_BCD(&time_registers_clone[5], 1);
 8000924:	2101      	movs	r1, #1
 8000926:	483c      	ldr	r0, [pc, #240]	; (8000a18 <ds3231_set+0x1e0>)
 8000928:	f000 f90d 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_MONTH, &time_registers_clone[5]);
 800092c:	4a3a      	ldr	r2, [pc, #232]	; (8000a18 <ds3231_set+0x1e0>)
 800092e:	2105      	movs	r1, #5
 8000930:	2068      	movs	r0, #104	; 0x68
 8000932:	f7ff fe31 	bl	8000598 <time_i2c_write_single>
      break;
 8000936:	e060      	b.n	80009fa <ds3231_set+0x1c2>
    case YEAR:
      time_registers_clone[6] = *data_array;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <ds3231_set+0x1cc>)
 800093e:	719a      	strb	r2, [r3, #6]
      HEX_to_BCD(&time_registers_clone[6], 1);
 8000940:	2101      	movs	r1, #1
 8000942:	4836      	ldr	r0, [pc, #216]	; (8000a1c <ds3231_set+0x1e4>)
 8000944:	f000 f8ff 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_YEAR, &time_registers_clone[6]);
 8000948:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <ds3231_set+0x1e4>)
 800094a:	2106      	movs	r1, #6
 800094c:	2068      	movs	r0, #104	; 0x68
 800094e:	f7ff fe23 	bl	8000598 <time_i2c_write_single>
      break;
 8000952:	e052      	b.n	80009fa <ds3231_set+0x1c2>
    case CONTROL:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_current_value);
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <ds3231_set+0x1e8>)
 8000956:	210e      	movs	r1, #14
 8000958:	2068      	movs	r0, #104	; 0x68
 800095a:	f7ff fe61 	bl	8000620 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_EOSC)) | (*data_array & (~(1 << DS3231_BIT_EOSC)));
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <ds3231_set+0x1e8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000968:	b25a      	sxtb	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000974:	b25b      	sxtb	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b25b      	sxtb	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <ds3231_set+0x1ec>)
 800097e:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL, &register_new_value);
 8000980:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <ds3231_set+0x1ec>)
 8000982:	210e      	movs	r1, #14
 8000984:	2068      	movs	r0, #104	; 0x68
 8000986:	f7ff fe07 	bl	8000598 <time_i2c_write_single>
      break;
 800098a:	e036      	b.n	80009fa <ds3231_set+0x1c2>
    case CONTROL_STATUS:
      time_i2c_read_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_current_value);
 800098c:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <ds3231_set+0x1e8>)
 800098e:	210f      	movs	r1, #15
 8000990:	2068      	movs	r0, #104	; 0x68
 8000992:	f7ff fe45 	bl	8000620 <time_i2c_read_single>
      register_new_value = (register_current_value & (1 << DS3231_BIT_OSF)) | (*data_array & (~(1 << DS3231_BIT_OSF)));
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <ds3231_set+0x1e8>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b25b      	sxtb	r3, r3
 800099c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009a0:	b25a      	sxtb	r2, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <ds3231_set+0x1ec>)
 80009b6:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_CONTROL_STATUS, &register_new_value);
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <ds3231_set+0x1ec>)
 80009ba:	210f      	movs	r1, #15
 80009bc:	2068      	movs	r0, #104	; 0x68
 80009be:	f7ff fdeb 	bl	8000598 <time_i2c_write_single>
      break;
 80009c2:	e01a      	b.n	80009fa <ds3231_set+0x1c2>
    case TIME:
      ds3231_data_clone(TIME, data_array);
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	200e      	movs	r0, #14
 80009c8:	f000 f82e 	bl	8000a28 <ds3231_data_clone>
      HEX_to_BCD(&time_registers_clone[0], 7);
 80009cc:	2107      	movs	r1, #7
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <ds3231_set+0x1cc>)
 80009d0:	f000 f8b9 	bl	8000b46 <HEX_to_BCD>
      time_i2c_write_multi(DS3231_I2C_ADDRESS, DS3231_REGISTER_SECONDS, &time_registers_clone[0], 7);
 80009d4:	2307      	movs	r3, #7
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <ds3231_set+0x1cc>)
 80009d8:	2100      	movs	r1, #0
 80009da:	2068      	movs	r0, #104	; 0x68
 80009dc:	f7ff fdfc 	bl	80005d8 <time_i2c_write_multi>
      break;
 80009e0:	e00b      	b.n	80009fa <ds3231_set+0x1c2>
    case AGING_OFFSET:
      register_new_value = *data_array;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <ds3231_set+0x1ec>)
 80009e8:	701a      	strb	r2, [r3, #0]
      time_i2c_write_single(DS3231_I2C_ADDRESS, DS3231_REGISTER_AGING_OFFSET, &register_new_value);
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <ds3231_set+0x1ec>)
 80009ec:	2110      	movs	r1, #16
 80009ee:	2068      	movs	r0, #104	; 0x68
 80009f0:	f7ff fdd2 	bl	8000598 <time_i2c_write_single>
      break;
 80009f4:	e001      	b.n	80009fa <ds3231_set+0x1c2>
    default:
      return OPERATION_FAILED;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <ds3231_set+0x1c4>
  }
  return OPERATION_DONE;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000c8 	.word	0x200000c8
 8000a08:	200000c9 	.word	0x200000c9
 8000a0c:	200000ca 	.word	0x200000ca
 8000a10:	200000cb 	.word	0x200000cb
 8000a14:	200000cc 	.word	0x200000cc
 8000a18:	200000cd 	.word	0x200000cd
 8000a1c:	200000ce 	.word	0x200000ce
 8000a20:	200000c4 	.word	0x200000c4
 8000a24:	200000c5 	.word	0x200000c5

08000a28 <ds3231_data_clone>:

/*to clone the desired data and prevent reconversion of BCD to HEX*/
static void ds3231_data_clone(uint8_t option, uint8_t *input_array)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  switch (option)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b0e      	cmp	r3, #14
 8000a38:	d006      	beq.n	8000a48 <ds3231_data_clone+0x20>
 8000a3a:	2b0e      	cmp	r3, #14
 8000a3c:	dc37      	bgt.n	8000aae <ds3231_data_clone+0x86>
 8000a3e:	2b0a      	cmp	r3, #10
 8000a40:	d013      	beq.n	8000a6a <ds3231_data_clone+0x42>
 8000a42:	2b0b      	cmp	r3, #11
 8000a44:	d022      	beq.n	8000a8c <ds3231_data_clone+0x64>
      {
        alarm2_registers_clone[counter] = input_array[counter];
      }
      break;
    default:
      break;
 8000a46:	e032      	b.n	8000aae <ds3231_data_clone+0x86>
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e009      	b.n	8000a62 <ds3231_data_clone+0x3a>
        time_registers_clone[counter] = input_array[counter];
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	441a      	add	r2, r3
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	7811      	ldrb	r1, [r2, #0]
 8000a58:	4a18      	ldr	r2, [pc, #96]	; (8000abc <ds3231_data_clone+0x94>)
 8000a5a:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 7; counter++)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	d9f2      	bls.n	8000a4e <ds3231_data_clone+0x26>
      break;
 8000a68:	e022      	b.n	8000ab0 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
 8000a6e:	e009      	b.n	8000a84 <ds3231_data_clone+0x5c>
        alarm1_registers_clone[counter] = input_array[counter];
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	683a      	ldr	r2, [r7, #0]
 8000a74:	441a      	add	r2, r3
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	7811      	ldrb	r1, [r2, #0]
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <ds3231_data_clone+0x98>)
 8000a7c:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 4; counter++)
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	3301      	adds	r3, #1
 8000a82:	73bb      	strb	r3, [r7, #14]
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d9f2      	bls.n	8000a70 <ds3231_data_clone+0x48>
      break;
 8000a8a:	e011      	b.n	8000ab0 <ds3231_data_clone+0x88>
      for (uint8_t counter = 0; counter < 3; counter++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	737b      	strb	r3, [r7, #13]
 8000a90:	e009      	b.n	8000aa6 <ds3231_data_clone+0x7e>
        alarm2_registers_clone[counter] = input_array[counter];
 8000a92:	7b7b      	ldrb	r3, [r7, #13]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	441a      	add	r2, r3
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
 8000a9a:	7811      	ldrb	r1, [r2, #0]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <ds3231_data_clone+0x9c>)
 8000a9e:	54d1      	strb	r1, [r2, r3]
      for (uint8_t counter = 0; counter < 3; counter++)
 8000aa0:	7b7b      	ldrb	r3, [r7, #13]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	737b      	strb	r3, [r7, #13]
 8000aa6:	7b7b      	ldrb	r3, [r7, #13]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d9f2      	bls.n	8000a92 <ds3231_data_clone+0x6a>
      break;
 8000aac:	e000      	b.n	8000ab0 <ds3231_data_clone+0x88>
      break;
 8000aae:	bf00      	nop
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	200000d0 	.word	0x200000d0
 8000ac4:	200000d4 	.word	0x200000d4

08000ac8 <BCD_to_HEX>:

/*internal function related to this file and not accessible from outside*/
static void BCD_to_HEX(uint8_t *data_array, uint8_t array_length)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e028      	b.n	8000b30 <BCD_to_HEX+0x68>
  {
    data_array[index] = ((data_array[index] >> 4) << 1) + ((data_array[index] >> 4) << 3) + (data_array[index] & 0X0F);
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	440b      	add	r3, r1
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b2d9      	uxtb	r1, r3
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f003 030f 	and.w	r3, r3, #15
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	4403      	add	r3, r0
 8000b1e:	440a      	add	r2, r1
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73fb      	strb	r3, [r7, #15]
 8000b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dad2      	bge.n	8000ade <BCD_to_HEX+0x16>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HEX_to_BCD>:

/*internal function related to this file and not accessible from outside*/
static void HEX_to_BCD(uint8_t *data_array, uint8_t array_length)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b085      	sub	sp, #20
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
  uint8_t temporary_value;
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	73bb      	strb	r3, [r7, #14]
 8000b5a:	e02d      	b.n	8000bb8 <HEX_to_BCD+0x72>
  {
    temporary_value = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b60:	e00e      	b.n	8000b80 <HEX_to_BCD+0x3a>
    {
      temporary_value += 0X10;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	3310      	adds	r3, #16
 8000b66:	73fb      	strb	r3, [r7, #15]
      data_array[index] -= 0X0A;
 8000b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	440b      	add	r3, r1
 8000b7a:	3a0a      	subs	r2, #10
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	701a      	strb	r2, [r3, #0]
    while (((int8_t)data_array[index] - 0X0A) >= 0)
 8000b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	dce8      	bgt.n	8000b62 <HEX_to_BCD+0x1c>
    }
    temporary_value += data_array[index];
 8000b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	73fb      	strb	r3, [r7, #15]
    data_array[index] = temporary_value;
 8000ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	7bfa      	ldrb	r2, [r7, #15]
 8000baa:	701a      	strb	r2, [r3, #0]
  for (int8_t index = (array_length - 1); index >= 0; index--)
 8000bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	73bb      	strb	r3, [r7, #14]
 8000bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dacd      	bge.n	8000b5c <HEX_to_BCD+0x16>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f003 fa99 	bl	800410c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f8d3 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bde:	f000 fadd 	bl	800119c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000be2:	f000 f93b 	bl	8000e5c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000be6:	f000 f995 	bl	8000f14 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bea:	f000 f9e9 	bl	8000fc0 <MX_SPI1_Init>
  MX_RTC_Init();
 8000bee:	f000 f9c1 	bl	8000f74 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000bf2:	f000 faa9 	bl	8001148 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000bf6:	f000 f95f 	bl	8000eb8 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000bfa:	f000 fa17 	bl	800102c <MX_TIM1_Init>
  MX_TIM7_Init();
 8000bfe:	f000 fa6d 	bl	80010dc <MX_TIM7_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c02:	f00d f8ad 	bl	800dd60 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of input_Queue */
  input_QueueHandle = osMessageQueueNew (10, sizeof(char*), &input_Queue_attributes);
 8000c06:	4a3e      	ldr	r2, [pc, #248]	; (8000d00 <main+0x130>)
 8000c08:	2104      	movs	r1, #4
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f00d f99f 	bl	800df4e <osMessageQueueNew>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a3c      	ldr	r2, [pc, #240]	; (8000d04 <main+0x134>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* creation of print_Queue */
  print_QueueHandle = osMessageQueueNew (10, sizeof(char*), &print_Queue_attributes);
 8000c16:	4a3c      	ldr	r2, [pc, #240]	; (8000d08 <main+0x138>)
 8000c18:	2104      	movs	r1, #4
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f00d f997 	bl	800df4e <osMessageQueueNew>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <main+0x13c>)
 8000c24:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c26:	4a3a      	ldr	r2, [pc, #232]	; (8000d10 <main+0x140>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	483a      	ldr	r0, [pc, #232]	; (8000d14 <main+0x144>)
 8000c2c:	f00d f8e2 	bl	800ddf4 <osThreadNew>
 8000c30:	4603      	mov	r3, r0
 8000c32:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <main+0x148>)
 8000c34:	6013      	str	r3, [r2, #0]

  /* creation of menu_task */
  menu_taskHandle = osThreadNew(start_menu_task, NULL, &menu_task_attributes);
 8000c36:	4a39      	ldr	r2, [pc, #228]	; (8000d1c <main+0x14c>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4839      	ldr	r0, [pc, #228]	; (8000d20 <main+0x150>)
 8000c3c:	f00d f8da 	bl	800ddf4 <osThreadNew>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4a38      	ldr	r2, [pc, #224]	; (8000d24 <main+0x154>)
 8000c44:	6013      	str	r3, [r2, #0]

  /* creation of led_task */
  led_taskHandle = osThreadNew(start_led_task, NULL, &led_task_attributes);
 8000c46:	4a38      	ldr	r2, [pc, #224]	; (8000d28 <main+0x158>)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4838      	ldr	r0, [pc, #224]	; (8000d2c <main+0x15c>)
 8000c4c:	f00d f8d2 	bl	800ddf4 <osThreadNew>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a37      	ldr	r2, [pc, #220]	; (8000d30 <main+0x160>)
 8000c54:	6013      	str	r3, [r2, #0]

  /* creation of rtc_task */
  rtc_taskHandle = osThreadNew(start_rtc_task, NULL, &rtc_task_attributes);
 8000c56:	4a37      	ldr	r2, [pc, #220]	; (8000d34 <main+0x164>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4837      	ldr	r0, [pc, #220]	; (8000d38 <main+0x168>)
 8000c5c:	f00d f8ca 	bl	800ddf4 <osThreadNew>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <main+0x16c>)
 8000c64:	6013      	str	r3, [r2, #0]

  /* creation of print_task */
  print_taskHandle = osThreadNew(start_print, NULL, &print_task_attributes);
 8000c66:	4a36      	ldr	r2, [pc, #216]	; (8000d40 <main+0x170>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4836      	ldr	r0, [pc, #216]	; (8000d44 <main+0x174>)
 8000c6c:	f00d f8c2 	bl	800ddf4 <osThreadNew>
 8000c70:	4603      	mov	r3, r0
 8000c72:	4a35      	ldr	r2, [pc, #212]	; (8000d48 <main+0x178>)
 8000c74:	6013      	str	r3, [r2, #0]

  /* creation of cmd_handl_task */
  cmd_handl_taskHandle = osThreadNew(start_cmd_handl, NULL, &cmd_handl_task_attributes);
 8000c76:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <main+0x17c>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4835      	ldr	r0, [pc, #212]	; (8000d50 <main+0x180>)
 8000c7c:	f00d f8ba 	bl	800ddf4 <osThreadNew>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <main+0x184>)
 8000c84:	6013      	str	r3, [r2, #0]

  /* creation of OLED_RTC */
  OLED_RTCHandle = osThreadNew(StartOLED_RTC, NULL, &OLED_RTC_attributes);
 8000c86:	4a34      	ldr	r2, [pc, #208]	; (8000d58 <main+0x188>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4834      	ldr	r0, [pc, #208]	; (8000d5c <main+0x18c>)
 8000c8c:	f00d f8b2 	bl	800ddf4 <osThreadNew>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a33      	ldr	r2, [pc, #204]	; (8000d60 <main+0x190>)
 8000c94:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Create software timers (Created manually)  FOr LEDs
   handler_led_timer[0] = xTimerCreate("led_timer_1", pdMS_TO_TICKS(100), pdTRUE, (void*)1, led_effect_callback);
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <main+0x194>)
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2164      	movs	r1, #100	; 0x64
 8000ca0:	4831      	ldr	r0, [pc, #196]	; (8000d68 <main+0x198>)
 8000ca2:	f00f fac9 	bl	8010238 <xTimerCreate>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <main+0x19c>)
 8000caa:	6013      	str	r3, [r2, #0]
   handler_led_timer[1] = xTimerCreate("led_timer_2", pdMS_TO_TICKS(100), pdTRUE, (void*)2, led_effect_callback);
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <main+0x194>)
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2164      	movs	r1, #100	; 0x64
 8000cb6:	482e      	ldr	r0, [pc, #184]	; (8000d70 <main+0x1a0>)
 8000cb8:	f00f fabe 	bl	8010238 <xTimerCreate>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4a2b      	ldr	r2, [pc, #172]	; (8000d6c <main+0x19c>)
 8000cc0:	6053      	str	r3, [r2, #4]
   handler_led_timer[2] = xTimerCreate("led_timer_3", pdMS_TO_TICKS(100), pdTRUE, (void*)3, led_effect_callback);
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <main+0x194>)
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2164      	movs	r1, #100	; 0x64
 8000ccc:	4829      	ldr	r0, [pc, #164]	; (8000d74 <main+0x1a4>)
 8000cce:	f00f fab3 	bl	8010238 <xTimerCreate>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <main+0x19c>)
 8000cd6:	6093      	str	r3, [r2, #8]
   handler_led_timer[3] = xTimerCreate("led_timer_4", pdMS_TO_TICKS(100), pdTRUE, (void*)4, led_effect_callback);
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <main+0x194>)
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2304      	movs	r3, #4
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2164      	movs	r1, #100	; 0x64
 8000ce2:	4825      	ldr	r0, [pc, #148]	; (8000d78 <main+0x1a8>)
 8000ce4:	f00f faa8 	bl	8010238 <xTimerCreate>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <main+0x19c>)
 8000cec:	60d3      	str	r3, [r2, #12]

   // For write data from UART
   HAL_UART_Receive_IT(&huart2, &user_data , 1);			// Turn on (start) receive one char in interrupt mode
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4922      	ldr	r1, [pc, #136]	; (8000d7c <main+0x1ac>)
 8000cf2:	4823      	ldr	r0, [pc, #140]	; (8000d80 <main+0x1b0>)
 8000cf4:	f009 f801 	bl	8009cfa <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cf8:	f00d f856 	bl	800dda8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <main+0x12c>
 8000cfe:	bf00      	nop
 8000d00:	080127d4 	.word	0x080127d4
 8000d04:	20004be0 	.word	0x20004be0
 8000d08:	080127ec 	.word	0x080127ec
 8000d0c:	20004c5c 	.word	0x20004c5c
 8000d10:	080126d8 	.word	0x080126d8
 8000d14:	080019f1 	.word	0x080019f1
 8000d18:	20004b20 	.word	0x20004b20
 8000d1c:	080126fc 	.word	0x080126fc
 8000d20:	08001a05 	.word	0x08001a05
 8000d24:	20004d00 	.word	0x20004d00
 8000d28:	08012720 	.word	0x08012720
 8000d2c:	08001b05 	.word	0x08001b05
 8000d30:	20004bcc 	.word	0x20004bcc
 8000d34:	08012744 	.word	0x08012744
 8000d38:	08001c59 	.word	0x08001c59
 8000d3c:	20004c60 	.word	0x20004c60
 8000d40:	08012768 	.word	0x08012768
 8000d44:	08002019 	.word	0x08002019
 8000d48:	20004be8 	.word	0x20004be8
 8000d4c:	0801278c 	.word	0x0801278c
 8000d50:	08002071 	.word	0x08002071
 8000d54:	20004bec 	.word	0x20004bec
 8000d58:	080127b0 	.word	0x080127b0
 8000d5c:	0800209d 	.word	0x0800209d
 8000d60:	20004be4 	.word	0x20004be4
 8000d64:	080016cd 	.word	0x080016cd
 8000d68:	08012228 	.word	0x08012228
 8000d6c:	20004bd0 	.word	0x20004bd0
 8000d70:	08012234 	.word	0x08012234
 8000d74:	08012240 	.word	0x08012240
 8000d78:	0801224c 	.word	0x0801224c
 8000d7c:	20004c58 	.word	0x20004c58
 8000d80:	20004cbc 	.word	0x20004cbc

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	; 0x50
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	2230      	movs	r2, #48	; 0x30
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f010 fd56 	bl	8011844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <SystemClock_Config+0xd0>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <SystemClock_Config+0xd0>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <SystemClock_Config+0xd0>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <SystemClock_Config+0xd4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <SystemClock_Config+0xd4>)
 8000dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <SystemClock_Config+0xd4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000de0:	2309      	movs	r3, #9
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dfc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e06:	2307      	movs	r3, #7
 8000e08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 0320 	add.w	r3, r7, #32
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f007 f898 	bl	8007f44 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e1a:	f002 f9b5 	bl	8003188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 faf9 	bl	8008434 <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e48:	f002 f99e 	bl	8003188 <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3750      	adds	r7, #80	; 0x50
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e62:	4a13      	ldr	r2, [pc, #76]	; (8000eb0 <MX_I2C1_Init+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_I2C1_Init+0x58>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_I2C1_Init+0x50>)
 8000e9a:	f005 fa73 	bl	8006384 <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f002 f970 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20004b78 	.word	0x20004b78
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	000186a0 	.word	0x000186a0

08000eb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000ebe:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <MX_I2C3_Init+0x54>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_I2C3_Init+0x58>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000ed6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_I2C3_Init+0x50>)
 8000ef6:	f005 fa45 	bl	8006384 <HAL_I2C_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f00:	f002 f942 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20004b24 	.word	0x20004b24
 8000f0c:	40005c00 	.word	0x40005c00
 8000f10:	00061a80 	.word	0x00061a80

08000f14 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <MX_I2S3_Init+0x58>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f24:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f38:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <MX_I2S3_Init+0x5c>)
 8000f3e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_I2S3_Init+0x54>)
 8000f54:	f006 fb56 	bl	8007604 <HAL_I2S_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f5e:	f002 f913 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20004d4c 	.word	0x20004d4c
 8000f6c:	40003c00 	.word	0x40003c00
 8000f70:	00017700 	.word	0x00017700

08000f74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_RTC_Init+0x44>)
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <MX_RTC_Init+0x48>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_RTC_Init+0x44>)
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_RTC_Init+0x44>)
 8000f86:	227f      	movs	r2, #127	; 0x7f
 8000f88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_RTC_Init+0x44>)
 8000f8c:	22ff      	movs	r2, #255	; 0xff
 8000f8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_RTC_Init+0x44>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_RTC_Init+0x44>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_RTC_Init+0x44>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_RTC_Init+0x44>)
 8000fa4:	f007 fdb4 	bl	8008b10 <HAL_RTC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000fae:	f002 f8eb 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20004bf0 	.word	0x20004bf0
 8000fbc:	40002800 	.word	0x40002800

08000fc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <MX_SPI1_Init+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_SPI1_Init+0x64>)
 800100c:	220a      	movs	r2, #10
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_SPI1_Init+0x64>)
 8001012:	f008 f860 	bl	80090d6 <HAL_SPI_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800101c:	f002 f8b4 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20004c64 	.word	0x20004c64
 8001028:	40013000 	.word	0x40013000

0800102c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	2224      	movs	r2, #36	; 0x24
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f010 fc02 	bl	8011844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_TIM1_Init+0xa8>)
 800104a:	4a23      	ldr	r2, [pc, #140]	; (80010d8 <MX_TIM1_Init+0xac>)
 800104c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_TIM1_Init+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_TIM1_Init+0xa8>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_TIM1_Init+0xa8>)
 800105c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001060:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM1_Init+0xa8>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM1_Init+0xa8>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_TIM1_Init+0xa8>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800108c:	2301      	movs	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_TIM1_Init+0xa8>)
 80010a0:	f008 f991 	bl	80093c6 <HAL_TIM_Encoder_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010aa:	f002 f86d 	bl	8003188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_TIM1_Init+0xa8>)
 80010bc:	f008 fcae 	bl	8009a1c <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80010c6:	f002 f85f 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3730      	adds	r7, #48	; 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20004c10 	.word	0x20004c10
 80010d8:	40010000 	.word	0x40010000

080010dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e2:	463b      	mov	r3, r7
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM7_Init+0x64>)
 80010ec:	4a15      	ldr	r2, [pc, #84]	; (8001144 <MX_TIM7_Init+0x68>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_TIM7_Init+0x64>)
 80010f2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010f6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_TIM7_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_TIM7_Init+0x64>)
 8001100:	2263      	movs	r2, #99	; 0x63
 8001102:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_TIM7_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM7_Init+0x64>)
 800110c:	f008 f86c 	bl	80091e8 <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001116:	f002 f837 	bl	8003188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM7_Init+0x64>)
 8001128:	f008 fc78 	bl	8009a1c <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001132:	f002 f829 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20004d04 	.word	0x20004d04
 8001144:	40001400 	.word	0x40001400

08001148 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MX_USART2_UART_Init+0x50>)
 8001150:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001154:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001158:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_USART2_UART_Init+0x4c>)
 8001180:	f008 fcdc 	bl	8009b3c <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800118a:	f001 fffd 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20004cbc 	.word	0x20004cbc
 8001198:	40004400 	.word	0x40004400

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	4b7d      	ldr	r3, [pc, #500]	; (80013ac <MX_GPIO_Init+0x210>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a7c      	ldr	r2, [pc, #496]	; (80013ac <MX_GPIO_Init+0x210>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b7a      	ldr	r3, [pc, #488]	; (80013ac <MX_GPIO_Init+0x210>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	4b76      	ldr	r3, [pc, #472]	; (80013ac <MX_GPIO_Init+0x210>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a75      	ldr	r2, [pc, #468]	; (80013ac <MX_GPIO_Init+0x210>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b73      	ldr	r3, [pc, #460]	; (80013ac <MX_GPIO_Init+0x210>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <MX_GPIO_Init+0x210>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a6e      	ldr	r2, [pc, #440]	; (80013ac <MX_GPIO_Init+0x210>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b6c      	ldr	r3, [pc, #432]	; (80013ac <MX_GPIO_Init+0x210>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b68      	ldr	r3, [pc, #416]	; (80013ac <MX_GPIO_Init+0x210>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a67      	ldr	r2, [pc, #412]	; (80013ac <MX_GPIO_Init+0x210>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b65      	ldr	r3, [pc, #404]	; (80013ac <MX_GPIO_Init+0x210>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b61      	ldr	r3, [pc, #388]	; (80013ac <MX_GPIO_Init+0x210>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a60      	ldr	r2, [pc, #384]	; (80013ac <MX_GPIO_Init+0x210>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b5e      	ldr	r3, [pc, #376]	; (80013ac <MX_GPIO_Init+0x210>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b5a      	ldr	r3, [pc, #360]	; (80013ac <MX_GPIO_Init+0x210>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a59      	ldr	r2, [pc, #356]	; (80013ac <MX_GPIO_Init+0x210>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b57      	ldr	r3, [pc, #348]	; (80013ac <MX_GPIO_Init+0x210>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2108      	movs	r1, #8
 800125e:	4854      	ldr	r0, [pc, #336]	; (80013b0 <MX_GPIO_Init+0x214>)
 8001260:	f003 fae2 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2101      	movs	r1, #1
 8001268:	4852      	ldr	r0, [pc, #328]	; (80013b4 <MX_GPIO_Init+0x218>)
 800126a:	f003 fadd 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800126e:	2200      	movs	r2, #0
 8001270:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001274:	4850      	ldr	r0, [pc, #320]	; (80013b8 <MX_GPIO_Init+0x21c>)
 8001276:	f003 fad7 	bl	8004828 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800127a:	2308      	movs	r3, #8
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4847      	ldr	r0, [pc, #284]	; (80013b0 <MX_GPIO_Init+0x214>)
 8001292:	f003 f915 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001296:	2301      	movs	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4841      	ldr	r0, [pc, #260]	; (80013b4 <MX_GPIO_Init+0x218>)
 80012ae:	f003 f907 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012b2:	2308      	movs	r3, #8
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c2:	2305      	movs	r3, #5
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4839      	ldr	r0, [pc, #228]	; (80013b4 <MX_GPIO_Init+0x218>)
 80012ce:	f003 f8f7 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4835      	ldr	r0, [pc, #212]	; (80013bc <MX_GPIO_Init+0x220>)
 80012e8:	f003 f8ea 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012ec:	2304      	movs	r3, #4
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4830      	ldr	r0, [pc, #192]	; (80013c0 <MX_GPIO_Init+0x224>)
 8001300:	f003 f8de 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800130a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4825      	ldr	r0, [pc, #148]	; (80013b0 <MX_GPIO_Init+0x214>)
 800131c:	f003 f8d0 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001332:	2305      	movs	r3, #5
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	4820      	ldr	r0, [pc, #128]	; (80013c0 <MX_GPIO_Init+0x224>)
 800133e:	f003 f8bf 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001342:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001346:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4817      	ldr	r0, [pc, #92]	; (80013b8 <MX_GPIO_Init+0x21c>)
 800135c:	f003 f8b0 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001360:	2320      	movs	r3, #32
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_GPIO_Init+0x21c>)
 8001374:	f003 f8a4 	bl	80044c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800137c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <MX_GPIO_Init+0x214>)
 800138e:	f003 f897 	bl	80044c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2105      	movs	r1, #5
 8001396:	2028      	movs	r0, #40	; 0x28
 8001398:	f002 ffd6 	bl	8004348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800139c:	2028      	movs	r0, #40	; 0x28
 800139e:	f002 ffef 	bl	8004380 <HAL_NVIC_EnableIRQ>

}
 80013a2:	bf00      	nop
 80013a4:	3730      	adds	r7, #48	; 0x30
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400

080013c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/////////////////////////////////////////////////////////////////////////////
// Receive one char from UART. This function called by UART interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
	uint8_t dummy = 0;													// Buffer for extract '\n' sign
 80013cc:	2300      	movs	r3, #0
 80013ce:	72fb      	strb	r3, [r7, #11]
	int peek_buff = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]

	if(!xQueueIsQueueFullFromISR(input_QueueHandle))
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_UART_RxCpltCallback+0x88>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f00d fd37 	bl	800ee4c <xQueueIsQueueFullFromISR>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <HAL_UART_RxCpltCallback+0x30>
	{
		xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);		// Enqueue data byte
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_UART_RxCpltCallback+0x88>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	2200      	movs	r2, #0
 80013ec:	4918      	ldr	r1, [pc, #96]	; (8001450 <HAL_UART_RxCpltCallback+0x8c>)
 80013ee:	f00d fa03 	bl	800e7f8 <xQueueGenericSendFromISR>
 80013f2:	e013      	b.n	800141c <HAL_UART_RxCpltCallback+0x58>
	}
	else 																	// Queue is full
	{
		if(user_data == '\r')												// Check, is user_data has '\n' sign?
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_UART_RxCpltCallback+0x8c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b0d      	cmp	r3, #13
 80013fc:	d10e      	bne.n	800141c <HAL_UART_RxCpltCallback+0x58>
		{
			xQueueReceiveFromISR(input_QueueHandle, (void*)&dummy, NULL );	// Delete '\n' sign from queue
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_UART_RxCpltCallback+0x88>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f107 010b 	add.w	r1, r7, #11
 8001406:	2200      	movs	r2, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00d fb71 	bl	800eaf0 <xQueueReceiveFromISR>
			xQueueSendFromISR(input_QueueHandle, (void*)&user_data, NULL);  // Save user_data on the place of '\n'
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_UART_RxCpltCallback+0x88>)
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	2200      	movs	r2, #0
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <HAL_UART_RxCpltCallback+0x8c>)
 8001418:	f00d f9ee 	bl	800e7f8 <xQueueGenericSendFromISR>
		}
	}
	// Send notification to command task if user_data == '\n'
	if(user_data == '\r')
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_UART_RxCpltCallback+0x8c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b0d      	cmp	r3, #13
 8001424:	d108      	bne.n	8001438 <HAL_UART_RxCpltCallback+0x74>
	{
		xTaskNotifyFromISR(cmd_handl_taskHandle, 0, eNoAction, NULL);		// Send notify to start_com_handl task
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_UART_RxCpltCallback+0x90>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	f00e fd80 	bl	800ff38 <xTaskGenericNotifyFromISR>
		//xTaskNotify(test_taskHandle, 0, eNoAction);

	}

	//HAL_UART_Receive_IT(&huart2, &user_data , 1);							// Enable receive data over UART again
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data , 1);
 8001438:	2201      	movs	r2, #1
 800143a:	4905      	ldr	r1, [pc, #20]	; (8001450 <HAL_UART_RxCpltCallback+0x8c>)
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <HAL_UART_RxCpltCallback+0x94>)
 800143e:	f008 fc5c 	bl	8009cfa <HAL_UART_Receive_IT>

	//HAL_GPIO_TogglePin(GPIOD, LED4);	// LED Blink for test  BLUE LED
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20004be0 	.word	0x20004be0
 8001450:	20004c58 	.word	0x20004c58
 8001454:	20004bec 	.word	0x20004bec
 8001458:	20004cbc 	.word	0x20004cbc

0800145c <led_effect_stop>:
/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//			LEDs
void led_effect_stop(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af02      	add	r7, sp, #8
	for(int  i = 0; i < 4; i++)									// Stop all timer
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	e00e      	b.n	8001486 <led_effect_stop+0x2a>
	{
		xTimerStop(handler_led_timer[i], portMAX_DELAY);
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <led_effect_stop+0x3c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	2103      	movs	r1, #3
 800147c:	f00e ff38 	bl	80102f0 <xTimerGenericCommand>
	for(int  i = 0; i < 4; i++)									// Stop all timer
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3301      	adds	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b03      	cmp	r3, #3
 800148a:	dded      	ble.n	8001468 <led_effect_stop+0xc>
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20004bd0 	.word	0x20004bd0

0800149c <led_effect>:
/////////////////////////////////////////////////////////////////////////////
void led_effect (uint8_t effect)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	led_effect_stop();											// Stop current led effect
 80014a6:	f7ff ffd9 	bl	800145c <led_effect_stop>
	xTimerStart(handler_led_timer[effect-1], portMAX_DELAY);	// Start needed led timer
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <led_effect+0x38>)
 80014b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80014b4:	f00e f856 	bl	800f564 <xTaskGetTickCount>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	4620      	mov	r0, r4
 80014c6:	f00e ff13 	bl	80102f0 <xTimerGenericCommand>
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20004bd0 	.word	0x20004bd0

080014d8 <turn_off_all_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_off_all_leds(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e2:	480b      	ldr	r0, [pc, #44]	; (8001510 <turn_off_all_leds+0x38>)
 80014e4:	f003 f9a0 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <turn_off_all_leds+0x38>)
 80014f0:	f003 f99a 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <turn_off_all_leds+0x38>)
 80014fc:	f003 f994 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001506:	4802      	ldr	r0, [pc, #8]	; (8001510 <turn_off_all_leds+0x38>)
 8001508:	f003 f98e 	bl	8004828 <HAL_GPIO_WritePin>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40020c00 	.word	0x40020c00

08001514 <turn_on_all_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_all_leds(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151e:	480b      	ldr	r0, [pc, #44]	; (800154c <turn_on_all_leds+0x38>)
 8001520:	f003 f982 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <turn_on_all_leds+0x38>)
 800152c:	f003 f97c 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <turn_on_all_leds+0x38>)
 8001538:	f003 f976 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001542:	4802      	ldr	r0, [pc, #8]	; (800154c <turn_on_all_leds+0x38>)
 8001544:	f003 f970 	bl	8004828 <HAL_GPIO_WritePin>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40020c00 	.word	0x40020c00

08001550 <turn_on_even_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_even_leds(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <turn_on_even_leds+0x38>)
 800155c:	f003 f964 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <turn_on_even_leds+0x38>)
 8001568:	f003 f95e 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <turn_on_even_leds+0x38>)
 8001574:	f003 f958 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157e:	4802      	ldr	r0, [pc, #8]	; (8001588 <turn_on_even_leds+0x38>)
 8001580:	f003 f952 	bl	8004828 <HAL_GPIO_WritePin>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40020c00 	.word	0x40020c00

0800158c <turn_on_odd_leds>:
/////////////////////////////////////////////////////////////////////////////
void turn_on_odd_leds(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED1, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001596:	480b      	ldr	r0, [pc, #44]	; (80015c4 <turn_on_odd_leds+0x38>)
 8001598:	f003 f946 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED2, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <turn_on_odd_leds+0x38>)
 80015a4:	f003 f940 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED3, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <turn_on_odd_leds+0x38>)
 80015b0:	f003 f93a 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED4, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ba:	4802      	ldr	r0, [pc, #8]	; (80015c4 <turn_on_odd_leds+0x38>)
 80015bc:	f003 f934 	bl	8004828 <HAL_GPIO_WritePin>
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <LED_control>:
/////////////////////////////////////////////////////////////////////////////
void LED_control(int value)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	e014      	b.n	8001600 <LED_control+0x38>
	{
		HAL_GPIO_WritePin(GPIOD, (LED1 << i), ((value >> i)& 0x1));
 80015d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	b299      	uxth	r1, r3
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	fa42 f303 	asr.w	r3, r2, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <LED_control+0x48>)
 80015f6:	f003 f917 	bl	8004828 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b03      	cmp	r3, #3
 8001604:	dde7      	ble.n	80015d6 <LED_control+0xe>
	}
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020c00 	.word	0x40020c00

08001614 <LED_effect1>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect1(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();			// Toggle LEDs
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <LED_effect1+0x28>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f083 0301 	eor.w	r3, r3, #1
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <LED_effect1+0x28>)
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <LED_effect1+0x28>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <LED_effect1+0x1e>
 800162c:	f7ff ff54 	bl	80014d8 <turn_off_all_leds>
}
 8001630:	e001      	b.n	8001636 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();			// Toggle LEDs
 8001632:	f7ff ff6f 	bl	8001514 <turn_on_all_leds>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000004 	.word	0x20000004

08001640 <LED_effect2>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect2(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <LED_effect2+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <LED_effect2+0x28>)
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <LED_effect2+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <LED_effect2+0x1e>
 8001658:	f7ff ff7a 	bl	8001550 <turn_on_even_leds>
}
 800165c:	e001      	b.n	8001662 <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800165e:	f7ff ff95 	bl	800158c <turn_on_odd_leds>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008

0800166c <LED_effect3>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect3(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control (0x1 << (i++ % 4));  //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ?????????????????????????????????????????????
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <LED_effect3+0x2c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	4908      	ldr	r1, [pc, #32]	; (8001698 <LED_effect3+0x2c>)
 8001678:	600a      	str	r2, [r1, #0]
 800167a:	425a      	negs	r2, r3
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	f002 0203 	and.w	r2, r2, #3
 8001684:	bf58      	it	pl
 8001686:	4253      	negpl	r3, r2
 8001688:	2201      	movs	r2, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff9a 	bl	80015c8 <LED_control>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200000e0 	.word	0x200000e0

0800169c <LED_effect4>:
/////////////////////////////////////////////////////////////////////////////
void LED_effect4(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control(0x08 >> (i++ % 4));  //  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, ?????????????????????????????????????????????
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <LED_effect4+0x2c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <LED_effect4+0x2c>)
 80016a8:	600a      	str	r2, [r1, #0]
 80016aa:	425a      	negs	r2, r3
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	bf58      	it	pl
 80016b6:	4253      	negpl	r3, r2
 80016b8:	2208      	movs	r2, #8
 80016ba:	fa42 f303 	asr.w	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff82 	bl	80015c8 <LED_control>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200000e4 	.word	0x200000e4

080016cc <led_effect_callback>:
/////////////////////////////////////////////////////////////////////////////
void led_effect_callback(TimerHandle_t xTimer)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID( xTimer );
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f00f f911 	bl	80108fc <pvTimerGetTimerID>
 80016da:	4603      	mov	r3, r0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d816      	bhi.n	8001714 <led_effect_callback+0x48>
 80016e6:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <led_effect_callback+0x20>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	08001703 	.word	0x08001703
 80016f4:	08001709 	.word	0x08001709
 80016f8:	0800170f 	.word	0x0800170f

	switch(id)
	{
		case 1:
			LED_effect1();
 80016fc:	f7ff ff8a 	bl	8001614 <LED_effect1>
			break;
 8001700:	e008      	b.n	8001714 <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 8001702:	f7ff ff9d 	bl	8001640 <LED_effect2>
			break;
 8001706:	e005      	b.n	8001714 <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8001708:	f7ff ffb0 	bl	800166c <LED_effect3>
			break;
 800170c:	e002      	b.n	8001714 <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 800170e:	f7ff ffc5 	bl	800169c <LED_effect4>
	}
}
 8001712:	e7ff      	b.n	8001714 <led_effect_callback+0x48>
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <process_command>:
/////////////////////////////////////////////////////////////////////////////
// Function depends on selected menu chose(notify) needed task
void process_command(command_t *cmd)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f82f 	bl	8001788 <extract_command>

	switch(curr_state)
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <process_command+0x5c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b05      	cmp	r3, #5
 8001730:	dc1e      	bgt.n	8001770 <process_command+0x54>
 8001732:	2b02      	cmp	r3, #2
 8001734:	da14      	bge.n	8001760 <process_command+0x44>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <process_command+0x24>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d008      	beq.n	8001750 <process_command+0x34>
	 	case sRtcDateConfig:
	 	case sRtcReport:
	 		xTaskNotify(rtc_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
	 		break;
	 }
}
 800173e:	e017      	b.n	8001770 <process_command+0x54>
			xTaskNotify(menu_taskHandle,(uint32_t*) cmd, eSetValueWithOverwrite);
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <process_command+0x60>)
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	2300      	movs	r3, #0
 8001748:	2203      	movs	r2, #3
 800174a:	f00e fb37 	bl	800fdbc <xTaskGenericNotify>
			break;
 800174e:	e00f      	b.n	8001770 <process_command+0x54>
	 		xTaskNotify(led_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <process_command+0x64>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	2300      	movs	r3, #0
 8001758:	2203      	movs	r2, #3
 800175a:	f00e fb2f 	bl	800fdbc <xTaskGenericNotify>
	 		break;
 800175e:	e007      	b.n	8001770 <process_command+0x54>
	 		xTaskNotify(rtc_taskHandle, (uint32_t*) cmd, eSetValueWithOverwrite);
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <process_command+0x68>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	2300      	movs	r3, #0
 8001768:	2203      	movs	r2, #3
 800176a:	f00e fb27 	bl	800fdbc <xTaskGenericNotify>
	 		break;
 800176e:	bf00      	nop
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200000d7 	.word	0x200000d7
 800177c:	20004d00 	.word	0x20004d00
 8001780:	20004bcc 	.word	0x20004bcc
 8001784:	20004c60 	.word	0x20004c60

08001788 <extract_command>:
/////////////////////////////////////////////////////////////////////////////
// Extract every char byte from input_QueueHandle into cmd struct
int extract_command(command_t *cmd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(input_QueueHandle);			// Waiting data on the queue
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <extract_command+0x70>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f00d fa2b 	bl	800ebf0 <uxQueueMessagesWaiting>
 800179a:	4603      	mov	r3, r0
 800179c:	613b      	str	r3, [r7, #16]
	if(!status)													// If no any messages on the queue (exit from where)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <extract_command+0x22>
	{
		return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a8:	e022      	b.n	80017f0 <extract_command+0x68>
	}

	uint8_t i = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	75fb      	strb	r3, [r7, #23]
	do{
		status = xQueueReceive(input_QueueHandle, &item, 0);
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <extract_command+0x70>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f107 010f 	add.w	r1, r7, #15
 80017b6:	2200      	movs	r2, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00d f8b9 	bl	800e930 <xQueueReceive>
 80017be:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d106      	bne.n	80017d4 <extract_command+0x4c>
		{
			cmd -> payload[i++] = item;
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	75fa      	strb	r2, [r7, #23]
 80017cc:	461a      	mov	r2, r3
 80017ce:	7bf9      	ldrb	r1, [r7, #15]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	5499      	strb	r1, [r3, r2]
		}
	}while(item != '\r');    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b0d      	cmp	r3, #13
 80017d8:	d1e9      	bne.n	80017ae <extract_command+0x26>

	cmd -> payload[i - 1] = '\0';		// add '\0' sign to the end
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	3b01      	subs	r3, #1
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	2100      	movs	r1, #0
 80017e2:	54d1      	strb	r1, [r2, r3]
	cmd -> len = i - 1;					// Save length in struct
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	729a      	strb	r2, [r3, #10]

	return 0;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20004be0 	.word	0x20004be0

080017fc <show_time_date>:
/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//			RTC
void show_time_date(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	; 0x30
 8001800:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_time,0, sizeof(rtc_time));
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2214      	movs	r2, #20
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f010 f81b 	bl	8011844 <memset>
	memset(&rtc_date, 0, sizeof(rtc_date));
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	2204      	movs	r2, #4
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f010 f814 	bl	8011844 <memset>

	// Get time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	4619      	mov	r1, r3
 8001822:	4821      	ldr	r0, [pc, #132]	; (80018a8 <show_time_date+0xac>)
 8001824:	f007 fac2 	bl	8008dac <HAL_RTC_GetTime>
	// Get date
	HAL_RTC_GetTime(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	481d      	ldr	r0, [pc, #116]	; (80018a8 <show_time_date+0xac>)
 8001832:	f007 fabb 	bl	8008dac <HAL_RTC_GetTime>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <show_time_date+0x44>
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <show_time_date+0xb0>)
 800183e:	e000      	b.n	8001842 <show_time_date+0x46>
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <show_time_date+0xb4>)
 8001842:	61fb      	str	r3, [r7, #28]

	// Display time and data
	sprintf((char*)showtime, "%s: \t%02d:%02d:%02d [%s]", "\n Current Time&date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	4618      	mov	r0, r3
 8001848:	797b      	ldrb	r3, [r7, #5]
 800184a:	461a      	mov	r2, r3
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	4619      	mov	r1, r3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	9101      	str	r1, [sp, #4]
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	4603      	mov	r3, r0
 800185a:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <show_time_date+0xb8>)
 800185c:	4916      	ldr	r1, [pc, #88]	; (80018b8 <show_time_date+0xbc>)
 800185e:	4817      	ldr	r0, [pc, #92]	; (80018bc <show_time_date+0xc0>)
 8001860:	f010 f91c 	bl	8011a9c <siprintf>
	xQueueSend(print_QueueHandle, &time, portMAX_DELAY);		// Send to UART
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <show_time_date+0xc4>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	2300      	movs	r3, #0
 800186a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800186e:	4915      	ldr	r1, [pc, #84]	; (80018c4 <show_time_date+0xc8>)
 8001870:	f00c fec4 	bl	800e5fc <xQueueGenericSend>

	sprintf((char*)showdate, "\t%02d-%02d-%02d\n\r", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001874:	7e7b      	ldrb	r3, [r7, #25]
 8001876:	461a      	mov	r2, r3
 8001878:	7ebb      	ldrb	r3, [r7, #26]
 800187a:	4619      	mov	r1, r3
 800187c:	7efb      	ldrb	r3, [r7, #27]
 800187e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	460b      	mov	r3, r1
 8001886:	4910      	ldr	r1, [pc, #64]	; (80018c8 <show_time_date+0xcc>)
 8001888:	4810      	ldr	r0, [pc, #64]	; (80018cc <show_time_date+0xd0>)
 800188a:	f010 f907 	bl	8011a9c <siprintf>
	xQueueSend(print_QueueHandle, &date, portMAX_DELAY);
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <show_time_date+0xc4>)
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	2300      	movs	r3, #0
 8001894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001898:	490d      	ldr	r1, [pc, #52]	; (80018d0 <show_time_date+0xd4>)
 800189a:	f00c feaf 	bl	800e5fc <xQueueGenericSend>
}
 800189e:	bf00      	nop
 80018a0:	3720      	adds	r7, #32
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20004bf0 	.word	0x20004bf0
 80018ac:	08012258 	.word	0x08012258
 80018b0:	0801225c 	.word	0x0801225c
 80018b4:	08012260 	.word	0x08012260
 80018b8:	08012274 	.word	0x08012274
 80018bc:	200000e8 	.word	0x200000e8
 80018c0:	20004c5c 	.word	0x20004c5c
 80018c4:	2000000c 	.word	0x2000000c
 80018c8:	08012290 	.word	0x08012290
 80018cc:	20000110 	.word	0x20000110
 80018d0:	20000010 	.word	0x20000010

080018d4 <rtc_configure_time>:
/////////////////////////////////////////////////////////////////////////////
void rtc_configure_time(RTC_TimeTypeDef *time)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	time -> TimeFormat = RTC_HOURFORMAT12_AM;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	70da      	strb	r2, [r3, #3]
//	time -> DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
//	time -> StoreOperation = RTC_STOREOPERATION_RESET;

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 80018e2:	2200      	movs	r2, #0
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <rtc_configure_time+0x20>)
 80018e8:	f007 f9a3 	bl	8008c32 <HAL_RTC_SetTime>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20004bf0 	.word	0x20004bf0

080018f8 <rtc_configure_date>:
/////////////////////////////////////////////////////////////////////////////
void rtc_configure_date(RTC_TimeTypeDef *date)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4803      	ldr	r0, [pc, #12]	; (8001914 <rtc_configure_date+0x1c>)
 8001906:	f007 faaf 	bl	8008e68 <HAL_RTC_SetDate>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20004bf0 	.word	0x20004bf0

08001918 <getnumber>:
/////////////////////////////////////////////////////////////////////////////
// Convert two char into two digits
uint8_t getnumber(uint8_t *p, int len)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	int value;
	if(len > 1)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	dd0f      	ble.n	8001948 <getnumber+0x30>
	{
		value = (((p[0] - 48)*10) + (p[1] - 48));		// Convert two chars into digits
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	461a      	mov	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3301      	adds	r3, #1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3b30      	subs	r3, #48	; 0x30
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e003      	b.n	8001950 <getnumber+0x38>
	}
	else
	{
		value = p[0] - 48;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3b30      	subs	r3, #48	; 0x30
 800194e:	60fb      	str	r3, [r7, #12]
	}

	return value;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	b2db      	uxtb	r3, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <validate_rtc_information>:
/////////////////////////////////////////////////////////////////////////////
int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
	// Validate hours, minutes and seconds
	if(((time -> Hours ) > 12) || ((time -> Hours < 0)))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d902      	bls.n	8001978 <validate_rtc_information+0x18>
	{
		return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001976:	e035      	b.n	80019e4 <validate_rtc_information+0x84>
	}
	else if(((time -> Minutes > 59) || ((time -> Minutes  < 0))))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	785b      	ldrb	r3, [r3, #1]
 800197c:	2b3b      	cmp	r3, #59	; 0x3b
 800197e:	d902      	bls.n	8001986 <validate_rtc_information+0x26>
	{
		return -1;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001984:	e02e      	b.n	80019e4 <validate_rtc_information+0x84>
	}
	else if(((time -> Seconds > 59) || ((time -> Seconds  < 0))))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	789b      	ldrb	r3, [r3, #2]
 800198a:	2b3b      	cmp	r3, #59	; 0x3b
 800198c:	d902      	bls.n	8001994 <validate_rtc_information+0x34>
	{
		return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001992:	e027      	b.n	80019e4 <validate_rtc_information+0x84>
	}

	// Validate date, week day, year, month
	else if((date -> Date < 1 ) || (date -> Date > 31))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	789b      	ldrb	r3, [r3, #2]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <validate_rtc_information+0x44>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	789b      	ldrb	r3, [r3, #2]
 80019a0:	2b1f      	cmp	r3, #31
 80019a2:	d902      	bls.n	80019aa <validate_rtc_information+0x4a>
	{
		return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a8:	e01c      	b.n	80019e4 <validate_rtc_information+0x84>
	}
	else if((date -> WeekDay < 1 ) || (date -> WeekDay > 7))
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <validate_rtc_information+0x5a>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b07      	cmp	r3, #7
 80019b8:	d902      	bls.n	80019c0 <validate_rtc_information+0x60>
	{
		return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019be:	e011      	b.n	80019e4 <validate_rtc_information+0x84>
	}
	else if(date -> Year > 99 )
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	78db      	ldrb	r3, [r3, #3]
 80019c4:	2b63      	cmp	r3, #99	; 0x63
 80019c6:	d902      	bls.n	80019ce <validate_rtc_information+0x6e>
	{
		return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019cc:	e00a      	b.n	80019e4 <validate_rtc_information+0x84>
	}
	else if((date -> Month < 1 ) || (date -> Month > 12))
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	785b      	ldrb	r3, [r3, #1]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <validate_rtc_information+0x7e>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	785b      	ldrb	r3, [r3, #1]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d902      	bls.n	80019e4 <validate_rtc_information+0x84>
	{
		return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e2:	e7ff      	b.n	80019e4 <validate_rtc_information+0x84>
	}
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80019f8:	f00f fbd8 	bl	80111ac <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  osDelay(100);
 80019fc:	2064      	movs	r0, #100	; 0x64
 80019fe:	f00c fa8b 	bl	800df18 <osDelay>
 8001a02:	e7fb      	b.n	80019fc <StartDefaultTask+0xc>

08001a04 <start_menu_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_menu_task */
void start_menu_task(void *argument)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	uint32_t cmd_addr;
	command_t *cmd;			// Create object of command_t
	int option;
	const char* msg_manu = "=======================\n\r"
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <start_menu_task+0xe4>)
 8001a0e:	60bb      	str	r3, [r7, #8]
						   "Exit             ----> 2\n\r"
						   "Enter your choice here: \n\r";

	while(1)
	{
		int status = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
		status = xQueueSend(print_QueueHandle, &msg_manu, portMAX_DELAY);		// Send data in print
 8001a14:	4b35      	ldr	r3, [pc, #212]	; (8001aec <start_menu_task+0xe8>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	f107 0108 	add.w	r1, r7, #8
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a22:	f00c fdeb 	bl	800e5fc <xQueueGenericSend>
 8001a26:	61f8      	str	r0, [r7, #28]
		if(status != pdPASS)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d002      	beq.n	8001a34 <start_menu_task+0x30>
		{
			// ERROR
			int ggg =999;
 8001a2e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001a32:	61bb      	str	r3, [r7, #24]
		}

		//xQueueSendToBack(print_QueueHandle, &msg_manu, portMAX_DELAY);
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);					// Waiting for selected menu (waiting the choise) (from 'process_command' function)
 8001a34:	f107 020c 	add.w	r2, r7, #12
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f00e f95c 	bl	800fcfc <xTaskNotifyWait>
		cmd = (command_t*)cmd_addr;										// If number selected menu are selected, save it
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)												// Checking, must be one number, not more
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	7a9b      	ldrb	r3, [r3, #10]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d13a      	bne.n	8001ac6 <start_menu_task+0xc2>
		{
			option = cmd -> payload[0] - 48;							// Convert from char to number, and write it on struct
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3b30      	subs	r3, #48	; 0x30
 8001a56:	613b      	str	r3, [r7, #16]

			switch (option)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d01f      	beq.n	8001a9e <start_menu_task+0x9a>
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	dc27      	bgt.n	8001ab4 <start_menu_task+0xb0>
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <start_menu_task+0x6e>
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d00b      	beq.n	8001a88 <start_menu_task+0x84>
 8001a70:	e020      	b.n	8001ab4 <start_menu_task+0xb0>
			{
				case 0:													// If selected LED menu
					curr_state = sLedEffect;
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <start_menu_task+0xec>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_taskHandle, 0 ,eNoAction);
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <start_menu_task+0xf0>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	f00e f99b 	bl	800fdbc <xTaskGenericNotify>
					break;
 8001a86:	e027      	b.n	8001ad8 <start_menu_task+0xd4>

				case 1:
					curr_state = sRtcMenu;								// If selected RTC menu
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <start_menu_task+0xec>)
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_taskHandle, 0, eNoAction);
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <start_menu_task+0xf4>)
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	f00e f990 	bl	800fdbc <xTaskGenericNotify>
					break;
 8001a9c:	e01c      	b.n	8001ad8 <start_menu_task+0xd4>

				case 2:		// Implement EXIT   (Return to main menu and print it)
					//////////////////////////////////////////////////
					curr_state = sMainMenu;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <start_menu_task+0xec>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(menu_taskHandle, 0 ,eNoAction);
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <start_menu_task+0xf8>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	f00e f985 	bl	800fdbc <xTaskGenericNotify>
					/////////////////////////////////////////////////
					break;
 8001ab2:	e011      	b.n	8001ad8 <start_menu_task+0xd4>

				default:															// If input sign uncorrect
					xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);			// Print message: /// Invalid option ///
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <start_menu_task+0xe8>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001abe:	4910      	ldr	r1, [pc, #64]	; (8001b00 <start_menu_task+0xfc>)
 8001ac0:	f00c fd9c 	bl	800e5fc <xQueueGenericSend>
					continue;														// Return to while(1)
 8001ac4:	e00f      	b.n	8001ae6 <start_menu_task+0xe2>
			}
		}
		else															// Invalid entry (entered more than one char)
		{
			xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Print message: /// Invalid option ///
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <start_menu_task+0xe8>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	2300      	movs	r3, #0
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad0:	490b      	ldr	r1, [pc, #44]	; (8001b00 <start_menu_task+0xfc>)
 8001ad2:	f00c fd93 	bl	800e5fc <xQueueGenericSend>
			continue;													// Return to while(1)
 8001ad6:	e006      	b.n	8001ae6 <start_menu_task+0xe2>
		}

		// Wait to run again when some other task notifies.
		// After notify return to "while(1)" main loop again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f00e f90b 	bl	800fcfc <xTaskNotifyWait>
	{
 8001ae6:	e793      	b.n	8001a10 <start_menu_task+0xc>
 8001ae8:	080122a4 	.word	0x080122a4
 8001aec:	20004c5c 	.word	0x20004c5c
 8001af0:	200000d7 	.word	0x200000d7
 8001af4:	20004bcc 	.word	0x20004bcc
 8001af8:	20004c60 	.word	0x20004c60
 8001afc:	20004d00 	.word	0x20004d00
 8001b00:	20000000 	.word	0x20000000

08001b04 <start_led_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_led_task */
void start_led_task(void *argument)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
//	{
//		osDelay(100);
//	}
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n\r"
 8001b0c:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <start_led_task+0x124>)
 8001b0e:	60fb      	str	r3, [r7, #12]
						  "(none, e1, e2, e3, e4, on, off)  \n\r"
						  "Enter your choice here : \n\r";

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);					  	// Wait for notification (selected LEDs effect)
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f00e f8ef 	bl	800fcfc <xTaskNotifyWait>
		xQueueSend(print_QueueHandle, &msg_led, portMAX_DELAY);			// Send data to print (Print LED menu)
 8001b1e:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <start_led_task+0x128>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	f107 010c 	add.w	r1, r7, #12
 8001b26:	2300      	movs	r3, #0
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b2c:	f00c fd66 	bl	800e5fc <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);				// Wait for LED command
 8001b30:	f107 0210 	add.w	r2, r7, #16
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f00e f8de 	bl	800fcfc <xTaskNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	617b      	str	r3, [r7, #20]

		if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	7a9b      	ldrb	r3, [r3, #10]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d859      	bhi.n	8001c00 <start_led_task+0xfc>
		{
			// Select LED effect
			if( ! strcmp((char*)cmd->payload, "none" ))
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	4938      	ldr	r1, [pc, #224]	; (8001c30 <start_led_task+0x12c>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fb3d 	bl	80001d0 <strcmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <start_led_task+0x5e>
			{
				led_effect_stop();
 8001b5c:	f7ff fc7e 	bl	800145c <led_effect_stop>
 8001b60:	e056      	b.n	8001c10 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e1"))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	4933      	ldr	r1, [pc, #204]	; (8001c34 <start_led_task+0x130>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fb32 	bl	80001d0 <strcmp>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <start_led_task+0x76>
			{
				led_effect(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f7ff fc92 	bl	800149c <led_effect>
 8001b78:	e04a      	b.n	8001c10 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e2"))
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	492e      	ldr	r1, [pc, #184]	; (8001c38 <start_led_task+0x134>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fb26 	bl	80001d0 <strcmp>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <start_led_task+0x8e>
			{
				led_effect(2);
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f7ff fc86 	bl	800149c <led_effect>
 8001b90:	e03e      	b.n	8001c10 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e3"))
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4929      	ldr	r1, [pc, #164]	; (8001c3c <start_led_task+0x138>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fb1a 	bl	80001d0 <strcmp>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <start_led_task+0xa6>
			{
				led_effect(3);
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	f7ff fc7a 	bl	800149c <led_effect>
 8001ba8:	e032      	b.n	8001c10 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "e4"))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	4924      	ldr	r1, [pc, #144]	; (8001c40 <start_led_task+0x13c>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fb0e 	bl	80001d0 <strcmp>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <start_led_task+0xbe>
			{
				led_effect(4);
 8001bba:	2004      	movs	r0, #4
 8001bbc:	f7ff fc6e 	bl	800149c <led_effect>
 8001bc0:	e026      	b.n	8001c10 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "on"))			// Work
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	491f      	ldr	r1, [pc, #124]	; (8001c44 <start_led_task+0x140>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fb02 	bl	80001d0 <strcmp>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <start_led_task+0xd4>
			{
				turn_on_all_leds();
 8001bd2:	f7ff fc9f 	bl	8001514 <turn_on_all_leds>
 8001bd6:	e01b      	b.n	8001c10 <start_led_task+0x10c>
			}
			else if (! strcmp((char*)cmd -> payload, "off"))		// Work
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	491b      	ldr	r1, [pc, #108]	; (8001c48 <start_led_task+0x144>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe faf7 	bl	80001d0 <strcmp>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <start_led_task+0xea>
			{
				turn_off_all_leds();
 8001be8:	f7ff fc76 	bl	80014d8 <turn_off_all_leds>
 8001bec:	e010      	b.n	8001c10 <start_led_task+0x10c>
			}
			else
			{
				xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);				// Print invalid massage
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <start_led_task+0x128>)
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf8:	4914      	ldr	r1, [pc, #80]	; (8001c4c <start_led_task+0x148>)
 8001bfa:	f00c fcff 	bl	800e5fc <xQueueGenericSend>
 8001bfe:	e007      	b.n	8001c10 <start_led_task+0x10c>
			}
		}
		else
		{
			xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);					// Print invalid massage
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <start_led_task+0x128>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c0a:	4910      	ldr	r1, [pc, #64]	; (8001c4c <start_led_task+0x148>)
 8001c0c:	f00c fcf6 	bl	800e5fc <xQueueGenericSend>
		}

		curr_state = sMainMenu;								// Return to mai menu
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <start_led_task+0x14c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
		xTaskNotify(menu_taskHandle, 0, eNoAction);			// Notify menu task
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <start_led_task+0x150>)
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	f00e f8cc 	bl	800fdbc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);					  	// Wait for notification (selected LEDs effect)
 8001c24:	e774      	b.n	8001b10 <start_led_task+0xc>
 8001c26:	bf00      	nop
 8001c28:	0801235c 	.word	0x0801235c
 8001c2c:	20004c5c 	.word	0x20004c5c
 8001c30:	080123ec 	.word	0x080123ec
 8001c34:	080123f4 	.word	0x080123f4
 8001c38:	080123f8 	.word	0x080123f8
 8001c3c:	080123fc 	.word	0x080123fc
 8001c40:	08012400 	.word	0x08012400
 8001c44:	08012404 	.word	0x08012404
 8001c48:	08012408 	.word	0x08012408
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	200000d7 	.word	0x200000d7
 8001c54:	20004d00 	.word	0x20004d00

08001c58 <start_rtc_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_rtc_task */
void start_rtc_task(void *argument)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b098      	sub	sp, #96	; 0x60
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_rtc_task */
  /* Infinite loop */

	const char* msg_rtc1 = "========================\n\r"
 8001c60:	4bba      	ldr	r3, [pc, #744]	; (8001f4c <start_rtc_task+0x2f4>)
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
						   "Configure Date   ----> 1\n\r"
						   "Enable reporting ----> 2\n\r"
			               "Exit             ----> 3\n\r"
			  	  	  	   "Enter your choice here : \n\r";

	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001c64:	4bba      	ldr	r3, [pc, #744]	; (8001f50 <start_rtc_task+0x2f8>)
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001c68:	4bba      	ldr	r3, [pc, #744]	; (8001f54 <start_rtc_task+0x2fc>)
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001c6c:	4bba      	ldr	r3, [pc, #744]	; (8001f58 <start_rtc_task+0x300>)
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8001c70:	4bba      	ldr	r3, [pc, #744]	; (8001f5c <start_rtc_task+0x304>)
 8001c72:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001c74:	4bba      	ldr	r3, [pc, #744]	; (8001f60 <start_rtc_task+0x308>)
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001c78:	4bba      	ldr	r3, [pc, #744]	; (8001f64 <start_rtc_task+0x30c>)
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001c7c:	4bba      	ldr	r3, [pc, #744]	; (8001f68 <start_rtc_task+0x310>)
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30

	const char *msg_conf = "Configuration successful\n";
 8001c80:	4bba      	ldr	r3, [pc, #744]	; (8001f6c <start_rtc_task+0x314>)
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001c84:	4bba      	ldr	r3, [pc, #744]	; (8001f70 <start_rtc_task+0x318>)
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
	#define YEAR_CONFIG		2
	#define DAY_CONFIG		3

	while(1)
	{
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);								// Notify wait (wait till someone notifies)
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2000      	movs	r0, #0
 8001c92:	f00e f833 	bl	800fcfc <xTaskNotifyWait>
		xQueueSend(print_QueueHandle, &msg_rtc1, portMAX_DELAY);			    // Print the menu
 8001c96:	4bb7      	ldr	r3, [pc, #732]	; (8001f74 <start_rtc_task+0x31c>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca4:	f00c fcaa 	bl	800e5fc <xQueueGenericSend>
		show_time_date();														// Print the current date and time information
 8001ca8:	f7ff fda8 	bl	80017fc <show_time_date>
		//osDelay(100);


		//xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		//xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);		 			// Wait for command notification (Notify wait)
		while(curr_state != sMainMenu)
 8001cac:	bf00      	nop
 8001cae:	e19e      	b.n	8001fee <start_rtc_task+0x396>
//
//			if(cmd -> len <= 4)											    // Check input command (max input size must be less then 4)
//					{

			/////////////////////////////////////////////
			int ret_status = xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);		 			// Waiting for command notification (Notify wait)
 8001cb0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f00e f81e 	bl	800fcfc <xTaskNotifyWait>
 8001cc0:	65b8      	str	r0, [r7, #88]	; 0x58
			// Return 0x410908 and  cmd_addr = 0x410908
			cmd = (command_t*)cmd_addr;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54


			//int test_var = cmd -> len;		 	// For test   HARD FOULT <<<<<<<<<<<<<<<<<<<<<<<<<

			switch(curr_state)
 8001cc6:	4bac      	ldr	r3, [pc, #688]	; (8001f78 <start_rtc_task+0x320>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3b02      	subs	r3, #2
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	f200 818e 	bhi.w	8001fee <start_rtc_task+0x396>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <start_rtc_task+0x80>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001d9f 	.word	0x08001d9f
 8001ce0:	08001e91 	.word	0x08001e91
 8001ce4:	08001fed 	.word	0x08001fed
			{
				case sRtcMenu:{
					if((cmd -> len) == 1)			// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cea:	7a9b      	ldrb	r3, [r3, #10]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d14a      	bne.n	8001d86 <start_rtc_task+0x12e>
					{
						menu_code = cmd -> payload[0] - 48;
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3b30      	subs	r3, #48	; 0x30
 8001cf6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
						switch(menu_code)
 8001cfa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d835      	bhi.n	8001d6e <start_rtc_task+0x116>
 8001d02:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <start_rtc_task+0xb0>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d19 	.word	0x08001d19
 8001d0c:	08001d33 	.word	0x08001d33
 8001d10:	08001d4d 	.word	0x08001d4d
 8001d14:	08001d67 	.word	0x08001d67
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001d18:	4b97      	ldr	r3, [pc, #604]	; (8001f78 <start_rtc_task+0x320>)
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_hh, portMAX_DELAY);
 8001d1e:	4b95      	ldr	r3, [pc, #596]	; (8001f74 <start_rtc_task+0x31c>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001d26:	2300      	movs	r3, #0
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d2c:	f00c fc66 	bl	800e5fc <xQueueGenericSend>
							break;
 8001d30:	e034      	b.n	8001d9c <start_rtc_task+0x144>

						case 1:
							curr_state = sRtcDateConfig;
 8001d32:	4b91      	ldr	r3, [pc, #580]	; (8001f78 <start_rtc_task+0x320>)
 8001d34:	2204      	movs	r2, #4
 8001d36:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_dd, portMAX_DELAY);
 8001d38:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <start_rtc_task+0x31c>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d40:	2300      	movs	r3, #0
 8001d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d46:	f00c fc59 	bl	800e5fc <xQueueGenericSend>
							break;
 8001d4a:	e027      	b.n	8001d9c <start_rtc_task+0x144>

						case 2:
							curr_state = sRtcReport;
 8001d4c:	4b8a      	ldr	r3, [pc, #552]	; (8001f78 <start_rtc_task+0x320>)
 8001d4e:	2205      	movs	r2, #5
 8001d50:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_report, portMAX_DELAY);
 8001d52:	4b88      	ldr	r3, [pc, #544]	; (8001f74 <start_rtc_task+0x31c>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	f00c fc4c 	bl	800e5fc <xQueueGenericSend>
							break;
 8001d64:	e01a      	b.n	8001d9c <start_rtc_task+0x144>

						case 3:
							curr_state = sMainMenu;
 8001d66:	4b84      	ldr	r3, [pc, #528]	; (8001f78 <start_rtc_task+0x320>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
							break;
 8001d6c:	e016      	b.n	8001d9c <start_rtc_task+0x144>
						default:
							curr_state = sMainMenu;
 8001d6e:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <start_rtc_task+0x320>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 8001d74:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <start_rtc_task+0x31c>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7e:	497f      	ldr	r1, [pc, #508]	; (8001f7c <start_rtc_task+0x324>)
 8001d80:	f00c fc3c 	bl	800e5fc <xQueueGenericSend>
 8001d84:	e133      	b.n	8001fee <start_rtc_task+0x396>
						}
					}
					else
					{
						curr_state = sMainMenu;			// Go back to the main manu
 8001d86:	4b7c      	ldr	r3, [pc, #496]	; (8001f78 <start_rtc_task+0x320>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
						xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Send invalid message
 8001d8c:	4b79      	ldr	r3, [pc, #484]	; (8001f74 <start_rtc_task+0x31c>)
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d96:	4979      	ldr	r1, [pc, #484]	; (8001f7c <start_rtc_task+0x324>)
 8001d98:	f00c fc30 	bl	800e5fc <xQueueGenericSend>
					}
					break;}
 8001d9c:	e127      	b.n	8001fee <start_rtc_task+0x396>

				case sRtcTimeConfig:{
					//  get hh, mm, ss infor and configure RTC
					//rtc_configure_time();
					// take care of invalid entries
					switch (rtc_state)
 8001d9e:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <start_rtc_task+0x328>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d03a      	beq.n	8001e1c <start_rtc_task+0x1c4>
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	dc6e      	bgt.n	8001e88 <start_rtc_task+0x230>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <start_rtc_task+0x15c>
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d01a      	beq.n	8001de8 <start_rtc_task+0x190>
 8001db2:	e069      	b.n	8001e88 <start_rtc_task+0x230>
					{
						case HH_CONFIG:{
							uint8_t hour = getnumber(cmd -> payload, cmd -> len);
 8001db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db8:	7a9b      	ldrb	r3, [r3, #10]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f7ff fdab 	bl	8001918 <getnumber>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
							time.Hours = hour;
 8001dc8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dcc:	743b      	strb	r3, [r7, #16]
							rtc_state = MM_CONFIG;
 8001dce:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <start_rtc_task+0x328>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_mm, portMAX_DELAY);
 8001dd4:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <start_rtc_task+0x31c>)
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de2:	f00c fc0b 	bl	800e5fc <xQueueGenericSend>
							break;}				// back to: while(curr_state != sMainMenu)
 8001de6:	e04f      	b.n	8001e88 <start_rtc_task+0x230>

						case MM_CONFIG:{
							uint8_t minute = getnumber(cmd -> payload, cmd -> len);
 8001de8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dec:	7a9b      	ldrb	r3, [r3, #10]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f7ff fd91 	bl	8001918 <getnumber>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
							time.Minutes = minute;
 8001dfc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e00:	747b      	strb	r3, [r7, #17]
							rtc_state = SS_CONFIG;
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <start_rtc_task+0x328>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_ss, portMAX_DELAY);
 8001e08:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <start_rtc_task+0x31c>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001e10:	2300      	movs	r3, #0
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e16:	f00c fbf1 	bl	800e5fc <xQueueGenericSend>
							break;}
 8001e1a:	e035      	b.n	8001e88 <start_rtc_task+0x230>
						case SS_CONFIG:{
							uint8_t second = getnumber(cmd -> payload, cmd -> len);
 8001e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	7a9b      	ldrb	r3, [r3, #10]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4610      	mov	r0, r2
 8001e26:	f7ff fd77 	bl	8001918 <getnumber>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
							time.Seconds = second;
 8001e30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e34:	74bb      	strb	r3, [r7, #18]

							if(!validate_rtc_information(&time, NULL))
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fd8f 	bl	8001960 <validate_rtc_information>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d110      	bne.n	8001e6a <start_rtc_task+0x212>
							{
								// If input data is correct
								rtc_configure_time(&time);
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fd41 	bl	80018d4 <rtc_configure_time>
								xQueueSend(print_QueueHandle, &msg_conf, portMAX_DELAY);
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <start_rtc_task+0x31c>)
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e60:	f00c fbcc 	bl	800e5fc <xQueueGenericSend>
								show_time_date();
 8001e64:	f7ff fcca 	bl	80017fc <show_time_date>
 8001e68:	e007      	b.n	8001e7a <start_rtc_task+0x222>
							}
							else
							{
								// If Input data isn't correct
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);		// Send invalid message
 8001e6a:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <start_rtc_task+0x31c>)
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e74:	4941      	ldr	r1, [pc, #260]	; (8001f7c <start_rtc_task+0x324>)
 8001e76:	f00c fbc1 	bl	800e5fc <xQueueGenericSend>
							}
							curr_state = sMainMenu;			// Back to main menu
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <start_rtc_task+0x320>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;					// Set first: case HH_CONFIG:{
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <start_rtc_task+0x328>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
							break;}
 8001e86:	bf00      	nop
					}

					curr_state = sMainMenu;			// Go back to the main manu
 8001e88:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <start_rtc_task+0x320>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
					break;}
 8001e8e:	e0ae      	b.n	8001fee <start_rtc_task+0x396>

				case sRtcDateConfig:{
					switch (rtc_state)
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <start_rtc_task+0x328>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	f200 80a5 	bhi.w	8001fe4 <start_rtc_task+0x38c>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <start_rtc_task+0x248>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001f19 	.word	0x08001f19
 8001ea8:	08001f85 	.word	0x08001f85
 8001eac:	08001ee5 	.word	0x08001ee5
					{
						case DATE_CONFIG:{
							uint8_t d = getnumber(cmd -> payload, cmd -> len);
 8001eb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb4:	7a9b      	ldrb	r3, [r3, #10]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4610      	mov	r0, r2
 8001eba:	f7ff fd2d 	bl	8001918 <getnumber>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
							date.Date = d;
 8001ec4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001ec8:	73bb      	strb	r3, [r7, #14]
							rtc_state = DAY_CONFIG;
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <start_rtc_task+0x328>)
 8001ecc:	2203      	movs	r2, #3
 8001ece:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_mo, portMAX_DELAY);
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <start_rtc_task+0x31c>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ede:	f00c fb8d 	bl	800e5fc <xQueueGenericSend>
							break;}
 8001ee2:	e07f      	b.n	8001fe4 <start_rtc_task+0x38c>

						case DAY_CONFIG:{
							uint8_t d = getnumber(cmd -> payload, cmd -> len);
 8001ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee8:	7a9b      	ldrb	r3, [r3, #10]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4610      	mov	r0, r2
 8001eee:	f7ff fd13 	bl	8001918 <getnumber>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
							date.Year = d;
 8001ef8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001efc:	73fb      	strb	r3, [r7, #15]
							rtc_state = MONTH_CONFIG;
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <start_rtc_task+0x328>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_yr, portMAX_DELAY);
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <start_rtc_task+0x31c>)
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f12:	f00c fb73 	bl	800e5fc <xQueueGenericSend>
							break;}
 8001f16:	e065      	b.n	8001fe4 <start_rtc_task+0x38c>

						case MONTH_CONFIG:{
							uint8_t m = getnumber(cmd -> payload, cmd -> len);
 8001f18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1c:	7a9b      	ldrb	r3, [r3, #10]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4610      	mov	r0, r2
 8001f22:	f7ff fcf9 	bl	8001918 <getnumber>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
							date.Month = m;
 8001f2c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f30:	737b      	strb	r3, [r7, #13]
							rtc_state = YEAR_CONFIG;
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <start_rtc_task+0x328>)
 8001f34:	2202      	movs	r2, #2
 8001f36:	601a      	str	r2, [r3, #0]
							xQueueSend(print_QueueHandle, &msg_rtc_yr, portMAX_DELAY);
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <start_rtc_task+0x31c>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001f40:	2300      	movs	r3, #0
 8001f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f46:	f00c fb59 	bl	800e5fc <xQueueGenericSend>
							break;}
 8001f4a:	e04b      	b.n	8001fe4 <start_rtc_task+0x38c>
 8001f4c:	0801240c 	.word	0x0801240c
 8001f50:	080124e0 	.word	0x080124e0
 8001f54:	080124f4 	.word	0x080124f4
 8001f58:	0801250c 	.word	0x0801250c
 8001f5c:	08012524 	.word	0x08012524
 8001f60:	08012538 	.word	0x08012538
 8001f64:	0801254c 	.word	0x0801254c
 8001f68:	08012564 	.word	0x08012564
 8001f6c:	08012578 	.word	0x08012578
 8001f70:	08012594 	.word	0x08012594
 8001f74:	20004c5c 	.word	0x20004c5c
 8001f78:	200000d7 	.word	0x200000d7
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000138 	.word	0x20000138

						case YEAR_CONFIG:{
							uint8_t y = getnumber(cmd -> payload, cmd -> len);
 8001f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f88:	7a9b      	ldrb	r3, [r3, #10]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7ff fcc3 	bl	8001918 <getnumber>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
							date.Year = y;
 8001f98:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001f9c:	73fb      	strb	r3, [r7, #15]

							if(!validate_rtc_information(NULL, &date))
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff fcdb 	bl	8001960 <validate_rtc_information>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d110      	bne.n	8001fd2 <start_rtc_task+0x37a>
							{
								rtc_configure_date(&date);
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fc9f 	bl	80018f8 <rtc_configure_date>
								xQueueSend(print_QueueHandle, &msg_conf, portMAX_DELAY);
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <start_rtc_task+0x3b0>)
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc8:	f00c fb18 	bl	800e5fc <xQueueGenericSend>
								show_time_date();
 8001fcc:	f7ff fc16 	bl	80017fc <show_time_date>
							{
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
							}


							break;}
 8001fd0:	e007      	b.n	8001fe2 <start_rtc_task+0x38a>
								xQueueSend(print_QueueHandle, &msg_inv, portMAX_DELAY);
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <start_rtc_task+0x3b0>)
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fdc:	490b      	ldr	r1, [pc, #44]	; (800200c <start_rtc_task+0x3b4>)
 8001fde:	f00c fb0d 	bl	800e5fc <xQueueGenericSend>
							break;}
 8001fe2:	bf00      	nop
					//rtc_configure_date();
					/*TODO: take care of invalid entries */



					curr_state = sMainMenu;			// Go back to the main manu
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <start_rtc_task+0x3b8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
					break;}
 8001fea:	e000      	b.n	8001fee <start_rtc_task+0x396>

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					break;}
 8001fec:	bf00      	nop
		while(curr_state != sMainMenu)
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <start_rtc_task+0x3b8>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f47f ae5c 	bne.w	8001cb0 <start_rtc_task+0x58>
				}// switch end
//			}


		} //while end
		xTaskNotify(menu_taskHandle, 0, eNoAction);		// Notify menu task
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <start_rtc_task+0x3bc>)
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	f00d fedb 	bl	800fdbc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);								// Notify wait (wait till someone notifies)
 8002006:	e63f      	b.n	8001c88 <start_rtc_task+0x30>
 8002008:	20004c5c 	.word	0x20004c5c
 800200c:	20000000 	.word	0x20000000
 8002010:	200000d7 	.word	0x200000d7
 8002014:	20004d00 	.word	0x20004d00

08002018 <start_print>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_print */
void start_print(void *argument)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	uint32_t *msg;

	while(1)
	{
		int status = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
		status = xQueueReceive(print_QueueHandle, &msg, portMAX_DELAY);
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <start_print+0x50>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f107 0108 	add.w	r1, r7, #8
 800202c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002030:	4618      	mov	r0, r3
 8002032:	f00c fc7d 	bl	800e930 <xQueueReceive>
 8002036:	6178      	str	r0, [r7, #20]
		if(status != pdPASS)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d002      	beq.n	8002044 <start_print+0x2c>
		{
			// ERROR
			int ggg =999;
 800203e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002042:	613b      	str	r3, [r7, #16]
		}
	    HAL_UART_Transmit(&huart2,(uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);					// Doesen't work =(
 8002044:	68bc      	ldr	r4, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f8cb 	bl	80001e4 <strlen>
 800204e:	4603      	mov	r3, r0
 8002050:	b29a      	uxth	r2, r3
 8002052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002056:	4621      	mov	r1, r4
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <start_print+0x54>)
 800205a:	f007 fdbc 	bl	8009bd6 <HAL_UART_Transmit>
	    int ggg = 888;
 800205e:	f44f 735e 	mov.w	r3, #888	; 0x378
 8002062:	60fb      	str	r3, [r7, #12]
	{
 8002064:	e7dc      	b.n	8002020 <start_print+0x8>
 8002066:	bf00      	nop
 8002068:	20004c5c 	.word	0x20004c5c
 800206c:	20004cbc 	.word	0x20004cbc

08002070 <start_cmd_handl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_cmd_handl */
void start_cmd_handl(void *argument)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	command_t cmd;			// Create command variable

	for(;;)
	{
		// Waiting on notify from HAL_UART_RxCpltCallback
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	2000      	movs	r0, #0
 8002082:	f00d fe3b 	bl	800fcfc <xTaskNotifyWait>
 8002086:	6178      	str	r0, [r7, #20]
		if(ret == pdTRUE)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d1f4      	bne.n	8002078 <start_cmd_handl+0x8>
		{
			process_command(&cmd);
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fb42 	bl	800171c <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002098:	e7ee      	b.n	8002078 <start_cmd_handl+0x8>
	...

0800209c <StartOLED_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLED_RTC */
void StartOLED_RTC(void *argument)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0a0      	sub	sp, #128	; 0x80
 80020a0:	af04      	add	r7, sp, #16
 80020a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOLED_RTC */
  /* Infinite loop */

	osDelay(1000);
 80020a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a8:	f00b ff36 	bl	800df18 <osDelay>

		// For resd time
		char time[20] = {0};
 80020ac:	2300      	movs	r3, #0
 80020ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80020b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
		char date[40] = {0};
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
 80020c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00f fbba 	bl	8011844 <memset>
		char time_buf[10] = {0};
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	809a      	strh	r2, [r3, #4]
		char time_buf_2[10] = {0};
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	809a      	strh	r2, [r3, #4]

		uint8_t seconds = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	75fb      	strb	r3, [r7, #23]
		uint8_t minutes = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75bb      	strb	r3, [r7, #22]
		uint8_t hours = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	757b      	strb	r3, [r7, #21]
		uint8_t day = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	753b      	strb	r3, [r7, #20]
		uint8_t date_day = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	74fb      	strb	r3, [r7, #19]
		uint8_t mounth = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	74bb      	strb	r3, [r7, #18]
		uint8_t year = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	747b      	strb	r3, [r7, #17]
		uint8_t status = 9;
 8002108:	2309      	movs	r3, #9
 800210a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		//

		oled_init();
 800210e:	f001 ff61 	bl	8003fd4 <oled_init>
		oled_update();
 8002112:	f001 ff0b 	bl	8003f2c <oled_update>
		ds3231_I2C_init();
 8002116:	f7fe fac7 	bl	80006a8 <ds3231_I2C_init>

		// Encoder
		HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800211a:	213c      	movs	r1, #60	; 0x3c
 800211c:	48c9      	ldr	r0, [pc, #804]	; (8002444 <StartOLED_RTC+0x3a8>)
 800211e:	f007 f9f8 	bl	8009512 <HAL_TIM_Encoder_Start>
		int32_t prevCounter = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
		//

		for(;;)
		{
			switch (klick)
 8002126:	4bc8      	ldr	r3, [pc, #800]	; (8002448 <StartOLED_RTC+0x3ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	d8fb      	bhi.n	8002126 <StartOLED_RTC+0x8a>
 800212e:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <StartOLED_RTC+0x98>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	08002175 	.word	0x08002175
 8002138:	080027a5 	.word	0x080027a5
 800213c:	08002127 	.word	0x08002127
 8002140:	0800290f 	.word	0x0800290f
 8002144:	08002127 	.word	0x08002127
 8002148:	08002a4b 	.word	0x08002a4b
 800214c:	08002127 	.word	0x08002127
 8002150:	08002bb9 	.word	0x08002bb9
 8002154:	08002127 	.word	0x08002127
 8002158:	08002cff 	.word	0x08002cff
 800215c:	08002127 	.word	0x08002127
 8002160:	08002e4f 	.word	0x08002e4f
 8002164:	08002127 	.word	0x08002127
 8002168:	08002f75 	.word	0x08002f75
 800216c:	08002127 	.word	0x08002127
 8002170:	080030c7 	.word	0x080030c7
			{
				case 0:					// Read time and data from DS3231

					strcat(time_buf, "TIME");
 8002174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f833 	bl	80001e4 <strlen>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002186:	4413      	add	r3, r2
 8002188:	4ab0      	ldr	r2, [pc, #704]	; (800244c <StartOLED_RTC+0x3b0>)
 800218a:	6810      	ldr	r0, [r2, #0]
 800218c:	6018      	str	r0, [r3, #0]
 800218e:	7912      	ldrb	r2, [r2, #4]
 8002190:	711a      	strb	r2, [r3, #4]
					graphics_text(40, 10, 3, time_buf);
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	2203      	movs	r2, #3
 8002198:	210a      	movs	r1, #10
 800219a:	2028      	movs	r0, #40	; 0x28
 800219c:	f001 fe12 	bl	8003dc4 <graphics_text>
					oled_update();
 80021a0:	f001 fec4 	bl	8003f2c <oled_update>
					osDelay(2000);
 80021a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021a8:	f00b feb6 	bl	800df18 <osDelay>
					clear();
 80021ac:	f001 fc56 	bl	8003a5c <clear>
					oled_update();
 80021b0:	f001 febc 	bl	8003f2c <oled_update>

					while(klick == 0)
 80021b4:	e2ef      	b.n	8002796 <StartOLED_RTC+0x6fa>
					{
						memset(time, 0, sizeof(time));
 80021b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ba:	2214      	movs	r2, #20
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f00f fb40 	bl	8011844 <memset>
						memset(date, 0, sizeof(date));
 80021c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c8:	2228      	movs	r2, #40	; 0x28
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f00f fb39 	bl	8011844 <memset>
						memset(time_buf, 0, sizeof(time_buf));
 80021d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d6:	220a      	movs	r2, #10
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f00f fb32 	bl	8011844 <memset>
						memset(time_buf_2, 0, sizeof(time_buf_2));
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	220a      	movs	r2, #10
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00f fb2b 	bl	8011844 <memset>

						// 1. Read time from RTS
						// Red status (Detect DS3231)
						uint8_t buff= 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	72fb      	strb	r3, [r7, #11]
						status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	2301      	movs	r3, #1
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	f107 030b 	add.w	r3, r7, #11
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2301      	movs	r3, #1
 8002204:	2200      	movs	r2, #0
 8002206:	21d0      	movs	r1, #208	; 0xd0
 8002208:	4891      	ldr	r0, [pc, #580]	; (8002450 <StartOLED_RTC+0x3b4>)
 800220a:	f004 fbf7 	bl	80069fc <HAL_I2C_Mem_Read>
 800220e:	4603      	mov	r3, r0
 8002210:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if(status != HAL_OK )								// If DS3231 doesen'e detect
 8002214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002218:	2b00      	cmp	r3, #0
 800221a:	d050      	beq.n	80022be <StartOLED_RTC+0x222>
						{
							clear();
 800221c:	f001 fc1e 	bl	8003a5c <clear>
							while(status != HAL_OK)							// If ERROR
 8002220:	e046      	b.n	80022b0 <StartOLED_RTC+0x214>
							{
								strcat(time_buf, "RTC ERROR");
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4618      	mov	r0, r3
 8002228:	f7fd ffdc 	bl	80001e4 <strlen>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	4413      	add	r3, r2
 8002236:	4987      	ldr	r1, [pc, #540]	; (8002454 <StartOLED_RTC+0x3b8>)
 8002238:	461a      	mov	r2, r3
 800223a:	460b      	mov	r3, r1
 800223c:	cb03      	ldmia	r3!, {r0, r1}
 800223e:	6010      	str	r0, [r2, #0]
 8002240:	6051      	str	r1, [r2, #4]
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	8113      	strh	r3, [r2, #8]
								graphics_text(8, 5, 3, time_buf);
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	2203      	movs	r2, #3
 800224c:	2105      	movs	r1, #5
 800224e:	2008      	movs	r0, #8
 8002250:	f001 fdb8 	bl	8003dc4 <graphics_text>
								oled_update();
 8002254:	f001 fe6a 	bl	8003f2c <oled_update>
								memset(time_buf, 0, sizeof(time_buf));
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	220a      	movs	r2, #10
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f00f faef 	bl	8011844 <memset>
								osDelay(300);
 8002266:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800226a:	f00b fe55 	bl	800df18 <osDelay>

								invert_rectangle(0, 0, 128, 32);
 800226e:	2320      	movs	r3, #32
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	2100      	movs	r1, #0
 8002274:	2000      	movs	r0, #0
 8002276:	f001 fbc3 	bl	8003a00 <invert_rectangle>
								oled_update();
 800227a:	f001 fe57 	bl	8003f2c <oled_update>
								osDelay(300);
 800227e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002282:	f00b fe49 	bl	800df18 <osDelay>

								clear();
 8002286:	f001 fbe9 	bl	8003a5c <clear>
								oled_update();
 800228a:	f001 fe4f 	bl	8003f2c <oled_update>

								status = HAL_I2C_Mem_Read(&hi2c3, (uint16_t)DS3231_I2C_ADDRESS<<1,(uint16_t)0, (uint16_t) 1, &buff, (uint16_t) 1,(uint32_t) 1000);
 800228e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002292:	9302      	str	r3, [sp, #8]
 8002294:	2301      	movs	r3, #1
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	f107 030b 	add.w	r3, r7, #11
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2301      	movs	r3, #1
 80022a0:	2200      	movs	r2, #0
 80022a2:	21d0      	movs	r1, #208	; 0xd0
 80022a4:	486a      	ldr	r0, [pc, #424]	; (8002450 <StartOLED_RTC+0x3b4>)
 80022a6:	f004 fba9 	bl	80069fc <HAL_I2C_Mem_Read>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							while(status != HAL_OK)							// If ERROR
 80022b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1b4      	bne.n	8002222 <StartOLED_RTC+0x186>
							}
							clear();
 80022b8:	f001 fbd0 	bl	8003a5c <clear>
 80022bc:	e26b      	b.n	8002796 <StartOLED_RTC+0x6fa>
						}

						else	// If all DS3231 detected, read time and date
						{
							ds3231_read(DS3231_REGISTER_SECONDS_DEFAULT, &seconds);
 80022be:	f107 0317 	add.w	r3, r7, #23
 80022c2:	4619      	mov	r1, r3
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe f9f7 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MINUTES_DEFAULT, &minutes);
 80022ca:	f107 0316 	add.w	r3, r7, #22
 80022ce:	4619      	mov	r1, r3
 80022d0:	2001      	movs	r0, #1
 80022d2:	f7fe f9f1 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_HOURS_DEFAULT, &hours);
 80022d6:	f107 0315 	add.w	r3, r7, #21
 80022da:	4619      	mov	r1, r3
 80022dc:	2002      	movs	r0, #2
 80022de:	f7fe f9eb 	bl	80006b8 <ds3231_read>

							ds3231_read(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &day);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	2003      	movs	r0, #3
 80022ea:	f7fe f9e5 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_DATE_DEFAULT, &date_day);
 80022ee:	f107 0313 	add.w	r3, r7, #19
 80022f2:	4619      	mov	r1, r3
 80022f4:	2004      	movs	r0, #4
 80022f6:	f7fe f9df 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_MONTH_DEFAULT, &mounth);
 80022fa:	f107 0312 	add.w	r3, r7, #18
 80022fe:	4619      	mov	r1, r3
 8002300:	2005      	movs	r0, #5
 8002302:	f7fe f9d9 	bl	80006b8 <ds3231_read>
							ds3231_read(DS3231_REGISTER_YEAR_DEFAULT, &year);
 8002306:	f107 0311 	add.w	r3, r7, #17
 800230a:	4619      	mov	r1, r3
 800230c:	2006      	movs	r0, #6
 800230e:	f7fe f9d3 	bl	80006b8 <ds3231_read>

							// Convert in string
							// Print minutes on OLED
							if(hours < 10)
 8002312:	7d7b      	ldrb	r3, [r7, #21]
 8002314:	2b09      	cmp	r3, #9
 8002316:	d835      	bhi.n	8002384 <StartOLED_RTC+0x2e8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	220a      	movs	r2, #10
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f00f fa8f 	bl	8011844 <memset>
								sprintf(time_buf, "%c", '0');
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	2230      	movs	r2, #48	; 0x30
 800232c:	494a      	ldr	r1, [pc, #296]	; (8002458 <StartOLED_RTC+0x3bc>)
 800232e:	4618      	mov	r0, r3
 8002330:	f00f fbb4 	bl	8011a9c <siprintf>
								sprintf(time_buf_2, "%d", hours);
 8002334:	7d7b      	ldrb	r3, [r7, #21]
 8002336:	461a      	mov	r2, r3
 8002338:	f107 0318 	add.w	r3, r7, #24
 800233c:	4947      	ldr	r1, [pc, #284]	; (800245c <StartOLED_RTC+0x3c0>)
 800233e:	4618      	mov	r0, r3
 8002340:	f00f fbac 	bl	8011a9c <siprintf>
								strcat(time_buf, time_buf_2);
 8002344:	f107 0218 	add.w	r2, r7, #24
 8002348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f00f fbc4 	bl	8011adc <strcat>
								strcat(time, time_buf);
 8002354:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002358:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f00f fbbc 	bl	8011adc <strcat>
								strcat(time, ":");
 8002364:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002368:	4618      	mov	r0, r3
 800236a:	f7fd ff3b 	bl	80001e4 <strlen>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002376:	4413      	add	r3, r2
 8002378:	4939      	ldr	r1, [pc, #228]	; (8002460 <StartOLED_RTC+0x3c4>)
 800237a:	461a      	mov	r2, r3
 800237c:	460b      	mov	r3, r1
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	8013      	strh	r3, [r2, #0]
 8002382:	e025      	b.n	80023d0 <StartOLED_RTC+0x334>
							}
							else
							{
								sprintf(time_buf, "%d", hours);
 8002384:	7d7b      	ldrb	r3, [r7, #21]
 8002386:	461a      	mov	r2, r3
 8002388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238c:	4933      	ldr	r1, [pc, #204]	; (800245c <StartOLED_RTC+0x3c0>)
 800238e:	4618      	mov	r0, r3
 8002390:	f00f fb84 	bl	8011a9c <siprintf>
								strcat(time, time_buf);
 8002394:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002398:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f00f fb9c 	bl	8011adc <strcat>
								strcat(time, ":");
 80023a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fd ff1b 	bl	80001e4 <strlen>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023b6:	4413      	add	r3, r2
 80023b8:	4929      	ldr	r1, [pc, #164]	; (8002460 <StartOLED_RTC+0x3c4>)
 80023ba:	461a      	mov	r2, r3
 80023bc:	460b      	mov	r3, r1
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 80023c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c6:	220a      	movs	r2, #10
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00f fa3a 	bl	8011844 <memset>
							}

							// Print minutes on OLED
							if(minutes < 10)
 80023d0:	7dbb      	ldrb	r3, [r7, #22]
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	d846      	bhi.n	8002464 <StartOLED_RTC+0x3c8>
							{
								memset(time_buf, 0, sizeof(time_buf));
 80023d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023da:	220a      	movs	r2, #10
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f00f fa30 	bl	8011844 <memset>
								sprintf(time_buf, "%c", '0');
 80023e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e8:	2230      	movs	r2, #48	; 0x30
 80023ea:	491b      	ldr	r1, [pc, #108]	; (8002458 <StartOLED_RTC+0x3bc>)
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00f fb55 	bl	8011a9c <siprintf>
								sprintf(time_buf_2, "%d", minutes);
 80023f2:	7dbb      	ldrb	r3, [r7, #22]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f107 0318 	add.w	r3, r7, #24
 80023fa:	4918      	ldr	r1, [pc, #96]	; (800245c <StartOLED_RTC+0x3c0>)
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00f fb4d 	bl	8011a9c <siprintf>
								strcat(time_buf, time_buf_2);
 8002402:	f107 0218 	add.w	r2, r7, #24
 8002406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f00f fb65 	bl	8011adc <strcat>
								strcat(time, time_buf);
 8002412:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f00f fb5d 	bl	8011adc <strcat>
								strcat(time, ":");
 8002422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002426:	4618      	mov	r0, r3
 8002428:	f7fd fedc 	bl	80001e4 <strlen>
 800242c:	4603      	mov	r3, r0
 800242e:	461a      	mov	r2, r3
 8002430:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002434:	4413      	add	r3, r2
 8002436:	490a      	ldr	r1, [pc, #40]	; (8002460 <StartOLED_RTC+0x3c4>)
 8002438:	461a      	mov	r2, r3
 800243a:	460b      	mov	r3, r1
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	8013      	strh	r3, [r2, #0]
 8002440:	e036      	b.n	80024b0 <StartOLED_RTC+0x414>
 8002442:	bf00      	nop
 8002444:	20004c10 	.word	0x20004c10
 8002448:	200000dc 	.word	0x200000dc
 800244c:	080125b8 	.word	0x080125b8
 8002450:	20004b24 	.word	0x20004b24
 8002454:	080125c0 	.word	0x080125c0
 8002458:	080125cc 	.word	0x080125cc
 800245c:	080125d0 	.word	0x080125d0
 8002460:	080125d4 	.word	0x080125d4
							}
							else
							{
								sprintf(time_buf, "%d", minutes);
 8002464:	7dbb      	ldrb	r3, [r7, #22]
 8002466:	461a      	mov	r2, r3
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	49d7      	ldr	r1, [pc, #860]	; (80027cc <StartOLED_RTC+0x730>)
 800246e:	4618      	mov	r0, r3
 8002470:	f00f fb14 	bl	8011a9c <siprintf>
								strcat(time, time_buf);
 8002474:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002478:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f00f fb2c 	bl	8011adc <strcat>
								strcat(time, ":");
 8002484:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002488:	4618      	mov	r0, r3
 800248a:	f7fd feab 	bl	80001e4 <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002496:	4413      	add	r3, r2
 8002498:	49cd      	ldr	r1, [pc, #820]	; (80027d0 <StartOLED_RTC+0x734>)
 800249a:	461a      	mov	r2, r3
 800249c:	460b      	mov	r3, r1
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	8013      	strh	r3, [r2, #0]
								memset(time_buf, 0, sizeof(time_buf));
 80024a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a6:	220a      	movs	r2, #10
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00f f9ca 	bl	8011844 <memset>
							}

							// Print seconds on OLED
							if(seconds == 0)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d103      	bne.n	80024be <StartOLED_RTC+0x422>
							{
								clear();
 80024b6:	f001 fad1 	bl	8003a5c <clear>
								oled_update();
 80024ba:	f001 fd37 	bl	8003f2c <oled_update>
							}
							if(seconds < 10)
 80024be:	7dfb      	ldrb	r3, [r7, #23]
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d826      	bhi.n	8002512 <StartOLED_RTC+0x476>
							{
								memset(time_buf, 0, sizeof(time_buf));
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	220a      	movs	r2, #10
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f00f f9b9 	bl	8011844 <memset>
								sprintf(time_buf, "%c", '0');
 80024d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d6:	2230      	movs	r2, #48	; 0x30
 80024d8:	49be      	ldr	r1, [pc, #760]	; (80027d4 <StartOLED_RTC+0x738>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f00f fade 	bl	8011a9c <siprintf>
								sprintf(time_buf_2, "%d", seconds);
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f107 0318 	add.w	r3, r7, #24
 80024e8:	49b8      	ldr	r1, [pc, #736]	; (80027cc <StartOLED_RTC+0x730>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00f fad6 	bl	8011a9c <siprintf>
								strcat(time_buf, time_buf_2);
 80024f0:	f107 0218 	add.w	r2, r7, #24
 80024f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f00f faee 	bl	8011adc <strcat>
								strcat(time, time_buf);
 8002500:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002504:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f00f fae6 	bl	8011adc <strcat>
 8002510:	e016      	b.n	8002540 <StartOLED_RTC+0x4a4>
							}
							else
							{
								sprintf(time_buf, "%d", seconds);
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	461a      	mov	r2, r3
 8002516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251a:	49ac      	ldr	r1, [pc, #688]	; (80027cc <StartOLED_RTC+0x730>)
 800251c:	4618      	mov	r0, r3
 800251e:	f00f fabd 	bl	8011a9c <siprintf>
								strcat(time, time_buf);
 8002522:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002526:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f00f fad5 	bl	8011adc <strcat>
								memset(time_buf, 0, sizeof(time_buf));
 8002532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002536:	220a      	movs	r2, #10
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f00f f982 	bl	8011844 <memset>
							}

							uint8_t second_line = seconds*2;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
							line_h(5, second_line, 19, 2, add);
 8002548:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 800254c:	2301      	movs	r3, #1
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2302      	movs	r3, #2
 8002552:	2213      	movs	r2, #19
 8002554:	2005      	movs	r0, #5
 8002556:	f001 faa9 	bl	8003aac <line_h>
	//						line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode);
							//invert_rectangle(5, 15, second_line, 5);

							// Print date
							sprintf(time_buf, "%d", date_day);
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	461a      	mov	r2, r3
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	499a      	ldr	r1, [pc, #616]	; (80027cc <StartOLED_RTC+0x730>)
 8002564:	4618      	mov	r0, r3
 8002566:	f00f fa99 	bl	8011a9c <siprintf>
							strcat(date, time_buf);
 800256a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800256e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f00f fab1 	bl	8011adc <strcat>
							strcat(date, ".");
 800257a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd fe30 	bl	80001e4 <strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800258c:	4413      	add	r3, r2
 800258e:	4992      	ldr	r1, [pc, #584]	; (80027d8 <StartOLED_RTC+0x73c>)
 8002590:	461a      	mov	r2, r3
 8002592:	460b      	mov	r3, r1
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 8002598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259c:	220a      	movs	r2, #10
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f00f f94f 	bl	8011844 <memset>

							sprintf(time_buf, "%d", mounth);
 80025a6:	7cbb      	ldrb	r3, [r7, #18]
 80025a8:	461a      	mov	r2, r3
 80025aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ae:	4987      	ldr	r1, [pc, #540]	; (80027cc <StartOLED_RTC+0x730>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f00f fa73 	bl	8011a9c <siprintf>
							strcat(date, time_buf);
 80025b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f00f fa8b 	bl	8011adc <strcat>
							strcat(date, ".");
 80025c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd fe0a 	bl	80001e4 <strlen>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d8:	4413      	add	r3, r2
 80025da:	497f      	ldr	r1, [pc, #508]	; (80027d8 <StartOLED_RTC+0x73c>)
 80025dc:	461a      	mov	r2, r3
 80025de:	460b      	mov	r3, r1
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	8013      	strh	r3, [r2, #0]
							memset(time_buf, 0, sizeof(time_buf));
 80025e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e8:	220a      	movs	r2, #10
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00f f929 	bl	8011844 <memset>

							sprintf(time_buf, "%d", year);
 80025f2:	7c7b      	ldrb	r3, [r7, #17]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fa:	4974      	ldr	r1, [pc, #464]	; (80027cc <StartOLED_RTC+0x730>)
 80025fc:	4618      	mov	r0, r3
 80025fe:	f00f fa4d 	bl	8011a9c <siprintf>
							strcat(date, "20");
 8002602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd fdec 	bl	80001e4 <strlen>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002614:	4413      	add	r3, r2
 8002616:	4a71      	ldr	r2, [pc, #452]	; (80027dc <StartOLED_RTC+0x740>)
 8002618:	8811      	ldrh	r1, [r2, #0]
 800261a:	7892      	ldrb	r2, [r2, #2]
 800261c:	8019      	strh	r1, [r3, #0]
 800261e:	709a      	strb	r2, [r3, #2]
							strcat(date, time_buf);
 8002620:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f00f fa56 	bl	8011adc <strcat>
							memset(time_buf, 0, sizeof(time_buf));
 8002630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002634:	220a      	movs	r2, #10
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f00f f903 	bl	8011844 <memset>

							// day
							switch (day)
 800263e:	7d3b      	ldrb	r3, [r7, #20]
 8002640:	3b01      	subs	r3, #1
 8002642:	2b06      	cmp	r3, #6
 8002644:	f200 8093 	bhi.w	800276e <StartOLED_RTC+0x6d2>
 8002648:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <StartOLED_RTC+0x5b4>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	0800266d 	.word	0x0800266d
 8002654:	0800268f 	.word	0x0800268f
 8002658:	080026b5 	.word	0x080026b5
 800265c:	080026df 	.word	0x080026df
 8002660:	08002705 	.word	0x08002705
 8002664:	08002727 	.word	0x08002727
 8002668:	0800274d 	.word	0x0800274d
							{
								case 1:
									strcat(date, " Monday");
 800266c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002670:	4618      	mov	r0, r3
 8002672:	f7fd fdb7 	bl	80001e4 <strlen>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800267e:	4413      	add	r3, r2
 8002680:	4957      	ldr	r1, [pc, #348]	; (80027e0 <StartOLED_RTC+0x744>)
 8002682:	461a      	mov	r2, r3
 8002684:	460b      	mov	r3, r1
 8002686:	cb03      	ldmia	r3!, {r0, r1}
 8002688:	6010      	str	r0, [r2, #0]
 800268a:	6051      	str	r1, [r2, #4]
									break;
 800268c:	e06f      	b.n	800276e <StartOLED_RTC+0x6d2>
								case 2:
									strcat(date, " Tuesday");
 800268e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fda6 	bl	80001e4 <strlen>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026a0:	4413      	add	r3, r2
 80026a2:	4950      	ldr	r1, [pc, #320]	; (80027e4 <StartOLED_RTC+0x748>)
 80026a4:	461a      	mov	r2, r3
 80026a6:	460b      	mov	r3, r1
 80026a8:	cb03      	ldmia	r3!, {r0, r1}
 80026aa:	6010      	str	r0, [r2, #0]
 80026ac:	6051      	str	r1, [r2, #4]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	7213      	strb	r3, [r2, #8]
									break;
 80026b2:	e05c      	b.n	800276e <StartOLED_RTC+0x6d2>
								case 3:
									strcat(date, " Wednesday");
 80026b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd fd93 	bl	80001e4 <strlen>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026c6:	4413      	add	r3, r2
 80026c8:	4947      	ldr	r1, [pc, #284]	; (80027e8 <StartOLED_RTC+0x74c>)
 80026ca:	461a      	mov	r2, r3
 80026cc:	460b      	mov	r3, r1
 80026ce:	cb03      	ldmia	r3!, {r0, r1}
 80026d0:	6010      	str	r0, [r2, #0]
 80026d2:	6051      	str	r1, [r2, #4]
 80026d4:	8819      	ldrh	r1, [r3, #0]
 80026d6:	789b      	ldrb	r3, [r3, #2]
 80026d8:	8111      	strh	r1, [r2, #8]
 80026da:	7293      	strb	r3, [r2, #10]
									break;
 80026dc:	e047      	b.n	800276e <StartOLED_RTC+0x6d2>
								case 4:
									strcat(date, " Thursday");
 80026de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd fd7e 	bl	80001e4 <strlen>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026f0:	4413      	add	r3, r2
 80026f2:	493e      	ldr	r1, [pc, #248]	; (80027ec <StartOLED_RTC+0x750>)
 80026f4:	461a      	mov	r2, r3
 80026f6:	460b      	mov	r3, r1
 80026f8:	cb03      	ldmia	r3!, {r0, r1}
 80026fa:	6010      	str	r0, [r2, #0]
 80026fc:	6051      	str	r1, [r2, #4]
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	8113      	strh	r3, [r2, #8]
									break;
 8002702:	e034      	b.n	800276e <StartOLED_RTC+0x6d2>
								case 5:
									strcat(date, " Friday");
 8002704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fd6b 	bl	80001e4 <strlen>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002716:	4413      	add	r3, r2
 8002718:	4935      	ldr	r1, [pc, #212]	; (80027f0 <StartOLED_RTC+0x754>)
 800271a:	461a      	mov	r2, r3
 800271c:	460b      	mov	r3, r1
 800271e:	cb03      	ldmia	r3!, {r0, r1}
 8002720:	6010      	str	r0, [r2, #0]
 8002722:	6051      	str	r1, [r2, #4]
									break;
 8002724:	e023      	b.n	800276e <StartOLED_RTC+0x6d2>
								case 6:
									strcat(date, " Saturday");
 8002726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fd5a 	bl	80001e4 <strlen>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002738:	4413      	add	r3, r2
 800273a:	492e      	ldr	r1, [pc, #184]	; (80027f4 <StartOLED_RTC+0x758>)
 800273c:	461a      	mov	r2, r3
 800273e:	460b      	mov	r3, r1
 8002740:	cb03      	ldmia	r3!, {r0, r1}
 8002742:	6010      	str	r0, [r2, #0]
 8002744:	6051      	str	r1, [r2, #4]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	8113      	strh	r3, [r2, #8]
									break;
 800274a:	e010      	b.n	800276e <StartOLED_RTC+0x6d2>
								case 7:
									strcat(date, " Sunday");
 800274c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fd47 	bl	80001e4 <strlen>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800275e:	4413      	add	r3, r2
 8002760:	4925      	ldr	r1, [pc, #148]	; (80027f8 <StartOLED_RTC+0x75c>)
 8002762:	461a      	mov	r2, r3
 8002764:	460b      	mov	r3, r1
 8002766:	cb03      	ldmia	r3!, {r0, r1}
 8002768:	6010      	str	r0, [r2, #0]
 800276a:	6051      	str	r1, [r2, #4]
									break;
 800276c:	bf00      	nop
							}

							graphics_text(40, 0, 3, time);
 800276e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002772:	2203      	movs	r2, #3
 8002774:	2100      	movs	r1, #0
 8002776:	2028      	movs	r0, #40	; 0x28
 8002778:	f001 fb24 	bl	8003dc4 <graphics_text>
							graphics_text(0, 24, 2, date);
 800277c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002780:	2202      	movs	r2, #2
 8002782:	2118      	movs	r1, #24
 8002784:	2000      	movs	r0, #0
 8002786:	f001 fb1d 	bl	8003dc4 <graphics_text>
							oled_update();
 800278a:	f001 fbcf 	bl	8003f2c <oled_update>

							osDelay(1000);
 800278e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002792:	f00b fbc1 	bl	800df18 <osDelay>
					while(klick == 0)
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <StartOLED_RTC+0x760>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f43f ad0b 	beq.w	80021b6 <StartOLED_RTC+0x11a>
						}
					}
			  		break;
 80027a0:	f000 bccd 	b.w	800313e <StartOLED_RTC+0x10a2>


				case 1:
					// Set yer
					graphics_text(0, 0, 1, "   SET:");
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <StartOLED_RTC+0x764>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	2100      	movs	r1, #0
 80027aa:	2000      	movs	r0, #0
 80027ac:	f001 fb0a 	bl	8003dc4 <graphics_text>
					graphics_text(0, 8, 1, "YEAR   ");
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <StartOLED_RTC+0x768>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	2108      	movs	r1, #8
 80027b6:	2000      	movs	r0, #0
 80027b8:	f001 fb04 	bl	8003dc4 <graphics_text>
					oled_update();
 80027bc:	f001 fbb6 	bl	8003f2c <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);								// Start count encoder from 0
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <StartOLED_RTC+0x76c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 1)
 80027c8:	e071      	b.n	80028ae <StartOLED_RTC+0x812>
 80027ca:	bf00      	nop
 80027cc:	080125d0 	.word	0x080125d0
 80027d0:	080125d4 	.word	0x080125d4
 80027d4:	080125cc 	.word	0x080125cc
 80027d8:	080125d8 	.word	0x080125d8
 80027dc:	080125dc 	.word	0x080125dc
 80027e0:	080125e0 	.word	0x080125e0
 80027e4:	080125e8 	.word	0x080125e8
 80027e8:	080125f4 	.word	0x080125f4
 80027ec:	08012600 	.word	0x08012600
 80027f0:	0801260c 	.word	0x0801260c
 80027f4:	08012614 	.word	0x08012614
 80027f8:	08012620 	.word	0x08012620
 80027fc:	200000dc 	.word	0x200000dc
 8002800:	08012628 	.word	0x08012628
 8002804:	08012630 	.word	0x08012630
 8002808:	20004c10 	.word	0x20004c10
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800280c:	4b99      	ldr	r3, [pc, #612]	; (8002a74 <StartOLED_RTC+0x9d8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	461a      	mov	r2, r3
 8002814:	4b98      	ldr	r3, [pc, #608]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002816:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002818:	4b97      	ldr	r3, [pc, #604]	; (8002a78 <StartOLED_RTC+0x9dc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3b01      	subs	r3, #1
 800281e:	b29b      	uxth	r3, r3
 8002820:	0fda      	lsrs	r2, r3, #31
 8002822:	4413      	add	r3, r2
 8002824:	105b      	asrs	r3, r3, #1
 8002826:	425b      	negs	r3, r3
 8002828:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800282c:	337f      	adds	r3, #127	; 0x7f
 800282e:	4a92      	ldr	r2, [pc, #584]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002830:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002832:	4b91      	ldr	r3, [pc, #580]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d038      	beq.n	80028ae <StartOLED_RTC+0x812>
						{
							prevCounter = currCounter;
 800283c:	4b8e      	ldr	r3, [pc, #568]	; (8002a78 <StartOLED_RTC+0x9dc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
							if(currCounter > 100)									// Encoder count from 0 to 100
 8002842:	4b8d      	ldr	r3, [pc, #564]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	dd06      	ble.n	8002858 <StartOLED_RTC+0x7bc>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 800284a:	4b8a      	ldr	r3, [pc, #552]	; (8002a74 <StartOLED_RTC+0x9d8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002852:	4b89      	ldr	r3, [pc, #548]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8002858:	4b87      	ldr	r3, [pc, #540]	; (8002a78 <StartOLED_RTC+0x9dc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	da06      	bge.n	800286e <StartOLED_RTC+0x7d2>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002860:	4b84      	ldr	r3, [pc, #528]	; (8002a74 <StartOLED_RTC+0x9d8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2200      	movs	r2, #0
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002868:	4b83      	ldr	r3, [pc, #524]	; (8002a78 <StartOLED_RTC+0x9dc>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 800286e:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <StartOLED_RTC+0x9e0>)
 8002870:	2201      	movs	r2, #1
 8002872:	2110      	movs	r1, #16
 8002874:	2000      	movs	r0, #0
 8002876:	f001 faa5 	bl	8003dc4 <graphics_text>
							oled_update();
 800287a:	f001 fb57 	bl	8003f2c <oled_update>

							sprintf(time_buf, "%d", currCounter);
 800287e:	4b7e      	ldr	r3, [pc, #504]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002886:	497e      	ldr	r1, [pc, #504]	; (8002a80 <StartOLED_RTC+0x9e4>)
 8002888:	4618      	mov	r0, r3
 800288a:	f00f f907 	bl	8011a9c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 800288e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002892:	2201      	movs	r2, #1
 8002894:	2110      	movs	r1, #16
 8002896:	2000      	movs	r0, #0
 8002898:	f001 fa94 	bl	8003dc4 <graphics_text>
							oled_update();
 800289c:	f001 fb46 	bl	8003f2c <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 80028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a4:	220a      	movs	r2, #10
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f00e ffcb 	bl	8011844 <memset>
					while(klick == 1)
 80028ae:	4b75      	ldr	r3, [pc, #468]	; (8002a84 <StartOLED_RTC+0x9e8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d0aa      	beq.n	800280c <StartOLED_RTC+0x770>
						}
					}
					if(klick == 2)
 80028b6:	4b73      	ldr	r3, [pc, #460]	; (8002a84 <StartOLED_RTC+0x9e8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	f040 842f 	bne.w	800311e <StartOLED_RTC+0x1082>
					{
						// write data
						ds3231_set(DS3231_REGISTER_YEAR_DEFAULT, &prevCounter);
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	4619      	mov	r1, r3
 80028c6:	2006      	movs	r0, #6
 80028c8:	f7fd ffb6 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 80028cc:	4b6e      	ldr	r3, [pc, #440]	; (8002a88 <StartOLED_RTC+0x9ec>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	2110      	movs	r1, #16
 80028d2:	2000      	movs	r0, #0
 80028d4:	f001 fa76 	bl	8003dc4 <graphics_text>
						oled_update();
 80028d8:	f001 fb28 	bl	8003f2c <oled_update>

						graphics_text(0, 16, 1, "installed");
 80028dc:	4b6b      	ldr	r3, [pc, #428]	; (8002a8c <StartOLED_RTC+0x9f0>)
 80028de:	2201      	movs	r2, #1
 80028e0:	2110      	movs	r1, #16
 80028e2:	2000      	movs	r0, #0
 80028e4:	f001 fa6e 	bl	8003dc4 <graphics_text>
						oled_update();
 80028e8:	f001 fb20 	bl	8003f2c <oled_update>

						osDelay(800);
 80028ec:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028f0:	f00b fb12 	bl	800df18 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 80028f4:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <StartOLED_RTC+0x9ec>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	2110      	movs	r1, #16
 80028fa:	2000      	movs	r0, #0
 80028fc:	f001 fa62 	bl	8003dc4 <graphics_text>
						oled_update();
 8002900:	f001 fb14 	bl	8003f2c <oled_update>

						klick = 3;
 8002904:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <StartOLED_RTC+0x9e8>)
 8002906:	2203      	movs	r2, #3
 8002908:	601a      	str	r2, [r3, #0]
					}
					break;
 800290a:	f000 bc08 	b.w	800311e <StartOLED_RTC+0x1082>

				case 3:
					// set month
					graphics_text(0, 8, 1, "MONTH");
 800290e:	4b60      	ldr	r3, [pc, #384]	; (8002a90 <StartOLED_RTC+0x9f4>)
 8002910:	2201      	movs	r2, #1
 8002912:	2108      	movs	r1, #8
 8002914:	2000      	movs	r0, #0
 8002916:	f001 fa55 	bl	8003dc4 <graphics_text>
					oled_update();
 800291a:	f001 fb07 	bl	8003f2c <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 800291e:	4b55      	ldr	r3, [pc, #340]	; (8002a74 <StartOLED_RTC+0x9d8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
					currCounter = 1;
 8002926:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

					while(klick == 3)
 800292c:	e050      	b.n	80029d0 <StartOLED_RTC+0x934>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800292e:	4b51      	ldr	r3, [pc, #324]	; (8002a74 <StartOLED_RTC+0x9d8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	461a      	mov	r2, r3
 8002936:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002938:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 800293a:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <StartOLED_RTC+0x9dc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3b01      	subs	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	0fda      	lsrs	r2, r3, #31
 8002944:	4413      	add	r3, r2
 8002946:	105b      	asrs	r3, r3, #1
 8002948:	425b      	negs	r3, r3
 800294a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800294e:	337f      	adds	r3, #127	; 0x7f
 8002950:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002952:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002954:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	429a      	cmp	r2, r3
 800295c:	d038      	beq.n	80029d0 <StartOLED_RTC+0x934>
						{
							prevCounter = currCounter;
 800295e:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

							if(currCounter > 12)
 8002964:	4b44      	ldr	r3, [pc, #272]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	dd06      	ble.n	800297a <StartOLED_RTC+0x8de>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <StartOLED_RTC+0x9d8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2201      	movs	r2, #1
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002974:	4b40      	ldr	r3, [pc, #256]	; (8002a78 <StartOLED_RTC+0x9dc>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]
							}

							if(currCounter < 1)
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <StartOLED_RTC+0x9dc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	dc06      	bgt.n	8002990 <StartOLED_RTC+0x8f4>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002982:	4b3c      	ldr	r3, [pc, #240]	; (8002a74 <StartOLED_RTC+0x9d8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2201      	movs	r2, #1
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 800298a:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <StartOLED_RTC+0x9dc>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]
							}


							graphics_text(0, 16, 1, "           ");
 8002990:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <StartOLED_RTC+0x9e0>)
 8002992:	2201      	movs	r2, #1
 8002994:	2110      	movs	r1, #16
 8002996:	2000      	movs	r0, #0
 8002998:	f001 fa14 	bl	8003dc4 <graphics_text>
							oled_update();
 800299c:	f001 fac6 	bl	8003f2c <oled_update>

							sprintf(time_buf, "%d", currCounter);
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <StartOLED_RTC+0x9dc>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a8:	4935      	ldr	r1, [pc, #212]	; (8002a80 <StartOLED_RTC+0x9e4>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f00f f876 	bl	8011a9c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	2201      	movs	r2, #1
 80029b6:	2110      	movs	r1, #16
 80029b8:	2000      	movs	r0, #0
 80029ba:	f001 fa03 	bl	8003dc4 <graphics_text>
							oled_update();
 80029be:	f001 fab5 	bl	8003f2c <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 80029c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c6:	220a      	movs	r2, #10
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f00e ff3a 	bl	8011844 <memset>
					while(klick == 3)
 80029d0:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <StartOLED_RTC+0x9e8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d0aa      	beq.n	800292e <StartOLED_RTC+0x892>

						}
					}
					if(klick == 4)
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <StartOLED_RTC+0x9e8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	f040 83a1 	bne.w	8003124 <StartOLED_RTC+0x1088>
					{
						if((currCounter < 1) || (currCounter > 12))
 80029e2:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <StartOLED_RTC+0x9dc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	dd03      	ble.n	80029f2 <StartOLED_RTC+0x956>
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <StartOLED_RTC+0x9dc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	dd05      	ble.n	80029fe <StartOLED_RTC+0x962>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <StartOLED_RTC+0x9d8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2201      	movs	r2, #1
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_MONTH_DEFAULT, &prevCounter);
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	4619      	mov	r1, r3
 8002a04:	2005      	movs	r0, #5
 8002a06:	f7fd ff17 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <StartOLED_RTC+0x9ec>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2110      	movs	r1, #16
 8002a10:	2000      	movs	r0, #0
 8002a12:	f001 f9d7 	bl	8003dc4 <graphics_text>
						oled_update();
 8002a16:	f001 fa89 	bl	8003f2c <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <StartOLED_RTC+0x9f0>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2110      	movs	r1, #16
 8002a20:	2000      	movs	r0, #0
 8002a22:	f001 f9cf 	bl	8003dc4 <graphics_text>
						oled_update();
 8002a26:	f001 fa81 	bl	8003f2c <oled_update>

						osDelay(800);
 8002a2a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002a2e:	f00b fa73 	bl	800df18 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <StartOLED_RTC+0x9ec>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	2110      	movs	r1, #16
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f001 f9c3 	bl	8003dc4 <graphics_text>
						oled_update();
 8002a3e:	f001 fa75 	bl	8003f2c <oled_update>

						klick = 5;
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <StartOLED_RTC+0x9e8>)
 8002a44:	2205      	movs	r2, #5
 8002a46:	601a      	str	r2, [r3, #0]
					}

					break;
 8002a48:	e36c      	b.n	8003124 <StartOLED_RTC+0x1088>

				case 5:
					// Set date

					graphics_text(0, 8, 1, "              ");
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <StartOLED_RTC+0x9f8>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2108      	movs	r1, #8
 8002a50:	2000      	movs	r0, #0
 8002a52:	f001 f9b7 	bl	8003dc4 <graphics_text>
					oled_update();
 8002a56:	f001 fa69 	bl	8003f2c <oled_update>
					graphics_text(0, 8, 1, "DATE");
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <StartOLED_RTC+0x9fc>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2108      	movs	r1, #8
 8002a60:	2000      	movs	r0, #0
 8002a62:	f001 f9af 	bl	8003dc4 <graphics_text>
					oled_update();
 8002a66:	f001 fa61 	bl	8003f2c <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);								// Start count encoder from 1
 8002a6a:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <StartOLED_RTC+0x9d8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 5)
 8002a72:	e064      	b.n	8002b3e <StartOLED_RTC+0xaa2>
 8002a74:	20004c10 	.word	0x20004c10
 8002a78:	200000d8 	.word	0x200000d8
 8002a7c:	08012638 	.word	0x08012638
 8002a80:	080125d0 	.word	0x080125d0
 8002a84:	200000dc 	.word	0x200000dc
 8002a88:	08012644 	.word	0x08012644
 8002a8c:	08012658 	.word	0x08012658
 8002a90:	08012664 	.word	0x08012664
 8002a94:	0801266c 	.word	0x0801266c
 8002a98:	0801267c 	.word	0x0801267c
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002a9c:	4ba2      	ldr	r3, [pc, #648]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4ba1      	ldr	r3, [pc, #644]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002aa6:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002aa8:	4ba0      	ldr	r3, [pc, #640]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	0fda      	lsrs	r2, r3, #31
 8002ab2:	4413      	add	r3, r2
 8002ab4:	105b      	asrs	r3, r3, #1
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002abc:	337f      	adds	r3, #127	; 0x7f
 8002abe:	4a9b      	ldr	r2, [pc, #620]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002ac0:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002ac2:	4b9a      	ldr	r3, [pc, #616]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d038      	beq.n	8002b3e <StartOLED_RTC+0xaa2>
						{
							prevCounter = currCounter;
 8002acc:	4b97      	ldr	r3, [pc, #604]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]

							if(currCounter > 31)
 8002ad2:	4b96      	ldr	r3, [pc, #600]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b1f      	cmp	r3, #31
 8002ad8:	dd06      	ble.n	8002ae8 <StartOLED_RTC+0xa4c>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002ada:	4b93      	ldr	r3, [pc, #588]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002ae2:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 8002ae8:	4b90      	ldr	r3, [pc, #576]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	dc06      	bgt.n	8002afe <StartOLED_RTC+0xa62>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);					// Encoder count from 1 to 32
 8002af0:	4b8d      	ldr	r3, [pc, #564]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2201      	movs	r2, #1
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002af8:	4b8c      	ldr	r3, [pc, #560]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002afe:	4b8c      	ldr	r3, [pc, #560]	; (8002d30 <StartOLED_RTC+0xc94>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	2110      	movs	r1, #16
 8002b04:	2000      	movs	r0, #0
 8002b06:	f001 f95d 	bl	8003dc4 <graphics_text>
							oled_update();
 8002b0a:	f001 fa0f 	bl	8003f2c <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002b0e:	4b87      	ldr	r3, [pc, #540]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b16:	4987      	ldr	r1, [pc, #540]	; (8002d34 <StartOLED_RTC+0xc98>)
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f00e ffbf 	bl	8011a9c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b22:	2201      	movs	r2, #1
 8002b24:	2110      	movs	r1, #16
 8002b26:	2000      	movs	r0, #0
 8002b28:	f001 f94c 	bl	8003dc4 <graphics_text>
							oled_update();
 8002b2c:	f001 f9fe 	bl	8003f2c <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b34:	220a      	movs	r2, #10
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f00e fe83 	bl	8011844 <memset>
					while(klick == 5)
 8002b3e:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <StartOLED_RTC+0xc9c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	d0aa      	beq.n	8002a9c <StartOLED_RTC+0xa00>

						}
					}
					if(klick == 6)
 8002b46:	4b7c      	ldr	r3, [pc, #496]	; (8002d38 <StartOLED_RTC+0xc9c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	f040 82ed 	bne.w	800312a <StartOLED_RTC+0x108e>
					{
						if((currCounter < 1) || (currCounter > 32))
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	dd03      	ble.n	8002b60 <StartOLED_RTC+0xac4>
 8002b58:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	dd05      	ble.n	8002b6c <StartOLED_RTC+0xad0>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002b60:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DATE_DEFAULT, &prevCounter);
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	4619      	mov	r1, r3
 8002b72:	2004      	movs	r0, #4
 8002b74:	f7fd fe60 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002b78:	4b70      	ldr	r3, [pc, #448]	; (8002d3c <StartOLED_RTC+0xca0>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	2110      	movs	r1, #16
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f001 f920 	bl	8003dc4 <graphics_text>
						oled_update();
 8002b84:	f001 f9d2 	bl	8003f2c <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002b88:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <StartOLED_RTC+0xca4>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	2110      	movs	r1, #16
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f001 f918 	bl	8003dc4 <graphics_text>
						oled_update();
 8002b94:	f001 f9ca 	bl	8003f2c <oled_update>

						osDelay(800);
 8002b98:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002b9c:	f00b f9bc 	bl	800df18 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002ba0:	4b66      	ldr	r3, [pc, #408]	; (8002d3c <StartOLED_RTC+0xca0>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f001 f90c 	bl	8003dc4 <graphics_text>
						oled_update();
 8002bac:	f001 f9be 	bl	8003f2c <oled_update>

						klick = 7;
 8002bb0:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <StartOLED_RTC+0xc9c>)
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	601a      	str	r2, [r3, #0]
					}

					break;
 8002bb6:	e2b8      	b.n	800312a <StartOLED_RTC+0x108e>

				case 7:
					// Set day of week

					graphics_text(0, 8, 1, "              ");
 8002bb8:	4b62      	ldr	r3, [pc, #392]	; (8002d44 <StartOLED_RTC+0xca8>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2108      	movs	r1, #8
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f001 f900 	bl	8003dc4 <graphics_text>
					oled_update();
 8002bc4:	f001 f9b2 	bl	8003f2c <oled_update>
					graphics_text(0, 8, 1, "DAY");
 8002bc8:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <StartOLED_RTC+0xcac>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	2108      	movs	r1, #8
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f001 f8f8 	bl	8003dc4 <graphics_text>
					oled_update();
 8002bd4:	f001 f9aa 	bl	8003f2c <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 7)
 8002be0:	e050      	b.n	8002c84 <StartOLED_RTC+0xbe8>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002be2:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002bec:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002bee:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	0fda      	lsrs	r2, r3, #31
 8002bf8:	4413      	add	r3, r2
 8002bfa:	105b      	asrs	r3, r3, #1
 8002bfc:	425b      	negs	r3, r3
 8002bfe:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002c02:	337f      	adds	r3, #127	; 0x7f
 8002c04:	4a49      	ldr	r2, [pc, #292]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c06:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d038      	beq.n	8002c84 <StartOLED_RTC+0xbe8>
						{
							prevCounter = currCounter;
 8002c12:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]
							if(currCounter > 7)
 8002c18:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b07      	cmp	r3, #7
 8002c1e:	dd06      	ble.n	8002c2e <StartOLED_RTC+0xb92>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002c20:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2201      	movs	r2, #1
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002c28:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 1)
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	dc06      	bgt.n	8002c44 <StartOLED_RTC+0xba8>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002c36:	4b3c      	ldr	r3, [pc, #240]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 1;
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002c44:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <StartOLED_RTC+0xc94>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	2110      	movs	r1, #16
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f001 f8ba 	bl	8003dc4 <graphics_text>
							oled_update();
 8002c50:	f001 f96c 	bl	8003f2c <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002c54:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	4935      	ldr	r1, [pc, #212]	; (8002d34 <StartOLED_RTC+0xc98>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f00e ff1c 	bl	8011a9c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c68:	2201      	movs	r2, #1
 8002c6a:	2110      	movs	r1, #16
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f001 f8a9 	bl	8003dc4 <graphics_text>
							oled_update();
 8002c72:	f001 f95b 	bl	8003f2c <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c7a:	220a      	movs	r2, #10
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f00e fde0 	bl	8011844 <memset>
					while(klick == 7)
 8002c84:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <StartOLED_RTC+0xc9c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b07      	cmp	r3, #7
 8002c8a:	d0aa      	beq.n	8002be2 <StartOLED_RTC+0xb46>

						}
					}
					if(klick == 8)
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <StartOLED_RTC+0xc9c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	f040 824d 	bne.w	8003130 <StartOLED_RTC+0x1094>
					{
						if((currCounter < 1) || (currCounter > 7))
 8002c96:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	dd03      	ble.n	8002ca6 <StartOLED_RTC+0xc0a>
 8002c9e:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <StartOLED_RTC+0xc90>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b07      	cmp	r3, #7
 8002ca4:	dd05      	ble.n	8002cb2 <StartOLED_RTC+0xc16>
						{
							__HAL_TIM_SET_COUNTER(&htim1, 1);
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2201      	movs	r2, #1
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24
							prevCounter = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
						}

						// write data
						ds3231_set(DS3231_REGISTER_DAY_OF_WEEK_DEFAULT, &prevCounter);
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f7fd fdbd 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <StartOLED_RTC+0xca0>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f001 f87d 	bl	8003dc4 <graphics_text>
						oled_update();
 8002cca:	f001 f92f 	bl	8003f2c <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <StartOLED_RTC+0xca4>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2110      	movs	r1, #16
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f001 f875 	bl	8003dc4 <graphics_text>
						oled_update();
 8002cda:	f001 f927 	bl	8003f2c <oled_update>

						osDelay(800);
 8002cde:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002ce2:	f00b f919 	bl	800df18 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <StartOLED_RTC+0xca0>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2110      	movs	r1, #16
 8002cec:	2000      	movs	r0, #0
 8002cee:	f001 f869 	bl	8003dc4 <graphics_text>
						oled_update();
 8002cf2:	f001 f91b 	bl	8003f2c <oled_update>

						klick = 9;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <StartOLED_RTC+0xc9c>)
 8002cf8:	2209      	movs	r2, #9
 8002cfa:	601a      	str	r2, [r3, #0]
					}
					break;
 8002cfc:	e218      	b.n	8003130 <StartOLED_RTC+0x1094>

				case 9:
					// Set hour

					graphics_text(0, 8, 1, "              ");
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <StartOLED_RTC+0xca8>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	2108      	movs	r1, #8
 8002d04:	2000      	movs	r0, #0
 8002d06:	f001 f85d 	bl	8003dc4 <graphics_text>
					oled_update();
 8002d0a:	f001 f90f 	bl	8003f2c <oled_update>
					graphics_text(0, 8, 1, "HOUR");
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <StartOLED_RTC+0xcb0>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	2108      	movs	r1, #8
 8002d14:	2000      	movs	r0, #0
 8002d16:	f001 f855 	bl	8003dc4 <graphics_text>
					oled_update();
 8002d1a:	f001 f907 	bl	8003f2c <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002d1e:	4b02      	ldr	r3, [pc, #8]	; (8002d28 <StartOLED_RTC+0xc8c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 9)
 8002d26:	e08d      	b.n	8002e44 <StartOLED_RTC+0xda8>
 8002d28:	20004c10 	.word	0x20004c10
 8002d2c:	200000d8 	.word	0x200000d8
 8002d30:	08012638 	.word	0x08012638
 8002d34:	080125d0 	.word	0x080125d0
 8002d38:	200000dc 	.word	0x200000dc
 8002d3c:	08012644 	.word	0x08012644
 8002d40:	08012658 	.word	0x08012658
 8002d44:	0801266c 	.word	0x0801266c
 8002d48:	08012684 	.word	0x08012684
 8002d4c:	08012688 	.word	0x08012688
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002d50:	4b93      	ldr	r3, [pc, #588]	; (8002fa0 <StartOLED_RTC+0xf04>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b92      	ldr	r3, [pc, #584]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002d5a:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002d5c:	4b91      	ldr	r3, [pc, #580]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	0fda      	lsrs	r2, r3, #31
 8002d66:	4413      	add	r3, r2
 8002d68:	105b      	asrs	r3, r3, #1
 8002d6a:	425b      	negs	r3, r3
 8002d6c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002d70:	337f      	adds	r3, #127	; 0x7f
 8002d72:	4a8c      	ldr	r2, [pc, #560]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002d74:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d038      	beq.n	8002df2 <StartOLED_RTC+0xd56>
						{
							prevCounter = currCounter;
 8002d80:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
							if(currCounter > 23)
 8002d86:	4b87      	ldr	r3, [pc, #540]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b17      	cmp	r3, #23
 8002d8c:	dd06      	ble.n	8002d9c <StartOLED_RTC+0xd00>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002d8e:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <StartOLED_RTC+0xf04>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002d96:	4b83      	ldr	r3, [pc, #524]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8002d9c:	4b81      	ldr	r3, [pc, #516]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	da06      	bge.n	8002db2 <StartOLED_RTC+0xd16>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002da4:	4b7e      	ldr	r3, [pc, #504]	; (8002fa0 <StartOLED_RTC+0xf04>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2200      	movs	r2, #0
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8002dac:	4b7d      	ldr	r3, [pc, #500]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
							}

							graphics_text(0, 16, 1, "           ");
 8002db2:	4b7d      	ldr	r3, [pc, #500]	; (8002fa8 <StartOLED_RTC+0xf0c>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	2110      	movs	r1, #16
 8002db8:	2000      	movs	r0, #0
 8002dba:	f001 f803 	bl	8003dc4 <graphics_text>
							oled_update();
 8002dbe:	f001 f8b5 	bl	8003f2c <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002dc2:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dca:	4978      	ldr	r1, [pc, #480]	; (8002fac <StartOLED_RTC+0xf10>)
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00e fe65 	bl	8011a9c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	2110      	movs	r1, #16
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f000 fff2 	bl	8003dc4 <graphics_text>
							oled_update();
 8002de0:	f001 f8a4 	bl	8003f2c <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de8:	220a      	movs	r2, #10
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f00e fd29 	bl	8011844 <memset>
						}

						if(klick == 10)
 8002df2:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <StartOLED_RTC+0xf14>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b0a      	cmp	r3, #10
 8002df8:	d124      	bne.n	8002e44 <StartOLED_RTC+0xda8>
						{
							// write data
							ds3231_set(DS3231_REGISTER_HOURS_DEFAULT, &prevCounter);
 8002dfa:	f107 030c 	add.w	r3, r7, #12
 8002dfe:	4619      	mov	r1, r3
 8002e00:	2002      	movs	r0, #2
 8002e02:	f7fd fd19 	bl	8000838 <ds3231_set>

							graphics_text(0, 16, 1, "                 ");
 8002e06:	4b6b      	ldr	r3, [pc, #428]	; (8002fb4 <StartOLED_RTC+0xf18>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2110      	movs	r1, #16
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f000 ffd9 	bl	8003dc4 <graphics_text>
							oled_update();
 8002e12:	f001 f88b 	bl	8003f2c <oled_update>

							graphics_text(0, 16, 1, "installed");
 8002e16:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <StartOLED_RTC+0xf1c>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f000 ffd1 	bl	8003dc4 <graphics_text>
							oled_update();
 8002e22:	f001 f883 	bl	8003f2c <oled_update>

							osDelay(800);
 8002e26:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002e2a:	f00b f875 	bl	800df18 <osDelay>

							graphics_text(0, 16, 1, "                 ");
 8002e2e:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <StartOLED_RTC+0xf18>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	2110      	movs	r1, #16
 8002e34:	2000      	movs	r0, #0
 8002e36:	f000 ffc5 	bl	8003dc4 <graphics_text>
							oled_update();
 8002e3a:	f001 f877 	bl	8003f2c <oled_update>

							klick = 11;
 8002e3e:	4b5c      	ldr	r3, [pc, #368]	; (8002fb0 <StartOLED_RTC+0xf14>)
 8002e40:	220b      	movs	r2, #11
 8002e42:	601a      	str	r2, [r3, #0]
					while(klick == 9)
 8002e44:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <StartOLED_RTC+0xf14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d081      	beq.n	8002d50 <StartOLED_RTC+0xcb4>
						}
					}
					break;
 8002e4c:	e177      	b.n	800313e <StartOLED_RTC+0x10a2>

				case 11:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 8002e4e:	4b5b      	ldr	r3, [pc, #364]	; (8002fbc <StartOLED_RTC+0xf20>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	2108      	movs	r1, #8
 8002e54:	2000      	movs	r0, #0
 8002e56:	f000 ffb5 	bl	8003dc4 <graphics_text>
					oled_update();
 8002e5a:	f001 f867 	bl	8003f2c <oled_update>
					graphics_text(0, 8, 1, "MINUTES");
 8002e5e:	4b58      	ldr	r3, [pc, #352]	; (8002fc0 <StartOLED_RTC+0xf24>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	2108      	movs	r1, #8
 8002e64:	2000      	movs	r0, #0
 8002e66:	f000 ffad 	bl	8003dc4 <graphics_text>
					oled_update();
 8002e6a:	f001 f85f 	bl	8003f2c <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <StartOLED_RTC+0xf04>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 11)
 8002e76:	e04e      	b.n	8002f16 <StartOLED_RTC+0xe7a>
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <StartOLED_RTC+0xf04>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b48      	ldr	r3, [pc, #288]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002e82:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002e84:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	0fda      	lsrs	r2, r3, #31
 8002e8e:	4413      	add	r3, r2
 8002e90:	105b      	asrs	r3, r3, #1
 8002e92:	425b      	negs	r3, r3
 8002e94:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002e98:	337f      	adds	r3, #127	; 0x7f
 8002e9a:	4a42      	ldr	r2, [pc, #264]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002e9c:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d036      	beq.n	8002f16 <StartOLED_RTC+0xe7a>
						{
							prevCounter = currCounter;
 8002ea8:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b3b      	cmp	r3, #59	; 0x3b
 8002eb4:	dd05      	ble.n	8002ec2 <StartOLED_RTC+0xe26>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <StartOLED_RTC+0xf04>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
							}
							if(currCounter < 0)
 8002ec2:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	da05      	bge.n	8002ed6 <StartOLED_RTC+0xe3a>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002eca:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <StartOLED_RTC+0xf04>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
								prevCounter = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
							}

							graphics_text(0, 16, 1, "           ");
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <StartOLED_RTC+0xf0c>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2110      	movs	r1, #16
 8002edc:	2000      	movs	r0, #0
 8002ede:	f000 ff71 	bl	8003dc4 <graphics_text>
							oled_update();
 8002ee2:	f001 f823 	bl	8003f2c <oled_update>

							sprintf(time_buf, "%d", currCounter);
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <StartOLED_RTC+0xf08>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	492f      	ldr	r1, [pc, #188]	; (8002fac <StartOLED_RTC+0xf10>)
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f00e fdd3 	bl	8011a9c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 8002ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efa:	2201      	movs	r2, #1
 8002efc:	2110      	movs	r1, #16
 8002efe:	2000      	movs	r0, #0
 8002f00:	f000 ff60 	bl	8003dc4 <graphics_text>
							oled_update();
 8002f04:	f001 f812 	bl	8003f2c <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 8002f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f00e fc97 	bl	8011844 <memset>
					while(klick == 11)
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <StartOLED_RTC+0xf14>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b0b      	cmp	r3, #11
 8002f1c:	d0ac      	beq.n	8002e78 <StartOLED_RTC+0xddc>
						}
					}
					if(klick == 12)
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <StartOLED_RTC+0xf14>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	f040 8107 	bne.w	8003136 <StartOLED_RTC+0x109a>
					{
						// write data
						ds3231_set(DS3231_REGISTER_MINUTES_DEFAULT, &prevCounter);
 8002f28:	f107 030c 	add.w	r3, r7, #12
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f7fd fc82 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <StartOLED_RTC+0xf18>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	2110      	movs	r1, #16
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f000 ff42 	bl	8003dc4 <graphics_text>
						oled_update();
 8002f40:	f000 fff4 	bl	8003f2c <oled_update>

						graphics_text(0, 16, 1, "installed");
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <StartOLED_RTC+0xf1c>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	2110      	movs	r1, #16
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f000 ff3a 	bl	8003dc4 <graphics_text>
						oled_update();
 8002f50:	f000 ffec 	bl	8003f2c <oled_update>

						osDelay(800);
 8002f54:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002f58:	f00a ffde 	bl	800df18 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <StartOLED_RTC+0xf18>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	2110      	movs	r1, #16
 8002f62:	2000      	movs	r0, #0
 8002f64:	f000 ff2e 	bl	8003dc4 <graphics_text>
						oled_update();
 8002f68:	f000 ffe0 	bl	8003f2c <oled_update>

						klick = 13;
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <StartOLED_RTC+0xf14>)
 8002f6e:	220d      	movs	r2, #13
 8002f70:	601a      	str	r2, [r3, #0]
					}
					break;
 8002f72:	e0e0      	b.n	8003136 <StartOLED_RTC+0x109a>

				case 13:
					// Set minutes

					graphics_text(0, 8, 1, "              ");
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <StartOLED_RTC+0xf20>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	2108      	movs	r1, #8
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f000 ff22 	bl	8003dc4 <graphics_text>
					oled_update();
 8002f80:	f000 ffd4 	bl	8003f2c <oled_update>
					graphics_text(0, 8, 1, "SECONDS");
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <StartOLED_RTC+0xf28>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	2108      	movs	r1, #8
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f000 ff1a 	bl	8003dc4 <graphics_text>
					oled_update();
 8002f90:	f000 ffcc 	bl	8003f2c <oled_update>

					__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <StartOLED_RTC+0xf04>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24

					while(klick == 13)
 8002f9c:	e065      	b.n	800306a <StartOLED_RTC+0xfce>
 8002f9e:	bf00      	nop
 8002fa0:	20004c10 	.word	0x20004c10
 8002fa4:	200000d8 	.word	0x200000d8
 8002fa8:	08012638 	.word	0x08012638
 8002fac:	080125d0 	.word	0x080125d0
 8002fb0:	200000dc 	.word	0x200000dc
 8002fb4:	08012644 	.word	0x08012644
 8002fb8:	08012658 	.word	0x08012658
 8002fbc:	0801266c 	.word	0x0801266c
 8002fc0:	08012690 	.word	0x08012690
 8002fc4:	08012698 	.word	0x08012698
					{
						currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	; (8003144 <StartOLED_RTC+0x10a8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b5d      	ldr	r3, [pc, #372]	; (8003148 <StartOLED_RTC+0x10ac>)
 8002fd2:	601a      	str	r2, [r3, #0]
						currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8002fd4:	4b5c      	ldr	r3, [pc, #368]	; (8003148 <StartOLED_RTC+0x10ac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	0fda      	lsrs	r2, r3, #31
 8002fde:	4413      	add	r3, r2
 8002fe0:	105b      	asrs	r3, r3, #1
 8002fe2:	425b      	negs	r3, r3
 8002fe4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002fe8:	337f      	adds	r3, #127	; 0x7f
 8002fea:	4a57      	ldr	r2, [pc, #348]	; (8003148 <StartOLED_RTC+0x10ac>)
 8002fec:	6013      	str	r3, [r2, #0]

						if(currCounter != prevCounter)
 8002fee:	4b56      	ldr	r3, [pc, #344]	; (8003148 <StartOLED_RTC+0x10ac>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d038      	beq.n	800306a <StartOLED_RTC+0xfce>
						{
							prevCounter = currCounter;
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <StartOLED_RTC+0x10ac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]
							if(currCounter > 59)
 8002ffe:	4b52      	ldr	r3, [pc, #328]	; (8003148 <StartOLED_RTC+0x10ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b3b      	cmp	r3, #59	; 0x3b
 8003004:	dd06      	ble.n	8003014 <StartOLED_RTC+0xf78>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003006:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <StartOLED_RTC+0x10a8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 800300e:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <StartOLED_RTC+0x10ac>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
							}
							if(currCounter < 0)
 8003014:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <StartOLED_RTC+0x10ac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	da06      	bge.n	800302a <StartOLED_RTC+0xf8e>
							{
								__HAL_TIM_SET_COUNTER(&htim1, 0);
 800301c:	4b49      	ldr	r3, [pc, #292]	; (8003144 <StartOLED_RTC+0x10a8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
								currCounter = 0;
 8003024:	4b48      	ldr	r3, [pc, #288]	; (8003148 <StartOLED_RTC+0x10ac>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
							}
							graphics_text(0, 16, 1, "           ");
 800302a:	4b48      	ldr	r3, [pc, #288]	; (800314c <StartOLED_RTC+0x10b0>)
 800302c:	2201      	movs	r2, #1
 800302e:	2110      	movs	r1, #16
 8003030:	2000      	movs	r0, #0
 8003032:	f000 fec7 	bl	8003dc4 <graphics_text>
							oled_update();
 8003036:	f000 ff79 	bl	8003f2c <oled_update>

							sprintf(time_buf, "%d", currCounter);
 800303a:	4b43      	ldr	r3, [pc, #268]	; (8003148 <StartOLED_RTC+0x10ac>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003042:	4943      	ldr	r1, [pc, #268]	; (8003150 <StartOLED_RTC+0x10b4>)
 8003044:	4618      	mov	r0, r3
 8003046:	f00e fd29 	bl	8011a9c <siprintf>
							graphics_text(0, 16, 1, time_buf);
 800304a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800304e:	2201      	movs	r2, #1
 8003050:	2110      	movs	r1, #16
 8003052:	2000      	movs	r0, #0
 8003054:	f000 feb6 	bl	8003dc4 <graphics_text>
							oled_update();
 8003058:	f000 ff68 	bl	8003f2c <oled_update>
							memset(time_buf, 0, sizeof(time_buf));
 800305c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003060:	220a      	movs	r2, #10
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f00e fbed 	bl	8011844 <memset>
					while(klick == 13)
 800306a:	4b3a      	ldr	r3, [pc, #232]	; (8003154 <StartOLED_RTC+0x10b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b0d      	cmp	r3, #13
 8003070:	d0aa      	beq.n	8002fc8 <StartOLED_RTC+0xf2c>
						}
					}
					if(klick == 14)
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <StartOLED_RTC+0x10b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b0e      	cmp	r3, #14
 8003078:	d160      	bne.n	800313c <StartOLED_RTC+0x10a0>
					{
						// write data
						ds3231_set(DS3231_REGISTER_SECONDS_DEFAULT, &prevCounter);
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	4619      	mov	r1, r3
 8003080:	2000      	movs	r0, #0
 8003082:	f7fd fbd9 	bl	8000838 <ds3231_set>

						graphics_text(0, 16, 1, "                 ");
 8003086:	4b34      	ldr	r3, [pc, #208]	; (8003158 <StartOLED_RTC+0x10bc>)
 8003088:	2201      	movs	r2, #1
 800308a:	2110      	movs	r1, #16
 800308c:	2000      	movs	r0, #0
 800308e:	f000 fe99 	bl	8003dc4 <graphics_text>
						oled_update();
 8003092:	f000 ff4b 	bl	8003f2c <oled_update>

						graphics_text(0, 16, 1, "installed");
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <StartOLED_RTC+0x10c0>)
 8003098:	2201      	movs	r2, #1
 800309a:	2110      	movs	r1, #16
 800309c:	2000      	movs	r0, #0
 800309e:	f000 fe91 	bl	8003dc4 <graphics_text>
						oled_update();
 80030a2:	f000 ff43 	bl	8003f2c <oled_update>

						osDelay(800);
 80030a6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80030aa:	f00a ff35 	bl	800df18 <osDelay>

						graphics_text(0, 16, 1, "                 ");
 80030ae:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <StartOLED_RTC+0x10bc>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	2110      	movs	r1, #16
 80030b4:	2000      	movs	r0, #0
 80030b6:	f000 fe85 	bl	8003dc4 <graphics_text>
						oled_update();
 80030ba:	f000 ff37 	bl	8003f2c <oled_update>

						klick = 15;
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <StartOLED_RTC+0x10b8>)
 80030c0:	220f      	movs	r2, #15
 80030c2:	601a      	str	r2, [r3, #0]
					}
					break;
 80030c4:	e03a      	b.n	800313c <StartOLED_RTC+0x10a0>

				case 15:		// EXIT

					osDelay(500);
 80030c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030ca:	f00a ff25 	bl	800df18 <osDelay>
					clear();
 80030ce:	f000 fcc5 	bl	8003a5c <clear>
					oled_update();
 80030d2:	f000 ff2b 	bl	8003f2c <oled_update>

					for(uint8_t q = 0; q < 3; q ++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80030dc:	e017      	b.n	800310e <StartOLED_RTC+0x1072>
					{
						graphics_text(20, 16, 2, "THE TIME IS SET");
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <StartOLED_RTC+0x10c4>)
 80030e0:	2202      	movs	r2, #2
 80030e2:	2110      	movs	r1, #16
 80030e4:	2014      	movs	r0, #20
 80030e6:	f000 fe6d 	bl	8003dc4 <graphics_text>
						oled_update();
 80030ea:	f000 ff1f 	bl	8003f2c <oled_update>
						osDelay(400);
 80030ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80030f2:	f00a ff11 	bl	800df18 <osDelay>

						clear();
 80030f6:	f000 fcb1 	bl	8003a5c <clear>
						oled_update();
 80030fa:	f000 ff17 	bl	8003f2c <oled_update>
						osDelay(200);
 80030fe:	20c8      	movs	r0, #200	; 0xc8
 8003100:	f00a ff0a 	bl	800df18 <osDelay>
					for(uint8_t q = 0; q < 3; q ++)
 8003104:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003108:	3301      	adds	r3, #1
 800310a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800310e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003112:	2b02      	cmp	r3, #2
 8003114:	d9e3      	bls.n	80030de <StartOLED_RTC+0x1042>
					}
					klick = 0;					// Return to show time
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <StartOLED_RTC+0x10b8>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

					break;
 800311c:	e00f      	b.n	800313e <StartOLED_RTC+0x10a2>
					break;
 800311e:	bf00      	nop
 8003120:	f7ff b801 	b.w	8002126 <StartOLED_RTC+0x8a>
					break;
 8003124:	bf00      	nop
 8003126:	f7fe bffe 	b.w	8002126 <StartOLED_RTC+0x8a>
					break;
 800312a:	bf00      	nop
 800312c:	f7fe bffb 	b.w	8002126 <StartOLED_RTC+0x8a>
					break;
 8003130:	bf00      	nop
 8003132:	f7fe bff8 	b.w	8002126 <StartOLED_RTC+0x8a>
					break;
 8003136:	bf00      	nop
 8003138:	f7fe bff5 	b.w	8002126 <StartOLED_RTC+0x8a>
					break;
 800313c:	bf00      	nop
			switch (klick)
 800313e:	f7fe bff2 	b.w	8002126 <StartOLED_RTC+0x8a>
 8003142:	bf00      	nop
 8003144:	20004c10 	.word	0x20004c10
 8003148:	200000d8 	.word	0x200000d8
 800314c:	08012638 	.word	0x08012638
 8003150:	080125d0 	.word	0x080125d0
 8003154:	200000dc 	.word	0x200000dc
 8003158:	08012644 	.word	0x08012644
 800315c:	08012658 	.word	0x08012658
 8003160:	080126a0 	.word	0x080126a0

08003164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003176:	f000 ffeb 	bl	8004150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40001000 	.word	0x40001000

08003188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800318c:	b672      	cpsid	i
}
 800318e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003190:	e7fe      	b.n	8003190 <Error_Handler+0x8>
	...

08003194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_MspInit+0x54>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HAL_MspInit+0x54>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_MspInit+0x54>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_MspInit+0x54>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_MspInit+0x54>)
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_MspInit+0x54>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	210f      	movs	r1, #15
 80031d6:	f06f 0001 	mvn.w	r0, #1
 80031da:	f001 f8b5 	bl	8004348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a42      	ldr	r2, [pc, #264]	; (8003314 <HAL_I2C_MspInit+0x128>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12d      	bne.n	800326a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a40      	ldr	r2, [pc, #256]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800322a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003230:	2312      	movs	r3, #18
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800323c:	2304      	movs	r3, #4
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	4619      	mov	r1, r3
 8003246:	4835      	ldr	r0, [pc, #212]	; (800331c <HAL_I2C_MspInit+0x130>)
 8003248:	f001 f93a 	bl	80044c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	4b31      	ldr	r3, [pc, #196]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	4a30      	ldr	r2, [pc, #192]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 8003256:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800325a:	6413      	str	r3, [r2, #64]	; 0x40
 800325c:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003268:	e050      	b.n	800330c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <HAL_I2C_MspInit+0x134>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d14b      	bne.n	800330c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a26      	ldr	r2, [pc, #152]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032b2:	2312      	movs	r3, #18
 80032b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032be:	2304      	movs	r3, #4
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c2:	f107 031c 	add.w	r3, r7, #28
 80032c6:	4619      	mov	r1, r3
 80032c8:	4816      	ldr	r0, [pc, #88]	; (8003324 <HAL_I2C_MspInit+0x138>)
 80032ca:	f001 f8f9 	bl	80044c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032d4:	2312      	movs	r3, #18
 80032d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032dc:	2303      	movs	r3, #3
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032e0:	2304      	movs	r3, #4
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	4619      	mov	r1, r3
 80032ea:	480f      	ldr	r0, [pc, #60]	; (8003328 <HAL_I2C_MspInit+0x13c>)
 80032ec:	f001 f8e8 	bl	80044c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80032f0:	2300      	movs	r3, #0
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 80032fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_I2C_MspInit+0x12c>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
}
 800330c:	bf00      	nop
 800330e:	3730      	adds	r7, #48	; 0x30
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40005400 	.word	0x40005400
 8003318:	40023800 	.word	0x40023800
 800331c:	40020400 	.word	0x40020400
 8003320:	40005c00 	.word	0x40005c00
 8003324:	40020800 	.word	0x40020800
 8003328:	40020000 	.word	0x40020000

0800332c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08e      	sub	sp, #56	; 0x38
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_I2S_MspInit+0xf0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d15a      	bne.n	8003412 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800335c:	2301      	movs	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003360:	23c0      	movs	r3, #192	; 0xc0
 8003362:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003364:	2302      	movs	r3, #2
 8003366:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	4618      	mov	r0, r3
 800336e:	f005 fa8f 	bl	8008890 <HAL_RCCEx_PeriphCLKConfig>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8003378:	f7ff ff06 	bl	8003188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	4b27      	ldr	r3, [pc, #156]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	4a26      	ldr	r2, [pc, #152]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 8003386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338a:	6413      	str	r3, [r2, #64]	; 0x40
 800338c:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6313      	str	r3, [r2, #48]	; 0x30
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	6313      	str	r3, [r2, #48]	; 0x30
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_I2S_MspInit+0xf4>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80033d0:	2310      	movs	r3, #16
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033dc:	2300      	movs	r3, #0
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033e0:	2306      	movs	r3, #6
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80033e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e8:	4619      	mov	r1, r3
 80033ea:	480e      	ldr	r0, [pc, #56]	; (8003424 <HAL_I2S_MspInit+0xf8>)
 80033ec:	f001 f868 	bl	80044c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80033f0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003402:	2306      	movs	r3, #6
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340a:	4619      	mov	r1, r3
 800340c:	4806      	ldr	r0, [pc, #24]	; (8003428 <HAL_I2S_MspInit+0xfc>)
 800340e:	f001 f857 	bl	80044c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003412:	bf00      	nop
 8003414:	3738      	adds	r7, #56	; 0x38
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40003c00 	.word	0x40003c00
 8003420:	40023800 	.word	0x40023800
 8003424:	40020000 	.word	0x40020000
 8003428:	40020800 	.word	0x40020800

0800342c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_RTC_MspInit+0x4c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d111      	bne.n	8003470 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800344c:	2302      	movs	r3, #2
 800344e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003454:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	4618      	mov	r0, r3
 800345c:	f005 fa18 	bl	8008890 <HAL_RCCEx_PeriphCLKConfig>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003466:	f7ff fe8f 	bl	8003188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_RTC_MspInit+0x50>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40002800 	.word	0x40002800
 800347c:	42470e3c 	.word	0x42470e3c

08003480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_SPI_MspInit+0x84>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d12b      	bne.n	80034fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <HAL_SPI_MspInit+0x88>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80034da:	23e0      	movs	r3, #224	; 0xe0
 80034dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034ea:	2305      	movs	r3, #5
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	4805      	ldr	r0, [pc, #20]	; (800350c <HAL_SPI_MspInit+0x8c>)
 80034f6:	f000 ffe3 	bl	80044c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034fa:	bf00      	nop
 80034fc:	3728      	adds	r7, #40	; 0x28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40013000 	.word	0x40013000
 8003508:	40023800 	.word	0x40023800
 800350c:	40020000 	.word	0x40020000

08003510 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <HAL_TIM_Encoder_MspInit+0x94>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d134      	bne.n	800359c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_TIM_Encoder_MspInit+0x98>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6453      	str	r3, [r2, #68]	; 0x44
 8003542:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8003558:	f043 0310 	orr.w	r3, r3, #16
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800356a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800356e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	2300      	movs	r3, #0
 800357a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4619      	mov	r1, r3
 8003586:	4809      	ldr	r0, [pc, #36]	; (80035ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8003588:	f000 ff9a 	bl	80044c0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800358c:	2200      	movs	r2, #0
 800358e:	2105      	movs	r1, #5
 8003590:	2019      	movs	r0, #25
 8003592:	f000 fed9 	bl	8004348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003596:	2019      	movs	r0, #25
 8003598:	f000 fef2 	bl	8004380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800359c:	bf00      	nop
 800359e:	3728      	adds	r7, #40	; 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <HAL_TIM_Base_MspInit+0x48>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d115      	bne.n	80035ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_TIM_Base_MspInit+0x4c>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <HAL_TIM_Base_MspInit+0x4c>)
 80035cc:	f043 0320 	orr.w	r3, r3, #32
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_TIM_Base_MspInit+0x4c>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2105      	movs	r1, #5
 80035e2:	2037      	movs	r0, #55	; 0x37
 80035e4:	f000 feb0 	bl	8004348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80035e8:	2037      	movs	r0, #55	; 0x37
 80035ea:	f000 fec9 	bl	8004380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40001400 	.word	0x40001400
 80035fc:	40023800 	.word	0x40023800

08003600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <HAL_UART_MspInit+0x94>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d133      	bne.n	800368a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <HAL_UART_MspInit+0x98>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	4a1b      	ldr	r2, [pc, #108]	; (8003698 <HAL_UART_MspInit+0x98>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	6413      	str	r3, [r2, #64]	; 0x40
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_UART_MspInit+0x98>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_UART_MspInit+0x98>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a14      	ldr	r2, [pc, #80]	; (8003698 <HAL_UART_MspInit+0x98>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_UART_MspInit+0x98>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800365a:	230c      	movs	r3, #12
 800365c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003666:	2303      	movs	r3, #3
 8003668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800366a:	2307      	movs	r3, #7
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <HAL_UART_MspInit+0x9c>)
 8003676:	f000 ff23 	bl	80044c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800367a:	2200      	movs	r2, #0
 800367c:	2106      	movs	r1, #6
 800367e:	2026      	movs	r0, #38	; 0x26
 8003680:	f000 fe62 	bl	8004348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003684:	2026      	movs	r0, #38	; 0x26
 8003686:	f000 fe7b 	bl	8004380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800368a:	bf00      	nop
 800368c:	3728      	adds	r7, #40	; 0x28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40004400 	.word	0x40004400
 8003698:	40023800 	.word	0x40023800
 800369c:	40020000 	.word	0x40020000

080036a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08c      	sub	sp, #48	; 0x30
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	2036      	movs	r0, #54	; 0x36
 80036b6:	f000 fe47 	bl	8004348 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036ba:	2036      	movs	r0, #54	; 0x36
 80036bc:	f000 fe60 	bl	8004380 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <HAL_InitTick+0xa4>)
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	4a1e      	ldr	r2, [pc, #120]	; (8003744 <HAL_InitTick+0xa4>)
 80036ca:	f043 0310 	orr.w	r3, r3, #16
 80036ce:	6413      	str	r3, [r2, #64]	; 0x40
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_InitTick+0xa4>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036dc:	f107 0210 	add.w	r2, r7, #16
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f005 f8a0 	bl	800882c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80036ec:	f005 f876 	bl	80087dc <HAL_RCC_GetPCLK1Freq>
 80036f0:	4603      	mov	r3, r0
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	4a13      	ldr	r2, [pc, #76]	; (8003748 <HAL_InitTick+0xa8>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9b      	lsrs	r3, r3, #18
 8003700:	3b01      	subs	r3, #1
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_InitTick+0xac>)
 8003706:	4a12      	ldr	r2, [pc, #72]	; (8003750 <HAL_InitTick+0xb0>)
 8003708:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_InitTick+0xac>)
 800370c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003710:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003712:	4a0e      	ldr	r2, [pc, #56]	; (800374c <HAL_InitTick+0xac>)
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <HAL_InitTick+0xac>)
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_InitTick+0xac>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003724:	4809      	ldr	r0, [pc, #36]	; (800374c <HAL_InitTick+0xac>)
 8003726:	f005 fd5f 	bl	80091e8 <HAL_TIM_Base_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003730:	4806      	ldr	r0, [pc, #24]	; (800374c <HAL_InitTick+0xac>)
 8003732:	f005 fda9 	bl	8009288 <HAL_TIM_Base_Start_IT>
 8003736:	4603      	mov	r3, r0
 8003738:	e000      	b.n	800373c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
}
 800373c:	4618      	mov	r0, r3
 800373e:	3730      	adds	r7, #48	; 0x30
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	431bde83 	.word	0x431bde83
 800374c:	20004d94 	.word	0x20004d94
 8003750:	40001000 	.word	0x40001000

08003754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003758:	e7fe      	b.n	8003758 <NMI_Handler+0x4>

0800375a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800375e:	e7fe      	b.n	800375e <HardFault_Handler+0x4>

08003760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003764:	e7fe      	b.n	8003764 <MemManage_Handler+0x4>

08003766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800376a:	e7fe      	b.n	800376a <BusFault_Handler+0x4>

0800376c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <UsageFault_Handler+0x4>

08003772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003786:	f005 ff52 	bl	800962e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20004c10 	.word	0x20004c10

08003794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <USART2_IRQHandler+0x10>)
 800379a:	f006 fadf 	bl	8009d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  //HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data , 1);
  /* USER CODE END USART2_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20004cbc 	.word	0x20004cbc

080037a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_TIM_Base_Start_IT(&htim7);								//	Turn on Timer with 100Hz period = 0,01 sec
 80037ac:	4804      	ldr	r0, [pc, #16]	; (80037c0 <EXTI15_10_IRQHandler+0x18>)
 80037ae:	f005 fd6b 	bl	8009288 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PC15_OSC32_OUT_Pin);
 80037b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80037b6:	f001 f851 	bl	800485c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20004d04 	.word	0x20004d04

080037c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <TIM6_DAC_IRQHandler+0x10>)
 80037ca:	f005 ff30 	bl	800962e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20004d94 	.word	0x20004d94

080037d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(tim_val == 4)											// Waiting 3 period of timer7: (0,01 *3 = 0,03 second)
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <TIM7_IRQHandler+0x5c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d11d      	bne.n	8003820 <TIM7_IRQHandler+0x48>
		{
			tim_val = 0;
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <TIM7_IRQHandler+0x5c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
			if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)	// If button steel pressed
 80037ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ee:	4812      	ldr	r0, [pc, #72]	; (8003838 <TIM7_IRQHandler+0x60>)
 80037f0:	f001 f802 	bl	80047f8 <HAL_GPIO_ReadPin>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <TIM7_IRQHandler+0x40>
			{
				klick++;
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <TIM7_IRQHandler+0x64>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	4a0e      	ldr	r2, [pc, #56]	; (800383c <TIM7_IRQHandler+0x64>)
 8003802:	6013      	str	r3, [r2, #0]
				if(klick >= 15)										// it mean we have only 4 LEDs
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <TIM7_IRQHandler+0x64>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b0e      	cmp	r3, #14
 800380a:	dd02      	ble.n	8003812 <TIM7_IRQHandler+0x3a>
				{
					klick = 0;
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <TIM7_IRQHandler+0x64>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
				}
				HAL_TIM_Base_Stop_IT(&htim7);						// Stop timer (becouse counter can turn on only encoder key)
 8003812:	480b      	ldr	r0, [pc, #44]	; (8003840 <TIM7_IRQHandler+0x68>)
 8003814:	f005 fda8 	bl	8009368 <HAL_TIM_Base_Stop_IT>
			}
			HAL_TIM_Base_Stop_IT(&htim7);
 8003818:	4809      	ldr	r0, [pc, #36]	; (8003840 <TIM7_IRQHandler+0x68>)
 800381a:	f005 fda5 	bl	8009368 <HAL_TIM_Base_Stop_IT>
 800381e:	e004      	b.n	800382a <TIM7_IRQHandler+0x52>
		}
		else
		{
			tim_val++;
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <TIM7_IRQHandler+0x5c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	4a03      	ldr	r2, [pc, #12]	; (8003834 <TIM7_IRQHandler+0x5c>)
 8003828:	6013      	str	r3, [r2, #0]
		}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800382a:	4805      	ldr	r0, [pc, #20]	; (8003840 <TIM7_IRQHandler+0x68>)
 800382c:	f005 feff 	bl	800962e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	2000013c 	.word	0x2000013c
 8003838:	40021000 	.word	0x40021000
 800383c:	200000dc 	.word	0x200000dc
 8003840:	20004d04 	.word	0x20004d04

08003844 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <OTG_FS_IRQHandler+0x10>)
 800384a:	f001 fa95 	bl	8004d78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20005428 	.word	0x20005428

08003858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003860:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <_sbrk+0x5c>)
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <_sbrk+0x60>)
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <_sbrk+0x64>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <_sbrk+0x64>)
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <_sbrk+0x68>)
 8003878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <_sbrk+0x64>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d207      	bcs.n	8003898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003888:	f00d ff92 	bl	80117b0 <__errno>
 800388c:	4603      	mov	r3, r0
 800388e:	220c      	movs	r2, #12
 8003890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003896:	e009      	b.n	80038ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003898:	4b08      	ldr	r3, [pc, #32]	; (80038bc <_sbrk+0x64>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <_sbrk+0x64>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <_sbrk+0x64>)
 80038a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038aa:	68fb      	ldr	r3, [r7, #12]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20020000 	.word	0x20020000
 80038b8:	00000400 	.word	0x00000400
 80038bc:	20000140 	.word	0x20000140
 80038c0:	20005740 	.word	0x20005740

080038c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <SystemInit+0x20>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <SystemInit+0x20>)
 80038d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
 80038f2:	460b      	mov	r3, r1
 80038f4:	71bb      	strb	r3, [r7, #6]
 80038f6:	4613      	mov	r3, r2
 80038f8:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db3b      	blt.n	800397a <draw_pixel+0x92>
 8003902:	79bb      	ldrb	r3, [r7, #6]
 8003904:	2b1f      	cmp	r3, #31
 8003906:	d838      	bhi.n	800397a <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 800390c:	79bb      	ldrb	r3, [r7, #6]
 800390e:	08db      	lsrs	r3, r3, #3
 8003910:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8003912:	7bfa      	ldrb	r2, [r7, #15]
 8003914:	79bb      	ldrb	r3, [r7, #6]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	737b      	strb	r3, [r7, #13]
		if(color)
 8003920:	797b      	ldrb	r3, [r7, #5]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d012      	beq.n	800394c <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8003926:	7bba      	ldrb	r2, [r7, #14]
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	4917      	ldr	r1, [pc, #92]	; (8003988 <draw_pixel+0xa0>)
 800392c:	01d2      	lsls	r2, r2, #7
 800392e:	440a      	add	r2, r1
 8003930:	4413      	add	r3, r2
 8003932:	7818      	ldrb	r0, [r3, #0]
 8003934:	7bba      	ldrb	r2, [r7, #14]
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	7b79      	ldrb	r1, [r7, #13]
 800393a:	4301      	orrs	r1, r0
 800393c:	b2c8      	uxtb	r0, r1
 800393e:	4912      	ldr	r1, [pc, #72]	; (8003988 <draw_pixel+0xa0>)
 8003940:	01d2      	lsls	r2, r2, #7
 8003942:	440a      	add	r2, r1
 8003944:	4413      	add	r3, r2
 8003946:	4602      	mov	r2, r0
 8003948:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 800394a:	e016      	b.n	800397a <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 800394c:	7bba      	ldrb	r2, [r7, #14]
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	490d      	ldr	r1, [pc, #52]	; (8003988 <draw_pixel+0xa0>)
 8003952:	01d2      	lsls	r2, r2, #7
 8003954:	440a      	add	r2, r1
 8003956:	4413      	add	r3, r2
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b25a      	sxtb	r2, r3
 800395c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003960:	43db      	mvns	r3, r3
 8003962:	b25b      	sxtb	r3, r3
 8003964:	4013      	ands	r3, r2
 8003966:	b259      	sxtb	r1, r3
 8003968:	7bba      	ldrb	r2, [r7, #14]
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	b2c8      	uxtb	r0, r1
 800396e:	4906      	ldr	r1, [pc, #24]	; (8003988 <draw_pixel+0xa0>)
 8003970:	01d2      	lsls	r2, r2, #7
 8003972:	440a      	add	r2, r1
 8003974:	4413      	add	r3, r2
 8003976:	4602      	mov	r2, r0
 8003978:	701a      	strb	r2, [r3, #0]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20004ddc 	.word	0x20004ddc

0800398c <invert_pixel>:
				draw_pixel(x*3+i,y*3+j,color);
	}
}

void invert_pixel(uint8_t x, uint8_t y)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	460a      	mov	r2, r1
 8003996:	71fb      	strb	r3, [r7, #7]
 8003998:	4613      	mov	r3, r2
 800399a:	71bb      	strb	r3, [r7, #6]
	if(x<128 && y<32)
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	db24      	blt.n	80039ee <invert_pixel+0x62>
 80039a4:	79bb      	ldrb	r3, [r7, #6]
 80039a6:	2b1f      	cmp	r3, #31
 80039a8:	d821      	bhi.n	80039ee <invert_pixel+0x62>
	{
		uint8_t pixel = 0x01;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
		gddram[y>>3][x] ^= pixel<<(y%8);
 80039ae:	79bb      	ldrb	r3, [r7, #6]
 80039b0:	08db      	lsrs	r3, r3, #3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	4910      	ldr	r1, [pc, #64]	; (80039fc <invert_pixel+0x70>)
 80039ba:	01d2      	lsls	r2, r2, #7
 80039bc:	440a      	add	r2, r1
 80039be:	4413      	add	r3, r2
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b25a      	sxtb	r2, r3
 80039c4:	7bf9      	ldrb	r1, [r7, #15]
 80039c6:	79bb      	ldrb	r3, [r7, #6]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	4053      	eors	r3, r2
 80039d4:	b259      	sxtb	r1, r3
 80039d6:	79bb      	ldrb	r3, [r7, #6]
 80039d8:	08db      	lsrs	r3, r3, #3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	b2c8      	uxtb	r0, r1
 80039e2:	4906      	ldr	r1, [pc, #24]	; (80039fc <invert_pixel+0x70>)
 80039e4:	01d2      	lsls	r2, r2, #7
 80039e6:	440a      	add	r2, r1
 80039e8:	4413      	add	r3, r2
 80039ea:	4602      	mov	r2, r0
 80039ec:	701a      	strb	r2, [r3, #0]
	}
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20004ddc 	.word	0x20004ddc

08003a00 <invert_rectangle>:

void invert_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4604      	mov	r4, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4623      	mov	r3, r4
 8003a10:	71fb      	strb	r3, [r7, #7]
 8003a12:	4603      	mov	r3, r0
 8003a14:	71bb      	strb	r3, [r7, #6]
 8003a16:	460b      	mov	r3, r1
 8003a18:	717b      	strb	r3, [r7, #5]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=x0;i<x1;i++)
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	73fb      	strb	r3, [r7, #15]
 8003a22:	e012      	b.n	8003a4a <invert_rectangle+0x4a>
		for(j=y0;j<y1;j++)
 8003a24:	79bb      	ldrb	r3, [r7, #6]
 8003a26:	73bb      	strb	r3, [r7, #14]
 8003a28:	e008      	b.n	8003a3c <invert_rectangle+0x3c>
			invert_pixel(i,j);
 8003a2a:	7bba      	ldrb	r2, [r7, #14]
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ffab 	bl	800398c <invert_pixel>
		for(j=y0;j<y1;j++)
 8003a36:	7bbb      	ldrb	r3, [r7, #14]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	73bb      	strb	r3, [r7, #14]
 8003a3c:	7bba      	ldrb	r2, [r7, #14]
 8003a3e:	793b      	ldrb	r3, [r7, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d3f2      	bcc.n	8003a2a <invert_rectangle+0x2a>
	for(i=x0;i<x1;i++)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	3301      	adds	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	797b      	ldrb	r3, [r7, #5]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3e8      	bcc.n	8003a24 <invert_rectangle+0x24>
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}

08003a5c <clear>:

void clear(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(i=0;i<4;i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	71fb      	strb	r3, [r7, #7]
 8003a66:	e014      	b.n	8003a92 <clear+0x36>
		for(j=0;j<128;j++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	71bb      	strb	r3, [r7, #6]
 8003a6c:	e00a      	b.n	8003a84 <clear+0x28>
			gddram[i][j]=0x00;
 8003a6e:	79fa      	ldrb	r2, [r7, #7]
 8003a70:	79bb      	ldrb	r3, [r7, #6]
 8003a72:	490d      	ldr	r1, [pc, #52]	; (8003aa8 <clear+0x4c>)
 8003a74:	01d2      	lsls	r2, r2, #7
 8003a76:	440a      	add	r2, r1
 8003a78:	4413      	add	r3, r2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
		for(j=0;j<128;j++)
 8003a7e:	79bb      	ldrb	r3, [r7, #6]
 8003a80:	3301      	adds	r3, #1
 8003a82:	71bb      	strb	r3, [r7, #6]
 8003a84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	daf0      	bge.n	8003a6e <clear+0x12>
	for(i=0;i<4;i++)
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	71fb      	strb	r3, [r7, #7]
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d9e7      	bls.n	8003a68 <clear+0xc>
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20004ddc 	.word	0x20004ddc

08003aac <line_h>:
			break;
	}
}

void line_h(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t width, uint8_t mode)
{
 8003aac:	b590      	push	{r4, r7, lr}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	71fb      	strb	r3, [r7, #7]
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71bb      	strb	r3, [r7, #6]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	717b      	strb	r3, [r7, #5]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	713b      	strb	r3, [r7, #4]
	if(x0>x1)
 8003aca:	79fa      	ldrb	r2, [r7, #7]
 8003acc:	79bb      	ldrb	r3, [r7, #6]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d905      	bls.n	8003ade <line_h+0x32>
	{
		uint8_t temp = x0;
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	757b      	strb	r3, [r7, #21]
		x0 = x1;
 8003ad6:	79bb      	ldrb	r3, [r7, #6]
 8003ad8:	71fb      	strb	r3, [r7, #7]
		x1 = temp;
 8003ada:	7d7b      	ldrb	r3, [r7, #21]
 8003adc:	71bb      	strb	r3, [r7, #6]
	}
	uint8_t i,j;
	switch(mode)
 8003ade:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	f000 80ac 	beq.w	8003c40 <line_h+0x194>
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	f300 80fb 	bgt.w	8003ce4 <line_h+0x238>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d054      	beq.n	8003b9c <line_h+0xf0>
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f040 80f6 	bne.w	8003ce4 <line_h+0x238>
	{
		case add :
			if(width%2)
 8003af8:	793b      	ldrb	r3, [r7, #4]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d027      	beq.n	8003b54 <line_h+0xa8>
			{
				uint8_t start = y0-(width-1)/2;
 8003b04:	793b      	ldrb	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	0fda      	lsrs	r2, r3, #31
 8003b0a:	4413      	add	r3, r2
 8003b0c:	105b      	asrs	r3, r3, #1
 8003b0e:	425b      	negs	r3, r3
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	797b      	ldrb	r3, [r7, #5]
 8003b14:	4413      	add	r3, r2
 8003b16:	747b      	strb	r3, [r7, #17]
				for(i=0;i<width;i++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	75fb      	strb	r3, [r7, #23]
 8003b1c:	e015      	b.n	8003b4a <line_h+0x9e>
					for(j=x0;j<=x1;j++)
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	75bb      	strb	r3, [r7, #22]
 8003b22:	e00b      	b.n	8003b3c <line_h+0x90>
						draw_pixel(j,start+i,1);
 8003b24:	7c7a      	ldrb	r2, [r7, #17]
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	4413      	add	r3, r2
 8003b2a:	b2d9      	uxtb	r1, r3
 8003b2c:	7dbb      	ldrb	r3, [r7, #22]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fed9 	bl	80038e8 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003b36:	7dbb      	ldrb	r3, [r7, #22]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	75bb      	strb	r3, [r7, #22]
 8003b3c:	7dba      	ldrb	r2, [r7, #22]
 8003b3e:	79bb      	ldrb	r3, [r7, #6]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d9ef      	bls.n	8003b24 <line_h+0x78>
				for(i=0;i<width;i++)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	3301      	adds	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
 8003b4a:	7dfa      	ldrb	r2, [r7, #23]
 8003b4c:	793b      	ldrb	r3, [r7, #4]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3e5      	bcc.n	8003b1e <line_h+0x72>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,1);
			}
			break;
 8003b52:	e0c7      	b.n	8003ce4 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003b54:	793b      	ldrb	r3, [r7, #4]
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	797a      	ldrb	r2, [r7, #5]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	74bb      	strb	r3, [r7, #18]
				for(i=0;i<width;i++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	75fb      	strb	r3, [r7, #23]
 8003b64:	e015      	b.n	8003b92 <line_h+0xe6>
					for(j=x0;j<=x1;j++)
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	75bb      	strb	r3, [r7, #22]
 8003b6a:	e00b      	b.n	8003b84 <line_h+0xd8>
						draw_pixel(j,start+i,1);
 8003b6c:	7cba      	ldrb	r2, [r7, #18]
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	4413      	add	r3, r2
 8003b72:	b2d9      	uxtb	r1, r3
 8003b74:	7dbb      	ldrb	r3, [r7, #22]
 8003b76:	2201      	movs	r2, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff feb5 	bl	80038e8 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003b7e:	7dbb      	ldrb	r3, [r7, #22]
 8003b80:	3301      	adds	r3, #1
 8003b82:	75bb      	strb	r3, [r7, #22]
 8003b84:	7dba      	ldrb	r2, [r7, #22]
 8003b86:	79bb      	ldrb	r3, [r7, #6]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d9ef      	bls.n	8003b6c <line_h+0xc0>
				for(i=0;i<width;i++)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
 8003b92:	7dfa      	ldrb	r2, [r7, #23]
 8003b94:	793b      	ldrb	r3, [r7, #4]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d3e5      	bcc.n	8003b66 <line_h+0xba>
			break;
 8003b9a:	e0a3      	b.n	8003ce4 <line_h+0x238>

		case erase :
			if(width%2)
 8003b9c:	793b      	ldrb	r3, [r7, #4]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d027      	beq.n	8003bf8 <line_h+0x14c>
			{
				uint8_t start = y0-(width-1)/2;
 8003ba8:	793b      	ldrb	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	0fda      	lsrs	r2, r3, #31
 8003bae:	4413      	add	r3, r2
 8003bb0:	105b      	asrs	r3, r3, #1
 8003bb2:	425b      	negs	r3, r3
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	797b      	ldrb	r3, [r7, #5]
 8003bb8:	4413      	add	r3, r2
 8003bba:	73fb      	strb	r3, [r7, #15]
				for(i=0;i<width;i++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	75fb      	strb	r3, [r7, #23]
 8003bc0:	e015      	b.n	8003bee <line_h+0x142>
					for(j=x0;j<=x1;j++)
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	75bb      	strb	r3, [r7, #22]
 8003bc6:	e00b      	b.n	8003be0 <line_h+0x134>
						draw_pixel(j,start+i,0);
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	4413      	add	r3, r2
 8003bce:	b2d9      	uxtb	r1, r3
 8003bd0:	7dbb      	ldrb	r3, [r7, #22]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fe87 	bl	80038e8 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003bda:	7dbb      	ldrb	r3, [r7, #22]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	75bb      	strb	r3, [r7, #22]
 8003be0:	7dba      	ldrb	r2, [r7, #22]
 8003be2:	79bb      	ldrb	r3, [r7, #6]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d9ef      	bls.n	8003bc8 <line_h+0x11c>
				for(i=0;i<width;i++)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	3301      	adds	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
 8003bee:	7dfa      	ldrb	r2, [r7, #23]
 8003bf0:	793b      	ldrb	r3, [r7, #4]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d3e5      	bcc.n	8003bc2 <line_h+0x116>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						draw_pixel(j,start+i,0);
			}
			break;
 8003bf6:	e075      	b.n	8003ce4 <line_h+0x238>
				uint8_t start = y0-width/2;
 8003bf8:	793b      	ldrb	r3, [r7, #4]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	797a      	ldrb	r2, [r7, #5]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	743b      	strb	r3, [r7, #16]
				for(i=0;i<width;i++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	75fb      	strb	r3, [r7, #23]
 8003c08:	e015      	b.n	8003c36 <line_h+0x18a>
					for(j=x0;j<=x1;j++)
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	75bb      	strb	r3, [r7, #22]
 8003c0e:	e00b      	b.n	8003c28 <line_h+0x17c>
						draw_pixel(j,start+i,0);
 8003c10:	7c3a      	ldrb	r2, [r7, #16]
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	4413      	add	r3, r2
 8003c16:	b2d9      	uxtb	r1, r3
 8003c18:	7dbb      	ldrb	r3, [r7, #22]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fe63 	bl	80038e8 <draw_pixel>
					for(j=x0;j<=x1;j++)
 8003c22:	7dbb      	ldrb	r3, [r7, #22]
 8003c24:	3301      	adds	r3, #1
 8003c26:	75bb      	strb	r3, [r7, #22]
 8003c28:	7dba      	ldrb	r2, [r7, #22]
 8003c2a:	79bb      	ldrb	r3, [r7, #6]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d9ef      	bls.n	8003c10 <line_h+0x164>
				for(i=0;i<width;i++)
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	3301      	adds	r3, #1
 8003c34:	75fb      	strb	r3, [r7, #23]
 8003c36:	7dfa      	ldrb	r2, [r7, #23]
 8003c38:	793b      	ldrb	r3, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3e5      	bcc.n	8003c0a <line_h+0x15e>
			break;
 8003c3e:	e051      	b.n	8003ce4 <line_h+0x238>

		case invert :
			if(width%2)
 8003c40:	793b      	ldrb	r3, [r7, #4]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d027      	beq.n	8003c9c <line_h+0x1f0>
			{
				uint8_t start = y0-(width-1)/2;
 8003c4c:	793b      	ldrb	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	0fda      	lsrs	r2, r3, #31
 8003c52:	4413      	add	r3, r2
 8003c54:	105b      	asrs	r3, r3, #1
 8003c56:	425b      	negs	r3, r3
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	797b      	ldrb	r3, [r7, #5]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<width;i++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]
 8003c64:	e015      	b.n	8003c92 <line_h+0x1e6>
					for(j=x0;j<=x1;j++)
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	75bb      	strb	r3, [r7, #22]
 8003c6a:	e00b      	b.n	8003c84 <line_h+0x1d8>
						invert_pixel(j,start+i);
 8003c6c:	7cfa      	ldrb	r2, [r7, #19]
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	4413      	add	r3, r2
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	7dbb      	ldrb	r3, [r7, #22]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fe87 	bl	800398c <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003c7e:	7dbb      	ldrb	r3, [r7, #22]
 8003c80:	3301      	adds	r3, #1
 8003c82:	75bb      	strb	r3, [r7, #22]
 8003c84:	7dba      	ldrb	r2, [r7, #22]
 8003c86:	79bb      	ldrb	r3, [r7, #6]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d9ef      	bls.n	8003c6c <line_h+0x1c0>
				for(i=0;i<width;i++)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
 8003c92:	7dfa      	ldrb	r2, [r7, #23]
 8003c94:	793b      	ldrb	r3, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3e5      	bcc.n	8003c66 <line_h+0x1ba>
				uint8_t start = y0-width/2;
				for(i=0;i<width;i++)
					for(j=x0;j<=x1;j++)
						invert_pixel(j,start+i);
			}
			break;
 8003c9a:	e022      	b.n	8003ce2 <line_h+0x236>
				uint8_t start = y0-width/2;
 8003c9c:	793b      	ldrb	r3, [r7, #4]
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	797a      	ldrb	r2, [r7, #5]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	753b      	strb	r3, [r7, #20]
				for(i=0;i<width;i++)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	75fb      	strb	r3, [r7, #23]
 8003cac:	e015      	b.n	8003cda <line_h+0x22e>
					for(j=x0;j<=x1;j++)
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	75bb      	strb	r3, [r7, #22]
 8003cb2:	e00b      	b.n	8003ccc <line_h+0x220>
						invert_pixel(j,start+i);
 8003cb4:	7d3a      	ldrb	r2, [r7, #20]
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	4413      	add	r3, r2
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	7dbb      	ldrb	r3, [r7, #22]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fe63 	bl	800398c <invert_pixel>
					for(j=x0;j<=x1;j++)
 8003cc6:	7dbb      	ldrb	r3, [r7, #22]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	75bb      	strb	r3, [r7, #22]
 8003ccc:	7dba      	ldrb	r2, [r7, #22]
 8003cce:	79bb      	ldrb	r3, [r7, #6]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d9ef      	bls.n	8003cb4 <line_h+0x208>
				for(i=0;i<width;i++)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
 8003cda:	7dfa      	ldrb	r2, [r7, #23]
 8003cdc:	793b      	ldrb	r3, [r7, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3e5      	bcc.n	8003cae <line_h+0x202>
			break;
 8003ce2:	bf00      	nop

	}
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd90      	pop	{r4, r7, pc}

08003cec <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8003cec:	b590      	push	{r4, r7, lr}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	71fb      	strb	r3, [r7, #7]
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71bb      	strb	r3, [r7, #6]
 8003d02:	460b      	mov	r3, r1
 8003d04:	717b      	strb	r3, [r7, #5]
 8003d06:	4613      	mov	r3, r2
 8003d08:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
 8003d12:	e04d      	b.n	8003db0 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	75bb      	strb	r3, [r7, #22]
 8003d18:	e042      	b.n	8003da0 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	08db      	lsrs	r3, r3, #3
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	7dbb      	ldrb	r3, [r7, #22]
 8003d22:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003d26:	fb11 f303 	smulbb	r3, r1, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	2201      	movs	r2, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8003d4a:	7bba      	ldrb	r2, [r7, #14]
 8003d4c:	7b7b      	ldrb	r3, [r7, #13]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00f      	beq.n	8003d76 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8003d56:	79fa      	ldrb	r2, [r7, #7]
 8003d58:	797b      	ldrb	r3, [r7, #5]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	4413      	add	r3, r2
 8003d62:	b2d8      	uxtb	r0, r3
 8003d64:	7dba      	ldrb	r2, [r7, #22]
 8003d66:	79bb      	ldrb	r3, [r7, #6]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f7ff fdba 	bl	80038e8 <draw_pixel>
 8003d74:	e00e      	b.n	8003d94 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8003d76:	79fa      	ldrb	r2, [r7, #7]
 8003d78:	797b      	ldrb	r3, [r7, #5]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	4413      	add	r3, r2
 8003d82:	b2d8      	uxtb	r0, r3
 8003d84:	7dba      	ldrb	r2, [r7, #22]
 8003d86:	79bb      	ldrb	r3, [r7, #6]
 8003d88:	4413      	add	r3, r2
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7ff fdaa 	bl	80038e8 <draw_pixel>
		for (y=0; y<height; y++)
 8003d94:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	75bb      	strb	r3, [r7, #22]
 8003da0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8003da4:	793b      	ldrb	r3, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	dbb7      	blt.n	8003d1a <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	3301      	adds	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
 8003db0:	7dfa      	ldrb	r2, [r7, #23]
 8003db2:	797b      	ldrb	r3, [r7, #5]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d3ad      	bcc.n	8003d14 <graphics_Glyph+0x28>
		}
	}
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd90      	pop	{r4, r7, pc}
	...

08003dc4 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b089      	sub	sp, #36	; 0x24
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4603      	mov	r3, r0
 8003dce:	71fb      	strb	r3, [r7, #7]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	71bb      	strb	r3, [r7, #6]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8003ddc:	e081      	b.n	8003ee2 <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8003de4:	797a      	ldrb	r2, [r7, #5]
 8003de6:	4944      	ldr	r1, [pc, #272]	; (8003ef8 <graphics_text+0x134>)
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3310      	adds	r3, #16
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	7dba      	ldrb	r2, [r7, #22]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d30b      	bcc.n	8003e14 <graphics_text+0x50>
 8003dfc:	797a      	ldrb	r2, [r7, #5]
 8003dfe:	493e      	ldr	r1, [pc, #248]	; (8003ef8 <graphics_text+0x134>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3311      	adds	r3, #17
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	7dba      	ldrb	r2, [r7, #22]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d909      	bls.n	8003e28 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8003e14:	797a      	ldrb	r2, [r7, #5]
 8003e16:	4938      	ldr	r1, [pc, #224]	; (8003ef8 <graphics_text+0x134>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3312      	adds	r3, #18
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8003e28:	797a      	ldrb	r2, [r7, #5]
 8003e2a:	4933      	ldr	r1, [pc, #204]	; (8003ef8 <graphics_text+0x134>)
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3310      	adds	r3, #16
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	7dba      	ldrb	r2, [r7, #22]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8003e40:	797a      	ldrb	r2, [r7, #5]
 8003e42:	492d      	ldr	r1, [pc, #180]	; (8003ef8 <graphics_text+0x134>)
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3308      	adds	r3, #8
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8003e54:	7d7b      	ldrb	r3, [r7, #21]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8003e5a:	797a      	ldrb	r2, [r7, #5]
 8003e5c:	4926      	ldr	r1, [pc, #152]	; (8003ef8 <graphics_text+0x134>)
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	330c      	adds	r3, #12
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	7dbb      	ldrb	r3, [r7, #22]
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8003e74:	797a      	ldrb	r2, [r7, #5]
 8003e76:	4920      	ldr	r1, [pc, #128]	; (8003ef8 <graphics_text+0x134>)
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	3301      	adds	r3, #1
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8003e88:	797a      	ldrb	r2, [r7, #5]
 8003e8a:	491b      	ldr	r1, [pc, #108]	; (8003ef8 <graphics_text+0x134>)
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8003e9a:	797a      	ldrb	r2, [r7, #5]
 8003e9c:	4916      	ldr	r1, [pc, #88]	; (8003ef8 <graphics_text+0x134>)
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	7dbb      	ldrb	r3, [r7, #22]
 8003eae:	7cf9      	ldrb	r1, [r7, #19]
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	7d39      	ldrb	r1, [r7, #20]
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]


		x+=width;
 8003ebe:	7dfa      	ldrb	r2, [r7, #23]
 8003ec0:	7d7b      	ldrb	r3, [r7, #21]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 8003ec6:	7d3c      	ldrb	r4, [r7, #20]
 8003ec8:	7d7a      	ldrb	r2, [r7, #21]
 8003eca:	79b9      	ldrb	r1, [r7, #6]
 8003ecc:	7df8      	ldrb	r0, [r7, #23]
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	f7ff ff08 	bl	8003cec <graphics_Glyph>
		str++;								/* point to next character in string */
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f47f af79 	bne.w	8003dde <graphics_text+0x1a>
	}

}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	0801281c 	.word	0x0801281c

08003efc <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8003f06:	2300      	movs	r3, #0
 8003f08:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 8003f0e:	f107 020c 	add.w	r2, r7, #12
 8003f12:	2332      	movs	r3, #50	; 0x32
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2302      	movs	r3, #2
 8003f18:	2178      	movs	r1, #120	; 0x78
 8003f1a:	4803      	ldr	r0, [pc, #12]	; (8003f28 <ssd1306_command+0x2c>)
 8003f1c:	f002 fb76 	bl	800660c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20004b24 	.word	0x20004b24

08003f2c <oled_update>:

void oled_update(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 8003f32:	2021      	movs	r0, #33	; 0x21
 8003f34:	f7ff ffe2 	bl	8003efc <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f7ff ffdf 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8003f3e:	207f      	movs	r0, #127	; 0x7f
 8003f40:	f7ff ffdc 	bl	8003efc <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8003f44:	2022      	movs	r0, #34	; 0x22
 8003f46:	f7ff ffd9 	bl	8003efc <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7ff ffd6 	bl	8003efc <ssd1306_command>
  ssd1306_command(3); // Page end address
 8003f50:	2003      	movs	r0, #3
 8003f52:	f7ff ffd3 	bl	8003efc <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8003f56:	2340      	movs	r3, #64	; 0x40
 8003f58:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	82fb      	strh	r3, [r7, #22]
 8003f5e:	e02d      	b.n	8003fbc <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8003f60:	2300      	movs	r3, #0
 8003f62:	757b      	strb	r3, [r7, #21]
 8003f64:	e024      	b.n	8003fb0 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8003f66:	2301      	movs	r3, #1
 8003f68:	753b      	strb	r3, [r7, #20]
 8003f6a:	e012      	b.n	8003f92 <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8003f6c:	8af9      	ldrh	r1, [r7, #22]
 8003f6e:	7d7a      	ldrb	r2, [r7, #21]
 8003f70:	7d3b      	ldrb	r3, [r7, #20]
 8003f72:	4413      	add	r3, r2
 8003f74:	1e5a      	subs	r2, r3, #1
 8003f76:	7d3b      	ldrb	r3, [r7, #20]
 8003f78:	4814      	ldr	r0, [pc, #80]	; (8003fcc <oled_update+0xa0>)
 8003f7a:	01c9      	lsls	r1, r1, #7
 8003f7c:	4401      	add	r1, r0
 8003f7e:	440a      	add	r2, r1
 8003f80:	7812      	ldrb	r2, [r2, #0]
 8003f82:	f107 0118 	add.w	r1, r7, #24
 8003f86:	440b      	add	r3, r1
 8003f88:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8003f8c:	7d3b      	ldrb	r3, [r7, #20]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	753b      	strb	r3, [r7, #20]
 8003f92:	7d3b      	ldrb	r3, [r7, #20]
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d9e9      	bls.n	8003f6c <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8003f98:	463a      	mov	r2, r7
 8003f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2311      	movs	r3, #17
 8003fa2:	2178      	movs	r1, #120	; 0x78
 8003fa4:	480a      	ldr	r0, [pc, #40]	; (8003fd0 <oled_update+0xa4>)
 8003fa6:	f002 fb31 	bl	800660c <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8003faa:	7d7b      	ldrb	r3, [r7, #21]
 8003fac:	3310      	adds	r3, #16
 8003fae:	757b      	strb	r3, [r7, #21]
 8003fb0:	7d7b      	ldrb	r3, [r7, #21]
 8003fb2:	2b7e      	cmp	r3, #126	; 0x7e
 8003fb4:	d9d7      	bls.n	8003f66 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8003fb6:	8afb      	ldrh	r3, [r7, #22]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	82fb      	strh	r3, [r7, #22]
 8003fbc:	8afb      	ldrh	r3, [r7, #22]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d9ce      	bls.n	8003f60 <oled_update+0x34>
		}
	}

}
 8003fc2:	bf00      	nop
 8003fc4:	bf00      	nop
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20004ddc 	.word	0x20004ddc
 8003fd0:	20004b24 	.word	0x20004b24

08003fd4 <oled_init>:

void oled_init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8003fda:	20ae      	movs	r0, #174	; 0xae
 8003fdc:	f7ff ff8e 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8003fe0:	20d5      	movs	r0, #213	; 0xd5
 8003fe2:	f7ff ff8b 	bl	8003efc <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8003fe6:	2080      	movs	r0, #128	; 0x80
 8003fe8:	f7ff ff88 	bl	8003efc <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8003fec:	20a8      	movs	r0, #168	; 0xa8
 8003fee:	f7ff ff85 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8003ff2:	201f      	movs	r0, #31
 8003ff4:	f7ff ff82 	bl	8003efc <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8003ff8:	20d3      	movs	r0, #211	; 0xd3
 8003ffa:	f7ff ff7f 	bl	8003efc <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8003ffe:	2000      	movs	r0, #0
 8004000:	f7ff ff7c 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8004004:	2040      	movs	r0, #64	; 0x40
 8004006:	f7ff ff79 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 800400a:	208d      	movs	r0, #141	; 0x8d
 800400c:	f7ff ff76 	bl	8003efc <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 8004010:	2014      	movs	r0, #20
 8004012:	f7ff ff73 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8004016:	2020      	movs	r0, #32
 8004018:	f7ff ff70 	bl	8003efc <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 800401c:	2000      	movs	r0, #0
 800401e:	f7ff ff6d 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8004022:	20a1      	movs	r0, #161	; 0xa1
 8004024:	f7ff ff6a 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8004028:	20c8      	movs	r0, #200	; 0xc8
 800402a:	f7ff ff67 	bl	8003efc <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 800402e:	20da      	movs	r0, #218	; 0xda
 8004030:	f7ff ff64 	bl	8003efc <ssd1306_command>
  ssd1306_command(0x02);
 8004034:	2002      	movs	r0, #2
 8004036:	f7ff ff61 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 800403a:	2081      	movs	r0, #129	; 0x81
 800403c:	f7ff ff5e 	bl	8003efc <ssd1306_command>
  ssd1306_command(0x8F);
 8004040:	208f      	movs	r0, #143	; 0x8f
 8004042:	f7ff ff5b 	bl	8003efc <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8004046:	20d9      	movs	r0, #217	; 0xd9
 8004048:	f7ff ff58 	bl	8003efc <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 800404c:	20f1      	movs	r0, #241	; 0xf1
 800404e:	f7ff ff55 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8004052:	20db      	movs	r0, #219	; 0xdb
 8004054:	f7ff ff52 	bl	8003efc <ssd1306_command>
  ssd1306_command(0x40);
 8004058:	2040      	movs	r0, #64	; 0x40
 800405a:	f7ff ff4f 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 800405e:	20a4      	movs	r0, #164	; 0xa4
 8004060:	f7ff ff4c 	bl	8003efc <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8004064:	20a6      	movs	r0, #166	; 0xa6
 8004066:	f7ff ff49 	bl	8003efc <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 800406a:	202e      	movs	r0, #46	; 0x2e
 800406c:	f7ff ff46 	bl	8003efc <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8004070:	20af      	movs	r0, #175	; 0xaf
 8004072:	f7ff ff43 	bl	8003efc <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	e013      	b.n	80040a4 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 800407c:	2300      	movs	r3, #0
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	e00a      	b.n	8004098 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8004082:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <oled_init+0xe0>)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	01db      	lsls	r3, r3, #7
 8004088:	441a      	add	r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	4413      	add	r3, r2
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	3301      	adds	r3, #1
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b7f      	cmp	r3, #127	; 0x7f
 800409c:	ddf1      	ble.n	8004082 <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3301      	adds	r3, #1
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	dde8      	ble.n	800407c <oled_init+0xa8>
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20004ddc 	.word	0x20004ddc

080040b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80040b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040be:	490e      	ldr	r1, [pc, #56]	; (80040f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040c0:	4a0e      	ldr	r2, [pc, #56]	; (80040fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c4:	e002      	b.n	80040cc <LoopCopyDataInit>

080040c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ca:	3304      	adds	r3, #4

080040cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040d0:	d3f9      	bcc.n	80040c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040d2:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040d4:	4c0b      	ldr	r4, [pc, #44]	; (8004104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d8:	e001      	b.n	80040de <LoopFillZerobss>

080040da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040dc:	3204      	adds	r2, #4

080040de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040e0:	d3fb      	bcc.n	80040da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80040e2:	f7ff fbef 	bl	80038c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040e6:	f00d fb69 	bl	80117bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ea:	f7fc fd71 	bl	8000bd0 <main>
  bx  lr    
 80040ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80040f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040f8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80040fc:	08014d28 	.word	0x08014d28
  ldr r2, =_sbss
 8004100:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004104:	2000573c 	.word	0x2000573c

08004108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004108:	e7fe      	b.n	8004108 <ADC_IRQHandler>
	...

0800410c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <HAL_Init+0x40>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <HAL_Init+0x40>)
 8004116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800411a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_Init+0x40>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_Init+0x40>)
 8004122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004128:	4b08      	ldr	r3, [pc, #32]	; (800414c <HAL_Init+0x40>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a07      	ldr	r2, [pc, #28]	; (800414c <HAL_Init+0x40>)
 800412e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004134:	2003      	movs	r0, #3
 8004136:	f000 f8fc 	bl	8004332 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800413a:	200f      	movs	r0, #15
 800413c:	f7ff fab0 	bl	80036a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004140:	f7ff f828 	bl	8003194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023c00 	.word	0x40023c00

08004150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_IncTick+0x20>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_IncTick+0x24>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4413      	add	r3, r2
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_IncTick+0x24>)
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2000001c 	.word	0x2000001c
 8004174:	20004fdc 	.word	0x20004fdc

08004178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return uwTick;
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_GetTick+0x14>)
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20004fdc 	.word	0x20004fdc

08004190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004198:	f7ff ffee 	bl	8004178 <HAL_GetTick>
 800419c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a8:	d005      	beq.n	80041b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <HAL_Delay+0x44>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041b6:	bf00      	nop
 80041b8:	f7ff ffde 	bl	8004178 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d8f7      	bhi.n	80041b8 <HAL_Delay+0x28>
  {
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2000001c 	.word	0x2000001c

080041d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <__NVIC_SetPriorityGrouping+0x44>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041f4:	4013      	ands	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800420a:	4a04      	ldr	r2, [pc, #16]	; (800421c <__NVIC_SetPriorityGrouping+0x44>)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	60d3      	str	r3, [r2, #12]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004224:	4b04      	ldr	r3, [pc, #16]	; (8004238 <__NVIC_GetPriorityGrouping+0x18>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	f003 0307 	and.w	r3, r3, #7
}
 800422e:	4618      	mov	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424a:	2b00      	cmp	r3, #0
 800424c:	db0b      	blt.n	8004266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	f003 021f 	and.w	r2, r3, #31
 8004254:	4907      	ldr	r1, [pc, #28]	; (8004274 <__NVIC_EnableIRQ+0x38>)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2001      	movs	r0, #1
 800425e:	fa00 f202 	lsl.w	r2, r0, r2
 8004262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	e000e100 	.word	0xe000e100

08004278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004288:	2b00      	cmp	r3, #0
 800428a:	db0a      	blt.n	80042a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	490c      	ldr	r1, [pc, #48]	; (80042c4 <__NVIC_SetPriority+0x4c>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	0112      	lsls	r2, r2, #4
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	440b      	add	r3, r1
 800429c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a0:	e00a      	b.n	80042b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	4908      	ldr	r1, [pc, #32]	; (80042c8 <__NVIC_SetPriority+0x50>)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	3b04      	subs	r3, #4
 80042b0:	0112      	lsls	r2, r2, #4
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	440b      	add	r3, r1
 80042b6:	761a      	strb	r2, [r3, #24]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000e100 	.word	0xe000e100
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	; 0x24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f1c3 0307 	rsb	r3, r3, #7
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	bf28      	it	cs
 80042ea:	2304      	movcs	r3, #4
 80042ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d902      	bls.n	80042fc <NVIC_EncodePriority+0x30>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3b03      	subs	r3, #3
 80042fa:	e000      	b.n	80042fe <NVIC_EncodePriority+0x32>
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43da      	mvns	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	401a      	ands	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	43d9      	mvns	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004324:	4313      	orrs	r3, r2
         );
}
 8004326:	4618      	mov	r0, r3
 8004328:	3724      	adds	r7, #36	; 0x24
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ff4c 	bl	80041d8 <__NVIC_SetPriorityGrouping>
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800435a:	f7ff ff61 	bl	8004220 <__NVIC_GetPriorityGrouping>
 800435e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	6978      	ldr	r0, [r7, #20]
 8004366:	f7ff ffb1 	bl	80042cc <NVIC_EncodePriority>
 800436a:	4602      	mov	r2, r0
 800436c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff ff80 	bl	8004278 <__NVIC_SetPriority>
}
 8004378:	bf00      	nop
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff ff54 	bl	800423c <__NVIC_EnableIRQ>
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043aa:	f7ff fee5 	bl	8004178 <HAL_GetTick>
 80043ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d008      	beq.n	80043ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e052      	b.n	8004474 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0216 	bic.w	r2, r2, #22
 80043dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <HAL_DMA_Abort+0x62>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0208 	bic.w	r2, r2, #8
 800440c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800441e:	e013      	b.n	8004448 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004420:	f7ff feaa 	bl	8004178 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b05      	cmp	r3, #5
 800442c:	d90c      	bls.n	8004448 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2203      	movs	r2, #3
 8004438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e015      	b.n	8004474 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e4      	bne.n	8004420 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	223f      	movs	r2, #63	; 0x3f
 800445c:	409a      	lsls	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d004      	beq.n	800449a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e00c      	b.n	80044b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2205      	movs	r2, #5
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b089      	sub	sp, #36	; 0x24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e16b      	b.n	80047b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044dc:	2201      	movs	r2, #1
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	f040 815a 	bne.w	80047ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b01      	cmp	r3, #1
 8004504:	d005      	beq.n	8004512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800450e:	2b02      	cmp	r3, #2
 8004510:	d130      	bne.n	8004574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	2203      	movs	r2, #3
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004548:	2201      	movs	r2, #1
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 0201 	and.w	r2, r3, #1
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b03      	cmp	r3, #3
 800457e:	d017      	beq.n	80045b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	2203      	movs	r2, #3
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d123      	bne.n	8004604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	08da      	lsrs	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3208      	adds	r2, #8
 80045c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	220f      	movs	r2, #15
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	08da      	lsrs	r2, r3, #3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3208      	adds	r2, #8
 80045fe:	69b9      	ldr	r1, [r7, #24]
 8004600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0203 	and.w	r2, r3, #3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80b4 	beq.w	80047ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	4b60      	ldr	r3, [pc, #384]	; (80047cc <HAL_GPIO_Init+0x30c>)
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	4a5f      	ldr	r2, [pc, #380]	; (80047cc <HAL_GPIO_Init+0x30c>)
 8004650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004654:	6453      	str	r3, [r2, #68]	; 0x44
 8004656:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <HAL_GPIO_Init+0x30c>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004662:	4a5b      	ldr	r2, [pc, #364]	; (80047d0 <HAL_GPIO_Init+0x310>)
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	3302      	adds	r3, #2
 800466a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	220f      	movs	r2, #15
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_GPIO_Init+0x314>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d02b      	beq.n	80046e6 <HAL_GPIO_Init+0x226>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_GPIO_Init+0x318>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d025      	beq.n	80046e2 <HAL_GPIO_Init+0x222>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a50      	ldr	r2, [pc, #320]	; (80047dc <HAL_GPIO_Init+0x31c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <HAL_GPIO_Init+0x21e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4f      	ldr	r2, [pc, #316]	; (80047e0 <HAL_GPIO_Init+0x320>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d019      	beq.n	80046da <HAL_GPIO_Init+0x21a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4e      	ldr	r2, [pc, #312]	; (80047e4 <HAL_GPIO_Init+0x324>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_GPIO_Init+0x216>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4d      	ldr	r2, [pc, #308]	; (80047e8 <HAL_GPIO_Init+0x328>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00d      	beq.n	80046d2 <HAL_GPIO_Init+0x212>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4c      	ldr	r2, [pc, #304]	; (80047ec <HAL_GPIO_Init+0x32c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <HAL_GPIO_Init+0x20e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4b      	ldr	r2, [pc, #300]	; (80047f0 <HAL_GPIO_Init+0x330>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_GPIO_Init+0x20a>
 80046c6:	2307      	movs	r3, #7
 80046c8:	e00e      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046ca:	2308      	movs	r3, #8
 80046cc:	e00c      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046ce:	2306      	movs	r3, #6
 80046d0:	e00a      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046d2:	2305      	movs	r3, #5
 80046d4:	e008      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046d6:	2304      	movs	r3, #4
 80046d8:	e006      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046da:	2303      	movs	r3, #3
 80046dc:	e004      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046de:	2302      	movs	r3, #2
 80046e0:	e002      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_GPIO_Init+0x228>
 80046e6:	2300      	movs	r3, #0
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	f002 0203 	and.w	r2, r2, #3
 80046ee:	0092      	lsls	r2, r2, #2
 80046f0:	4093      	lsls	r3, r2
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f8:	4935      	ldr	r1, [pc, #212]	; (80047d0 <HAL_GPIO_Init+0x310>)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	3302      	adds	r3, #2
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800472a:	4a32      	ldr	r2, [pc, #200]	; (80047f4 <HAL_GPIO_Init+0x334>)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004730:	4b30      	ldr	r3, [pc, #192]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800475a:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <HAL_GPIO_Init+0x334>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_GPIO_Init+0x334>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047a8:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <HAL_GPIO_Init+0x334>)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3301      	adds	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	f67f ae90 	bls.w	80044dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	3724      	adds	r7, #36	; 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40013800 	.word	0x40013800
 80047d4:	40020000 	.word	0x40020000
 80047d8:	40020400 	.word	0x40020400
 80047dc:	40020800 	.word	0x40020800
 80047e0:	40020c00 	.word	0x40020c00
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40021400 	.word	0x40021400
 80047ec:	40021800 	.word	0x40021800
 80047f0:	40021c00 	.word	0x40021c00
 80047f4:	40013c00 	.word	0x40013c00

080047f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	887b      	ldrh	r3, [r7, #2]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e001      	b.n	800481a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
 8004834:	4613      	mov	r3, r2
 8004836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004838:	787b      	ldrb	r3, [r7, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004844:	e003      	b.n	800484e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004846:	887b      	ldrh	r3, [r7, #2]
 8004848:	041a      	lsls	r2, r3, #16
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	619a      	str	r2, [r3, #24]
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d006      	beq.n	8004880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004872:	4a05      	ldr	r2, [pc, #20]	; (8004888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f806 	bl	800488c <HAL_GPIO_EXTI_Callback>
  }
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40013c00 	.word	0x40013c00

0800488c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80048a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a4:	b08f      	sub	sp, #60	; 0x3c
 80048a6:	af0a      	add	r7, sp, #40	; 0x28
 80048a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e054      	b.n	800495e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f00c fcc0 	bl	8011254 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2203      	movs	r2, #3
 80048d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f006 f95c 	bl	800abb0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	687e      	ldr	r6, [r7, #4]
 8004900:	466d      	mov	r5, sp
 8004902:	f106 0410 	add.w	r4, r6, #16
 8004906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800490a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800490c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800490e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004912:	e885 0003 	stmia.w	r5, {r0, r1}
 8004916:	1d33      	adds	r3, r6, #4
 8004918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800491a:	6838      	ldr	r0, [r7, #0]
 800491c:	f006 f8d6 	bl	800aacc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f006 f953 	bl	800abd2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	687e      	ldr	r6, [r7, #4]
 8004934:	466d      	mov	r5, sp
 8004936:	f106 0410 	add.w	r4, r6, #16
 800493a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800493c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800493e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004942:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004946:	e885 0003 	stmia.w	r5, {r0, r1}
 800494a:	1d33      	adds	r3, r6, #4
 800494c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800494e:	6838      	ldr	r0, [r7, #0]
 8004950:	f006 faba 	bl	800aec8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004966 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004966:	b590      	push	{r4, r7, lr}
 8004968:	b089      	sub	sp, #36	; 0x24
 800496a:	af04      	add	r7, sp, #16
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	4608      	mov	r0, r1
 8004970:	4611      	mov	r1, r2
 8004972:	461a      	mov	r2, r3
 8004974:	4603      	mov	r3, r0
 8004976:	70fb      	strb	r3, [r7, #3]
 8004978:	460b      	mov	r3, r1
 800497a:	70bb      	strb	r3, [r7, #2]
 800497c:	4613      	mov	r3, r2
 800497e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_HCD_HC_Init+0x28>
 800498a:	2302      	movs	r3, #2
 800498c:	e076      	b.n	8004a7c <HAL_HCD_HC_Init+0x116>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	333d      	adds	r3, #61	; 0x3d
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	3338      	adds	r3, #56	; 0x38
 80049b6:	787a      	ldrb	r2, [r7, #1]
 80049b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	212c      	movs	r1, #44	; 0x2c
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	3340      	adds	r3, #64	; 0x40
 80049c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049ca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3339      	adds	r3, #57	; 0x39
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	212c      	movs	r1, #44	; 0x2c
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	333f      	adds	r3, #63	; 0x3f
 80049ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80049f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	78ba      	ldrb	r2, [r7, #2]
 80049f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049fa:	b2d0      	uxtb	r0, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	212c      	movs	r1, #44	; 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	333a      	adds	r3, #58	; 0x3a
 8004a08:	4602      	mov	r2, r0
 8004a0a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004a0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da09      	bge.n	8004a28 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	212c      	movs	r1, #44	; 0x2c
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	333b      	adds	r3, #59	; 0x3b
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e008      	b.n	8004a3a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	333b      	adds	r3, #59	; 0x3b
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	333c      	adds	r3, #60	; 0x3c
 8004a48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a4c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	787c      	ldrb	r4, [r7, #1]
 8004a54:	78ba      	ldrb	r2, [r7, #2]
 8004a56:	78f9      	ldrb	r1, [r7, #3]
 8004a58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a5a:	9302      	str	r3, [sp, #8]
 8004a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4623      	mov	r3, r4
 8004a6a:	f006 fba7 	bl	800b1bc <USB_HC_Init>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd90      	pop	{r4, r7, pc}

08004a84 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_HCD_HC_Halt+0x1e>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e00f      	b.n	8004ac2 <HAL_HCD_HC_Halt+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f006 fde3 	bl	800b67e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	70fb      	strb	r3, [r7, #3]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	70bb      	strb	r3, [r7, #2]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	333b      	adds	r3, #59	; 0x3b
 8004af4:	78ba      	ldrb	r2, [r7, #2]
 8004af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	212c      	movs	r1, #44	; 0x2c
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	333f      	adds	r3, #63	; 0x3f
 8004b06:	787a      	ldrb	r2, [r7, #1]
 8004b08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004b0a:	7c3b      	ldrb	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d112      	bne.n	8004b36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	212c      	movs	r1, #44	; 0x2c
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3342      	adds	r3, #66	; 0x42
 8004b1e:	2203      	movs	r2, #3
 8004b20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	212c      	movs	r1, #44	; 0x2c
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	333d      	adds	r3, #61	; 0x3d
 8004b30:	7f3a      	ldrb	r2, [r7, #28]
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e008      	b.n	8004b48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	3342      	adds	r3, #66	; 0x42
 8004b44:	2202      	movs	r2, #2
 8004b46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	f200 80c6 	bhi.w	8004cdc <HAL_HCD_HC_SubmitRequest+0x210>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004cc9 	.word	0x08004cc9
 8004b60:	08004bcd 	.word	0x08004bcd
 8004b64:	08004c4b 	.word	0x08004c4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b68:	7c3b      	ldrb	r3, [r7, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	f040 80b8 	bne.w	8004ce0 <HAL_HCD_HC_SubmitRequest+0x214>
 8004b70:	78bb      	ldrb	r3, [r7, #2]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 80b4 	bne.w	8004ce0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004b78:	8b3b      	ldrh	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	212c      	movs	r1, #44	; 0x2c
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3355      	adds	r3, #85	; 0x55
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3355      	adds	r3, #85	; 0x55
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	212c      	movs	r1, #44	; 0x2c
 8004baa:	fb01 f303 	mul.w	r3, r1, r3
 8004bae:	4413      	add	r3, r2
 8004bb0:	3342      	adds	r3, #66	; 0x42
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004bb6:	e093      	b.n	8004ce0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	212c      	movs	r1, #44	; 0x2c
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3342      	adds	r3, #66	; 0x42
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
      break;
 8004bca:	e089      	b.n	8004ce0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004bcc:	78bb      	ldrb	r3, [r7, #2]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d11d      	bne.n	8004c0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	212c      	movs	r1, #44	; 0x2c
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	3355      	adds	r3, #85	; 0x55
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3342      	adds	r3, #66	; 0x42
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004bf8:	e073      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3342      	adds	r3, #66	; 0x42
 8004c08:	2202      	movs	r2, #2
 8004c0a:	701a      	strb	r2, [r3, #0]
      break;
 8004c0c:	e069      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	3354      	adds	r3, #84	; 0x54
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3342      	adds	r3, #66	; 0x42
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
      break;
 8004c34:	e055      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	3342      	adds	r3, #66	; 0x42
 8004c44:	2202      	movs	r2, #2
 8004c46:	701a      	strb	r2, [r3, #0]
      break;
 8004c48:	e04b      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c4a:	78bb      	ldrb	r3, [r7, #2]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d11d      	bne.n	8004c8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	212c      	movs	r1, #44	; 0x2c
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3355      	adds	r3, #85	; 0x55
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	212c      	movs	r1, #44	; 0x2c
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	3342      	adds	r3, #66	; 0x42
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c76:	e034      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3342      	adds	r3, #66	; 0x42
 8004c86:	2202      	movs	r2, #2
 8004c88:	701a      	strb	r2, [r3, #0]
      break;
 8004c8a:	e02a      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	212c      	movs	r1, #44	; 0x2c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3354      	adds	r3, #84	; 0x54
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	3342      	adds	r3, #66	; 0x42
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
      break;
 8004cb2:	e016      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3342      	adds	r3, #66	; 0x42
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	701a      	strb	r2, [r3, #0]
      break;
 8004cc6:	e00c      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3342      	adds	r3, #66	; 0x42
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004cdc:	bf00      	nop
 8004cde:	e000      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004ce0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3344      	adds	r3, #68	; 0x44
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	8b3a      	ldrh	r2, [r7, #24]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	202c      	movs	r0, #44	; 0x2c
 8004cfc:	fb00 f303 	mul.w	r3, r0, r3
 8004d00:	440b      	add	r3, r1
 8004d02:	334c      	adds	r3, #76	; 0x4c
 8004d04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	3360      	adds	r3, #96	; 0x60
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	212c      	movs	r1, #44	; 0x2c
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	3350      	adds	r3, #80	; 0x50
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	3339      	adds	r3, #57	; 0x39
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	3361      	adds	r3, #97	; 0x61
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	222c      	movs	r2, #44	; 0x2c
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	3338      	adds	r3, #56	; 0x38
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	18d1      	adds	r1, r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	f006 fb36 	bl	800b3d8 <USB_HC_StartXfer>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop

08004d78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f006 f859 	bl	800ae46 <USB_GetMode>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	f040 80f6 	bne.w	8004f88 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f006 f83d 	bl	800ae20 <USB_ReadInterrupts>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80ec 	beq.w	8004f86 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f006 f834 	bl	800ae20 <USB_ReadInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc2:	d104      	bne.n	8004dce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f006 f824 	bl	800ae20 <USB_ReadInterrupts>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de2:	d104      	bne.n	8004dee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f006 f814 	bl	800ae20 <USB_ReadInterrupts>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e02:	d104      	bne.n	8004e0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f006 f804 	bl	800ae20 <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d103      	bne.n	8004e2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2202      	movs	r2, #2
 8004e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f005 fff6 	bl	800ae20 <USB_ReadInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3e:	d11c      	bne.n	8004e7a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e5a:	2110      	movs	r1, #16
 8004e5c:	6938      	ldr	r0, [r7, #16]
 8004e5e:	f005 ff05 	bl	800ac6c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004e62:	6938      	ldr	r0, [r7, #16]
 8004e64:	f005 ff26 	bl	800acb4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f006 f8de 	bl	800b030 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f00c fa6b 	bl	8011350 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 ffce 	bl	800ae20 <USB_ReadInterrupts>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e8e:	d102      	bne.n	8004e96 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 fa03 	bl	800629c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f005 ffc0 	bl	800ae20 <USB_ReadInterrupts>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d106      	bne.n	8004eb8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f00c fa34 	bl	8011318 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f005 ffaf 	bl	800ae20 <USB_ReadInterrupts>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d101      	bne.n	8004ed0 <HAL_HCD_IRQHandler+0x158>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_HCD_IRQHandler+0x15a>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d012      	beq.n	8004efc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0210 	bic.w	r2, r2, #16
 8004ee4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f001 f906 	bl	80060f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0210 	orr.w	r2, r2, #16
 8004efa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f005 ff8d 	bl	800ae20 <USB_ReadInterrupts>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f10:	d13a      	bne.n	8004f88 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f006 fba0 	bl	800b65c <USB_HC_ReadInterrupt>
 8004f1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e025      	b.n	8004f70 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d018      	beq.n	8004f6a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4e:	d106      	bne.n	8004f5e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8ab 	bl	80050b2 <HCD_HC_IN_IRQHandler>
 8004f5c:	e005      	b.n	8004f6a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fcc6 	bl	80058f6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3d4      	bcc.n	8004f24 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f82:	615a      	str	r2, [r3, #20]
 8004f84:	e000      	b.n	8004f88 <HAL_HCD_IRQHandler+0x210>
      return;
 8004f86:	bf00      	nop
    }
  }
}
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_HCD_Start+0x16>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e013      	b.n	8004fcc <HAL_HCD_Start+0x3e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f006 f8a0 	bl	800b0f8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f005 fde6 	bl	800ab8e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_HCD_Stop+0x16>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e00d      	b.n	8005006 <HAL_HCD_Stop+0x32>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f006 fc9a 	bl	800b930 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f006 f842 	bl	800b0a4 <USB_ResetPort>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	212c      	movs	r1, #44	; 0x2c
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	3360      	adds	r3, #96	; 0x60
 8005044:	781b      	ldrb	r3, [r3, #0]
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	212c      	movs	r1, #44	; 0x2c
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	4413      	add	r3, r2
 800506a:	3350      	adds	r3, #80	; 0x50
 800506c:	681b      	ldr	r3, [r3, #0]
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f006 f886 	bl	800b198 <USB_GetCurrentFrame>
 800508c:	4603      	mov	r3, r0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f006 f861 	bl	800b16a <USB_GetHostSpeed>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d119      	bne.n	8005116 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ee:	461a      	mov	r2, r3
 80050f0:	2304      	movs	r3, #4
 80050f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	440a      	add	r2, r1
 800510a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800510e:	f043 0302 	orr.w	r3, r3, #2
 8005112:	60d3      	str	r3, [r2, #12]
 8005114:	e101      	b.n	800531a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512c:	d12b      	bne.n	8005186 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513a:	461a      	mov	r2, r3
 800513c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005140:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	212c      	movs	r1, #44	; 0x2c
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	4413      	add	r3, r2
 800514e:	3361      	adds	r3, #97	; 0x61
 8005150:	2207      	movs	r2, #7
 8005152:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	440a      	add	r2, r1
 800516a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f006 fa7d 	bl	800b67e <USB_HC_Halt>
 8005184:	e0c9      	b.n	800531a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b20      	cmp	r3, #32
 800519a:	d109      	bne.n	80051b0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a8:	461a      	mov	r2, r3
 80051aa:	2320      	movs	r3, #32
 80051ac:	6093      	str	r3, [r2, #8]
 80051ae:	e0b4      	b.n	800531a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d133      	bne.n	800522e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	212c      	movs	r1, #44	; 0x2c
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	3361      	adds	r3, #97	; 0x61
 80051f4:	2205      	movs	r2, #5
 80051f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005204:	461a      	mov	r2, r3
 8005206:	2310      	movs	r3, #16
 8005208:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	461a      	mov	r2, r3
 8005218:	2308      	movs	r3, #8
 800521a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f006 fa29 	bl	800b67e <USB_HC_Halt>
 800522c:	e075      	b.n	800531a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d134      	bne.n	80052b0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	440a      	add	r2, r1
 800525c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	212c      	movs	r1, #44	; 0x2c
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	3361      	adds	r3, #97	; 0x61
 8005274:	2208      	movs	r2, #8
 8005276:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005284:	461a      	mov	r2, r3
 8005286:	2310      	movs	r3, #16
 8005288:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005296:	461a      	mov	r2, r3
 8005298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800529c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f006 f9e8 	bl	800b67e <USB_HC_Halt>
 80052ae:	e034      	b.n	800531a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b80      	cmp	r3, #128	; 0x80
 80052c4:	d129      	bne.n	800531a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e0:	f043 0302 	orr.w	r3, r3, #2
 80052e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	212c      	movs	r1, #44	; 0x2c
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	3361      	adds	r3, #97	; 0x61
 80052f4:	2206      	movs	r2, #6
 80052f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f006 f9bb 	bl	800b67e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	461a      	mov	r2, r3
 8005316:	2380      	movs	r3, #128	; 0x80
 8005318:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005330:	d122      	bne.n	8005378 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	440a      	add	r2, r1
 8005348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f006 f98e 	bl	800b67e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536e:	461a      	mov	r2, r3
 8005370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005374:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005376:	e2ba      	b.n	80058ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b01      	cmp	r3, #1
 800538c:	f040 811b 	bne.w	80055c6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d019      	beq.n	80053cc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	212c      	movs	r1, #44	; 0x2c
 800539e:	fb01 f303 	mul.w	r3, r1, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	3348      	adds	r3, #72	; 0x48
 80053a6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	0159      	lsls	r1, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	440b      	add	r3, r1
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053ba:	1ad2      	subs	r2, r2, r3
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	202c      	movs	r0, #44	; 0x2c
 80053c2:	fb00 f303 	mul.w	r3, r0, r3
 80053c6:	440b      	add	r3, r1
 80053c8:	3350      	adds	r3, #80	; 0x50
 80053ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	212c      	movs	r1, #44	; 0x2c
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	4413      	add	r3, r2
 80053d8:	3361      	adds	r3, #97	; 0x61
 80053da:	2201      	movs	r2, #1
 80053dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	212c      	movs	r1, #44	; 0x2c
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	4413      	add	r3, r2
 80053ea:	335c      	adds	r3, #92	; 0x5c
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fc:	461a      	mov	r2, r3
 80053fe:	2301      	movs	r3, #1
 8005400:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	212c      	movs	r1, #44	; 0x2c
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	333f      	adds	r3, #63	; 0x3f
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	212c      	movs	r1, #44	; 0x2c
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	4413      	add	r3, r2
 8005422:	333f      	adds	r3, #63	; 0x3f
 8005424:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005426:	2b02      	cmp	r3, #2
 8005428:	d121      	bne.n	800546e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	440a      	add	r2, r1
 8005440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f006 f912 	bl	800b67e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005466:	461a      	mov	r2, r3
 8005468:	2310      	movs	r3, #16
 800546a:	6093      	str	r3, [r2, #8]
 800546c:	e066      	b.n	800553c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	212c      	movs	r1, #44	; 0x2c
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	4413      	add	r3, r2
 800547a:	333f      	adds	r3, #63	; 0x3f
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d127      	bne.n	80054d2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	4413      	add	r3, r2
 800548a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	440a      	add	r2, r1
 8005498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054a0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	212c      	movs	r1, #44	; 0x2c
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	3360      	adds	r3, #96	; 0x60
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	b2d9      	uxtb	r1, r3
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	202c      	movs	r0, #44	; 0x2c
 80054be:	fb00 f303 	mul.w	r3, r0, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	3360      	adds	r3, #96	; 0x60
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f00b ff4e 	bl	801136c <HAL_HCD_HC_NotifyURBChange_Callback>
 80054d0:	e034      	b.n	800553c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	333f      	adds	r3, #63	; 0x3f
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d12a      	bne.n	800553c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	212c      	movs	r1, #44	; 0x2c
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	3360      	adds	r3, #96	; 0x60
 80054f4:	2201      	movs	r2, #1
 80054f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	212c      	movs	r1, #44	; 0x2c
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	3354      	adds	r3, #84	; 0x54
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	f083 0301 	eor.w	r3, r3, #1
 800550c:	b2d8      	uxtb	r0, r3
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	212c      	movs	r1, #44	; 0x2c
 8005514:	fb01 f303 	mul.w	r3, r1, r3
 8005518:	4413      	add	r3, r2
 800551a:	3354      	adds	r3, #84	; 0x54
 800551c:	4602      	mov	r2, r0
 800551e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	b2d9      	uxtb	r1, r3
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	202c      	movs	r0, #44	; 0x2c
 800552a:	fb00 f303 	mul.w	r3, r0, r3
 800552e:	4413      	add	r3, r2
 8005530:	3360      	adds	r3, #96	; 0x60
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f00b ff18 	bl	801136c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d12b      	bne.n	800559c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	212c      	movs	r1, #44	; 0x2c
 800554a:	fb01 f303 	mul.w	r3, r1, r3
 800554e:	4413      	add	r3, r2
 8005550:	3348      	adds	r3, #72	; 0x48
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	202c      	movs	r0, #44	; 0x2c
 800555a:	fb00 f202 	mul.w	r2, r0, r2
 800555e:	440a      	add	r2, r1
 8005560:	3240      	adds	r2, #64	; 0x40
 8005562:	8812      	ldrh	r2, [r2, #0]
 8005564:	fbb3 f3f2 	udiv	r3, r3, r2
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 81be 	beq.w	80058ee <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	212c      	movs	r1, #44	; 0x2c
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	3354      	adds	r3, #84	; 0x54
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	f083 0301 	eor.w	r3, r3, #1
 8005586:	b2d8      	uxtb	r0, r3
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	212c      	movs	r1, #44	; 0x2c
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	4413      	add	r3, r2
 8005594:	3354      	adds	r3, #84	; 0x54
 8005596:	4602      	mov	r2, r0
 8005598:	701a      	strb	r2, [r3, #0]
}
 800559a:	e1a8      	b.n	80058ee <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	212c      	movs	r1, #44	; 0x2c
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	3354      	adds	r3, #84	; 0x54
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f083 0301 	eor.w	r3, r3, #1
 80055b0:	b2d8      	uxtb	r0, r3
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	212c      	movs	r1, #44	; 0x2c
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	4413      	add	r3, r2
 80055be:	3354      	adds	r3, #84	; 0x54
 80055c0:	4602      	mov	r2, r0
 80055c2:	701a      	strb	r2, [r3, #0]
}
 80055c4:	e193      	b.n	80058ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b02      	cmp	r3, #2
 80055da:	f040 8106 	bne.w	80057ea <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f8:	f023 0302 	bic.w	r3, r3, #2
 80055fc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	212c      	movs	r1, #44	; 0x2c
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	3361      	adds	r3, #97	; 0x61
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d109      	bne.n	8005626 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	212c      	movs	r1, #44	; 0x2c
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	3360      	adds	r3, #96	; 0x60
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	e0c9      	b.n	80057ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	fb01 f303 	mul.w	r3, r1, r3
 8005630:	4413      	add	r3, r2
 8005632:	3361      	adds	r3, #97	; 0x61
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b05      	cmp	r3, #5
 8005638:	d109      	bne.n	800564e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	212c      	movs	r1, #44	; 0x2c
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	3360      	adds	r3, #96	; 0x60
 8005648:	2205      	movs	r2, #5
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e0b5      	b.n	80057ba <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	212c      	movs	r1, #44	; 0x2c
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	4413      	add	r3, r2
 800565a:	3361      	adds	r3, #97	; 0x61
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b06      	cmp	r3, #6
 8005660:	d009      	beq.n	8005676 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	212c      	movs	r1, #44	; 0x2c
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	3361      	adds	r3, #97	; 0x61
 8005670:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005672:	2b08      	cmp	r3, #8
 8005674:	d150      	bne.n	8005718 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	212c      	movs	r1, #44	; 0x2c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	335c      	adds	r3, #92	; 0x5c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	202c      	movs	r0, #44	; 0x2c
 800568e:	fb00 f303 	mul.w	r3, r0, r3
 8005692:	440b      	add	r3, r1
 8005694:	335c      	adds	r3, #92	; 0x5c
 8005696:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	212c      	movs	r1, #44	; 0x2c
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	4413      	add	r3, r2
 80056a4:	335c      	adds	r3, #92	; 0x5c
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d912      	bls.n	80056d2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	212c      	movs	r1, #44	; 0x2c
 80056b2:	fb01 f303 	mul.w	r3, r1, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	335c      	adds	r3, #92	; 0x5c
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	212c      	movs	r1, #44	; 0x2c
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	4413      	add	r3, r2
 80056ca:	3360      	adds	r3, #96	; 0x60
 80056cc:	2204      	movs	r2, #4
 80056ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056d0:	e073      	b.n	80057ba <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	3360      	adds	r3, #96	; 0x60
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056fa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005702:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005716:	e050      	b.n	80057ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	212c      	movs	r1, #44	; 0x2c
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	4413      	add	r3, r2
 8005724:	3361      	adds	r3, #97	; 0x61
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d122      	bne.n	8005772 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	212c      	movs	r1, #44	; 0x2c
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	3360      	adds	r3, #96	; 0x60
 800573a:	2202      	movs	r2, #2
 800573c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005754:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800575c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	461a      	mov	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e023      	b.n	80057ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	212c      	movs	r1, #44	; 0x2c
 8005778:	fb01 f303 	mul.w	r3, r1, r3
 800577c:	4413      	add	r3, r2
 800577e:	3361      	adds	r3, #97	; 0x61
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b07      	cmp	r3, #7
 8005784:	d119      	bne.n	80057ba <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	212c      	movs	r1, #44	; 0x2c
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	4413      	add	r3, r2
 8005792:	335c      	adds	r3, #92	; 0x5c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	202c      	movs	r0, #44	; 0x2c
 800579e:	fb00 f303 	mul.w	r3, r0, r3
 80057a2:	440b      	add	r3, r1
 80057a4:	335c      	adds	r3, #92	; 0x5c
 80057a6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	212c      	movs	r1, #44	; 0x2c
 80057ae:	fb01 f303 	mul.w	r3, r1, r3
 80057b2:	4413      	add	r3, r2
 80057b4:	3360      	adds	r3, #96	; 0x60
 80057b6:	2204      	movs	r2, #4
 80057b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	461a      	mov	r2, r3
 80057c8:	2302      	movs	r3, #2
 80057ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	b2d9      	uxtb	r1, r3
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	202c      	movs	r0, #44	; 0x2c
 80057d6:	fb00 f303 	mul.w	r3, r0, r3
 80057da:	4413      	add	r3, r2
 80057dc:	3360      	adds	r3, #96	; 0x60
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f00b fdc2 	bl	801136c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057e8:	e081      	b.n	80058ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d176      	bne.n	80058ee <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	212c      	movs	r1, #44	; 0x2c
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	333f      	adds	r3, #63	; 0x3f
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d121      	bne.n	8005858 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	212c      	movs	r1, #44	; 0x2c
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	4413      	add	r3, r2
 8005820:	335c      	adds	r3, #92	; 0x5c
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4413      	add	r3, r2
 800582e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	0151      	lsls	r1, r2, #5
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	440a      	add	r2, r1
 800583c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005840:	f043 0302 	orr.w	r3, r3, #2
 8005844:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f005 ff14 	bl	800b67e <USB_HC_Halt>
 8005856:	e041      	b.n	80058dc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	212c      	movs	r1, #44	; 0x2c
 800585e:	fb01 f303 	mul.w	r3, r1, r3
 8005862:	4413      	add	r3, r2
 8005864:	333f      	adds	r3, #63	; 0x3f
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d009      	beq.n	8005880 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	212c      	movs	r1, #44	; 0x2c
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	333f      	adds	r3, #63	; 0x3f
 800587a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800587c:	2b02      	cmp	r3, #2
 800587e:	d12d      	bne.n	80058dc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	212c      	movs	r1, #44	; 0x2c
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	4413      	add	r3, r2
 800588c:	335c      	adds	r3, #92	; 0x5c
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d120      	bne.n	80058dc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	212c      	movs	r1, #44	; 0x2c
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	3361      	adds	r3, #97	; 0x61
 80058a8:	2203      	movs	r2, #3
 80058aa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c6:	f043 0302 	orr.w	r3, r3, #2
 80058ca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	4611      	mov	r1, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f005 fed1 	bl	800b67e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e8:	461a      	mov	r2, r3
 80058ea:	2310      	movs	r3, #16
 80058ec:	6093      	str	r3, [r2, #8]
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b088      	sub	sp, #32
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b04      	cmp	r3, #4
 8005924:	d119      	bne.n	800595a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	461a      	mov	r2, r3
 8005934:	2304      	movs	r3, #4
 8005936:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	440a      	add	r2, r1
 800594e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005952:	f043 0302 	orr.w	r3, r3, #2
 8005956:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005958:	e3ca      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b20      	cmp	r3, #32
 800596e:	d13e      	bne.n	80059ee <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597c:	461a      	mov	r2, r3
 800597e:	2320      	movs	r3, #32
 8005980:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	212c      	movs	r1, #44	; 0x2c
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	333d      	adds	r3, #61	; 0x3d
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b01      	cmp	r3, #1
 8005994:	f040 83ac 	bne.w	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	212c      	movs	r1, #44	; 0x2c
 800599e:	fb01 f303 	mul.w	r3, r1, r3
 80059a2:	4413      	add	r3, r2
 80059a4:	333d      	adds	r3, #61	; 0x3d
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	212c      	movs	r1, #44	; 0x2c
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	4413      	add	r3, r2
 80059b6:	3360      	adds	r3, #96	; 0x60
 80059b8:	2202      	movs	r2, #2
 80059ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d6:	f043 0302 	orr.w	r3, r3, #2
 80059da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f005 fe49 	bl	800b67e <USB_HC_Halt>
}
 80059ec:	e380      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a04:	d122      	bne.n	8005a4c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	4611      	mov	r1, r2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f005 fe24 	bl	800b67e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a42:	461a      	mov	r2, r3
 8005a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a48:	6093      	str	r3, [r2, #8]
}
 8005a4a:	e351      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d150      	bne.n	8005b04 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	212c      	movs	r1, #44	; 0x2c
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	335c      	adds	r3, #92	; 0x5c
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d111      	bne.n	8005aae <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	212c      	movs	r1, #44	; 0x2c
 8005a90:	fb01 f303 	mul.w	r3, r1, r3
 8005a94:	4413      	add	r3, r2
 8005a96:	333d      	adds	r3, #61	; 0x3d
 8005a98:	2201      	movs	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2340      	movs	r3, #64	; 0x40
 8005aac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ac8:	f043 0302 	orr.w	r3, r3, #2
 8005acc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f005 fdd0 	bl	800b67e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	461a      	mov	r2, r3
 8005aec:	2301      	movs	r3, #1
 8005aee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	212c      	movs	r1, #44	; 0x2c
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	3361      	adds	r3, #97	; 0x61
 8005afe:	2201      	movs	r2, #1
 8005b00:	701a      	strb	r2, [r3, #0]
}
 8005b02:	e2f5      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d13c      	bne.n	8005b94 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	212c      	movs	r1, #44	; 0x2c
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	3361      	adds	r3, #97	; 0x61
 8005b28:	2204      	movs	r2, #4
 8005b2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	212c      	movs	r1, #44	; 0x2c
 8005b32:	fb01 f303 	mul.w	r3, r1, r3
 8005b36:	4413      	add	r3, r2
 8005b38:	333d      	adds	r3, #61	; 0x3d
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	212c      	movs	r1, #44	; 0x2c
 8005b44:	fb01 f303 	mul.w	r3, r1, r3
 8005b48:	4413      	add	r3, r2
 8005b4a:	335c      	adds	r3, #92	; 0x5c
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6a:	f043 0302 	orr.w	r3, r3, #2
 8005b6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f005 fd7f 	bl	800b67e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2340      	movs	r3, #64	; 0x40
 8005b90:	6093      	str	r3, [r2, #8]
}
 8005b92:	e2ad      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d12a      	bne.n	8005c00 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2308      	movs	r3, #8
 8005bba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd6:	f043 0302 	orr.w	r3, r3, #2
 8005bda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f005 fd49 	bl	800b67e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	212c      	movs	r1, #44	; 0x2c
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3361      	adds	r3, #97	; 0x61
 8005bfa:	2205      	movs	r2, #5
 8005bfc:	701a      	strb	r2, [r3, #0]
}
 8005bfe:	e277      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d150      	bne.n	8005cb8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	212c      	movs	r1, #44	; 0x2c
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	4413      	add	r3, r2
 8005c22:	335c      	adds	r3, #92	; 0x5c
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	212c      	movs	r1, #44	; 0x2c
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	3361      	adds	r3, #97	; 0x61
 8005c36:	2203      	movs	r2, #3
 8005c38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	212c      	movs	r1, #44	; 0x2c
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	4413      	add	r3, r2
 8005c46:	333d      	adds	r3, #61	; 0x3d
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d112      	bne.n	8005c74 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	212c      	movs	r1, #44	; 0x2c
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	4413      	add	r3, r2
 8005c5a:	333c      	adds	r3, #60	; 0x3c
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d108      	bne.n	8005c74 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	212c      	movs	r1, #44	; 0x2c
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	333d      	adds	r3, #61	; 0x3d
 8005c70:	2201      	movs	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c8e:	f043 0302 	orr.w	r3, r3, #2
 8005c92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f005 fced 	bl	800b67e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	6093      	str	r3, [r2, #8]
}
 8005cb6:	e21b      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cca:	2b80      	cmp	r3, #128	; 0x80
 8005ccc:	d174      	bne.n	8005db8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d121      	bne.n	8005d1a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	212c      	movs	r1, #44	; 0x2c
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3361      	adds	r3, #97	; 0x61
 8005ce4:	2206      	movs	r2, #6
 8005ce6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d02:	f043 0302 	orr.w	r3, r3, #2
 8005d06:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	4611      	mov	r1, r2
 8005d12:	4618      	mov	r0, r3
 8005d14:	f005 fcb3 	bl	800b67e <USB_HC_Halt>
 8005d18:	e044      	b.n	8005da4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	212c      	movs	r1, #44	; 0x2c
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	4413      	add	r3, r2
 8005d26:	335c      	adds	r3, #92	; 0x5c
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	202c      	movs	r0, #44	; 0x2c
 8005d32:	fb00 f303 	mul.w	r3, r0, r3
 8005d36:	440b      	add	r3, r1
 8005d38:	335c      	adds	r3, #92	; 0x5c
 8005d3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	212c      	movs	r1, #44	; 0x2c
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	335c      	adds	r3, #92	; 0x5c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d920      	bls.n	8005d92 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	212c      	movs	r1, #44	; 0x2c
 8005d56:	fb01 f303 	mul.w	r3, r1, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	335c      	adds	r3, #92	; 0x5c
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	212c      	movs	r1, #44	; 0x2c
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3360      	adds	r3, #96	; 0x60
 8005d70:	2204      	movs	r2, #4
 8005d72:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	b2d9      	uxtb	r1, r3
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	202c      	movs	r0, #44	; 0x2c
 8005d7e:	fb00 f303 	mul.w	r3, r0, r3
 8005d82:	4413      	add	r3, r2
 8005d84:	3360      	adds	r3, #96	; 0x60
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f00b faee 	bl	801136c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005d90:	e008      	b.n	8005da4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	212c      	movs	r1, #44	; 0x2c
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3360      	adds	r3, #96	; 0x60
 8005da0:	2202      	movs	r2, #2
 8005da2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	461a      	mov	r2, r3
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	6093      	str	r3, [r2, #8]
}
 8005db6:	e19b      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d134      	bne.n	8005e3a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f005 fc3f 	bl	800b67e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2310      	movs	r3, #16
 8005e10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	212c      	movs	r1, #44	; 0x2c
 8005e2c:	fb01 f303 	mul.w	r3, r1, r3
 8005e30:	4413      	add	r3, r2
 8005e32:	3361      	adds	r3, #97	; 0x61
 8005e34:	2208      	movs	r2, #8
 8005e36:	701a      	strb	r2, [r3, #0]
}
 8005e38:	e15a      	b.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	f040 814f 	bne.w	80060f0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e6c:	f023 0302 	bic.w	r3, r3, #2
 8005e70:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	212c      	movs	r1, #44	; 0x2c
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3361      	adds	r3, #97	; 0x61
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d17d      	bne.n	8005f82 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	212c      	movs	r1, #44	; 0x2c
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	4413      	add	r3, r2
 8005e92:	3360      	adds	r3, #96	; 0x60
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	212c      	movs	r1, #44	; 0x2c
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	333f      	adds	r3, #63	; 0x3f
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d00a      	beq.n	8005ec2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	212c      	movs	r1, #44	; 0x2c
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	333f      	adds	r3, #63	; 0x3f
 8005eba:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	f040 8100 	bne.w	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d113      	bne.n	8005ef2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	212c      	movs	r1, #44	; 0x2c
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	3355      	adds	r3, #85	; 0x55
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f083 0301 	eor.w	r3, r3, #1
 8005ede:	b2d8      	uxtb	r0, r3
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	212c      	movs	r1, #44	; 0x2c
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	4413      	add	r3, r2
 8005eec:	3355      	adds	r3, #85	; 0x55
 8005eee:	4602      	mov	r2, r0
 8005ef0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	f040 80e3 	bne.w	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	212c      	movs	r1, #44	; 0x2c
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	334c      	adds	r3, #76	; 0x4c
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80d8 	beq.w	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	212c      	movs	r1, #44	; 0x2c
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	334c      	adds	r3, #76	; 0x4c
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	202c      	movs	r0, #44	; 0x2c
 8005f28:	fb00 f202 	mul.w	r2, r0, r2
 8005f2c:	440a      	add	r2, r1
 8005f2e:	3240      	adds	r2, #64	; 0x40
 8005f30:	8812      	ldrh	r2, [r2, #0]
 8005f32:	4413      	add	r3, r2
 8005f34:	3b01      	subs	r3, #1
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	202c      	movs	r0, #44	; 0x2c
 8005f3c:	fb00 f202 	mul.w	r2, r0, r2
 8005f40:	440a      	add	r2, r1
 8005f42:	3240      	adds	r2, #64	; 0x40
 8005f44:	8812      	ldrh	r2, [r2, #0]
 8005f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 80b5 	beq.w	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	212c      	movs	r1, #44	; 0x2c
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	3355      	adds	r3, #85	; 0x55
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f083 0301 	eor.w	r3, r3, #1
 8005f6c:	b2d8      	uxtb	r0, r3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	212c      	movs	r1, #44	; 0x2c
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	3355      	adds	r3, #85	; 0x55
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	e09f      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	212c      	movs	r1, #44	; 0x2c
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3361      	adds	r3, #97	; 0x61
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d109      	bne.n	8005faa <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	212c      	movs	r1, #44	; 0x2c
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	3360      	adds	r3, #96	; 0x60
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	e08b      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	212c      	movs	r1, #44	; 0x2c
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3361      	adds	r3, #97	; 0x61
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d109      	bne.n	8005fd2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	212c      	movs	r1, #44	; 0x2c
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	4413      	add	r3, r2
 8005fca:	3360      	adds	r3, #96	; 0x60
 8005fcc:	2202      	movs	r2, #2
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	e077      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	212c      	movs	r1, #44	; 0x2c
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	3361      	adds	r3, #97	; 0x61
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	d109      	bne.n	8005ffa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	212c      	movs	r1, #44	; 0x2c
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3360      	adds	r3, #96	; 0x60
 8005ff4:	2205      	movs	r2, #5
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e063      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	212c      	movs	r1, #44	; 0x2c
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	4413      	add	r3, r2
 8006006:	3361      	adds	r3, #97	; 0x61
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d009      	beq.n	8006022 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	212c      	movs	r1, #44	; 0x2c
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	4413      	add	r3, r2
 800601a:	3361      	adds	r3, #97	; 0x61
 800601c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800601e:	2b08      	cmp	r3, #8
 8006020:	d14f      	bne.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	212c      	movs	r1, #44	; 0x2c
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	4413      	add	r3, r2
 800602e:	335c      	adds	r3, #92	; 0x5c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	202c      	movs	r0, #44	; 0x2c
 800603a:	fb00 f303 	mul.w	r3, r0, r3
 800603e:	440b      	add	r3, r1
 8006040:	335c      	adds	r3, #92	; 0x5c
 8006042:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	212c      	movs	r1, #44	; 0x2c
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	4413      	add	r3, r2
 8006050:	335c      	adds	r3, #92	; 0x5c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d912      	bls.n	800607e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	212c      	movs	r1, #44	; 0x2c
 800605e:	fb01 f303 	mul.w	r3, r1, r3
 8006062:	4413      	add	r3, r2
 8006064:	335c      	adds	r3, #92	; 0x5c
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	212c      	movs	r1, #44	; 0x2c
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	4413      	add	r3, r2
 8006076:	3360      	adds	r3, #96	; 0x60
 8006078:	2204      	movs	r2, #4
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e021      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	212c      	movs	r1, #44	; 0x2c
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	4413      	add	r3, r2
 800608a:	3360      	adds	r3, #96	; 0x60
 800608c:	2202      	movs	r2, #2
 800608e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060a6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060bc:	461a      	mov	r2, r3
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	461a      	mov	r2, r3
 80060d0:	2302      	movs	r3, #2
 80060d2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	b2d9      	uxtb	r1, r3
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	202c      	movs	r0, #44	; 0x2c
 80060de:	fb00 f303 	mul.w	r3, r0, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	3360      	adds	r3, #96	; 0x60
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f00b f93e 	bl	801136c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80060f0:	bf00      	nop
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	; 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	0c5b      	lsrs	r3, r3, #17
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	091b      	lsrs	r3, r3, #4
 8006128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800612c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d004      	beq.n	800613e <HCD_RXQLVL_IRQHandler+0x46>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2b05      	cmp	r3, #5
 8006138:	f000 80a9 	beq.w	800628e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800613c:	e0aa      	b.n	8006294 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80a6 	beq.w	8006292 <HCD_RXQLVL_IRQHandler+0x19a>
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	212c      	movs	r1, #44	; 0x2c
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	4413      	add	r3, r2
 8006152:	3344      	adds	r3, #68	; 0x44
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 809b 	beq.w	8006292 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	212c      	movs	r1, #44	; 0x2c
 8006162:	fb01 f303 	mul.w	r3, r1, r3
 8006166:	4413      	add	r3, r2
 8006168:	3350      	adds	r3, #80	; 0x50
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	441a      	add	r2, r3
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	202c      	movs	r0, #44	; 0x2c
 8006176:	fb00 f303 	mul.w	r3, r0, r3
 800617a:	440b      	add	r3, r1
 800617c:	334c      	adds	r3, #76	; 0x4c
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d87a      	bhi.n	800627a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	212c      	movs	r1, #44	; 0x2c
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	4413      	add	r3, r2
 8006194:	3344      	adds	r3, #68	; 0x44
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	b292      	uxth	r2, r2
 800619c:	4619      	mov	r1, r3
 800619e:	f004 fde7 	bl	800ad70 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	212c      	movs	r1, #44	; 0x2c
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	4413      	add	r3, r2
 80061ae:	3344      	adds	r3, #68	; 0x44
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	441a      	add	r2, r3
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	202c      	movs	r0, #44	; 0x2c
 80061bc:	fb00 f303 	mul.w	r3, r0, r3
 80061c0:	440b      	add	r3, r1
 80061c2:	3344      	adds	r3, #68	; 0x44
 80061c4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	212c      	movs	r1, #44	; 0x2c
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	3350      	adds	r3, #80	; 0x50
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	441a      	add	r2, r3
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	202c      	movs	r0, #44	; 0x2c
 80061e0:	fb00 f303 	mul.w	r3, r0, r3
 80061e4:	440b      	add	r3, r1
 80061e6:	3350      	adds	r3, #80	; 0x50
 80061e8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	0cdb      	lsrs	r3, r3, #19
 80061fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	212c      	movs	r1, #44	; 0x2c
 8006206:	fb01 f303 	mul.w	r3, r1, r3
 800620a:	4413      	add	r3, r2
 800620c:	3340      	adds	r3, #64	; 0x40
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4293      	cmp	r3, r2
 8006216:	d13c      	bne.n	8006292 <HCD_RXQLVL_IRQHandler+0x19a>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d039      	beq.n	8006292 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006234:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800623c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	461a      	mov	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	212c      	movs	r1, #44	; 0x2c
 8006256:	fb01 f303 	mul.w	r3, r1, r3
 800625a:	4413      	add	r3, r2
 800625c:	3354      	adds	r3, #84	; 0x54
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	f083 0301 	eor.w	r3, r3, #1
 8006264:	b2d8      	uxtb	r0, r3
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	212c      	movs	r1, #44	; 0x2c
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	4413      	add	r3, r2
 8006272:	3354      	adds	r3, #84	; 0x54
 8006274:	4602      	mov	r2, r0
 8006276:	701a      	strb	r2, [r3, #0]
      break;
 8006278:	e00b      	b.n	8006292 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	212c      	movs	r1, #44	; 0x2c
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	4413      	add	r3, r2
 8006286:	3360      	adds	r3, #96	; 0x60
 8006288:	2204      	movs	r2, #4
 800628a:	701a      	strb	r2, [r3, #0]
      break;
 800628c:	e001      	b.n	8006292 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006292:	bf00      	nop
  }
}
 8006294:	bf00      	nop
 8006296:	3728      	adds	r7, #40	; 0x28
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80062c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d10b      	bne.n	80062ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d102      	bne.n	80062e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f00b f828 	bl	8011334 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f043 0302 	orr.w	r3, r3, #2
 80062ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d132      	bne.n	800635c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f043 0308 	orr.w	r3, r3, #8
 80062fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b04      	cmp	r3, #4
 8006306:	d126      	bne.n	8006356 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d113      	bne.n	8006338 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800631a:	d106      	bne.n	800632a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2102      	movs	r1, #2
 8006322:	4618      	mov	r0, r3
 8006324:	f004 fe84 	bl	800b030 <USB_InitFSLSPClkSel>
 8006328:	e011      	b.n	800634e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2101      	movs	r1, #1
 8006330:	4618      	mov	r0, r3
 8006332:	f004 fe7d 	bl	800b030 <USB_InitFSLSPClkSel>
 8006336:	e00a      	b.n	800634e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d106      	bne.n	800634e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006346:	461a      	mov	r2, r3
 8006348:	f64e 2360 	movw	r3, #60000	; 0xea60
 800634c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f00b f81e 	bl	8011390 <HAL_HCD_PortEnabled_Callback>
 8006354:	e002      	b.n	800635c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f00b f828 	bl	80113ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b20      	cmp	r3, #32
 8006364:	d103      	bne.n	800636e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f043 0320 	orr.w	r3, r3, #32
 800636c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6013      	str	r3, [r2, #0]
}
 800637a:	bf00      	nop
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e12b      	b.n	80065ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fc ff1e 	bl	80031ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2224      	movs	r2, #36	; 0x24
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0201 	bic.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063e8:	f002 f9f8 	bl	80087dc <HAL_RCC_GetPCLK1Freq>
 80063ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	4a81      	ldr	r2, [pc, #516]	; (80065f8 <HAL_I2C_Init+0x274>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d807      	bhi.n	8006408 <HAL_I2C_Init+0x84>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a80      	ldr	r2, [pc, #512]	; (80065fc <HAL_I2C_Init+0x278>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	bf94      	ite	ls
 8006400:	2301      	movls	r3, #1
 8006402:	2300      	movhi	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	e006      	b.n	8006416 <HAL_I2C_Init+0x92>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4a7d      	ldr	r2, [pc, #500]	; (8006600 <HAL_I2C_Init+0x27c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	bf94      	ite	ls
 8006410:	2301      	movls	r3, #1
 8006412:	2300      	movhi	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e0e7      	b.n	80065ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4a78      	ldr	r2, [pc, #480]	; (8006604 <HAL_I2C_Init+0x280>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	0c9b      	lsrs	r3, r3, #18
 8006428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	430a      	orrs	r2, r1
 800643c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4a6a      	ldr	r2, [pc, #424]	; (80065f8 <HAL_I2C_Init+0x274>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d802      	bhi.n	8006458 <HAL_I2C_Init+0xd4>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	3301      	adds	r3, #1
 8006456:	e009      	b.n	800646c <HAL_I2C_Init+0xe8>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	4a69      	ldr	r2, [pc, #420]	; (8006608 <HAL_I2C_Init+0x284>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	099b      	lsrs	r3, r3, #6
 800646a:	3301      	adds	r3, #1
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	430b      	orrs	r3, r1
 8006472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800647e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	495c      	ldr	r1, [pc, #368]	; (80065f8 <HAL_I2C_Init+0x274>)
 8006488:	428b      	cmp	r3, r1
 800648a:	d819      	bhi.n	80064c0 <HAL_I2C_Init+0x13c>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	1e59      	subs	r1, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	fbb1 f3f3 	udiv	r3, r1, r3
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064a0:	400b      	ands	r3, r1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_I2C_Init+0x138>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1e59      	subs	r1, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80064b4:	3301      	adds	r3, #1
 80064b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ba:	e051      	b.n	8006560 <HAL_I2C_Init+0x1dc>
 80064bc:	2304      	movs	r3, #4
 80064be:	e04f      	b.n	8006560 <HAL_I2C_Init+0x1dc>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d111      	bne.n	80064ec <HAL_I2C_Init+0x168>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1e58      	subs	r0, r3, #1
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	440b      	add	r3, r1
 80064d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064da:	3301      	adds	r3, #1
 80064dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	e012      	b.n	8006512 <HAL_I2C_Init+0x18e>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	1e58      	subs	r0, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6859      	ldr	r1, [r3, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	0099      	lsls	r1, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006502:	3301      	adds	r3, #1
 8006504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006508:	2b00      	cmp	r3, #0
 800650a:	bf0c      	ite	eq
 800650c:	2301      	moveq	r3, #1
 800650e:	2300      	movne	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_I2C_Init+0x196>
 8006516:	2301      	movs	r3, #1
 8006518:	e022      	b.n	8006560 <HAL_I2C_Init+0x1dc>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10e      	bne.n	8006540 <HAL_I2C_Init+0x1bc>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1e58      	subs	r0, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6859      	ldr	r1, [r3, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	440b      	add	r3, r1
 8006530:	fbb0 f3f3 	udiv	r3, r0, r3
 8006534:	3301      	adds	r3, #1
 8006536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800653a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653e:	e00f      	b.n	8006560 <HAL_I2C_Init+0x1dc>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	1e58      	subs	r0, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6859      	ldr	r1, [r3, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	0099      	lsls	r1, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	fbb0 f3f3 	udiv	r3, r0, r3
 8006556:	3301      	adds	r3, #1
 8006558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800655c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	6809      	ldr	r1, [r1, #0]
 8006564:	4313      	orrs	r3, r2
 8006566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69da      	ldr	r2, [r3, #28]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800658e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6911      	ldr	r1, [r2, #16]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	68d2      	ldr	r2, [r2, #12]
 800659a:	4311      	orrs	r1, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695a      	ldr	r2, [r3, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	000186a0 	.word	0x000186a0
 80065fc:	001e847f 	.word	0x001e847f
 8006600:	003d08ff 	.word	0x003d08ff
 8006604:	431bde83 	.word	0x431bde83
 8006608:	10624dd3 	.word	0x10624dd3

0800660c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	461a      	mov	r2, r3
 8006618:	460b      	mov	r3, r1
 800661a:	817b      	strh	r3, [r7, #10]
 800661c:	4613      	mov	r3, r2
 800661e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006620:	f7fd fdaa 	bl	8004178 <HAL_GetTick>
 8006624:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	f040 80e0 	bne.w	80067f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	2319      	movs	r3, #25
 800663a:	2201      	movs	r2, #1
 800663c:	4970      	ldr	r1, [pc, #448]	; (8006800 <HAL_I2C_Master_Transmit+0x1f4>)
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fe02 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800664a:	2302      	movs	r3, #2
 800664c:	e0d3      	b.n	80067f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_I2C_Master_Transmit+0x50>
 8006658:	2302      	movs	r3, #2
 800665a:	e0cc      	b.n	80067f6 <HAL_I2C_Master_Transmit+0x1ea>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d007      	beq.n	8006682 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006690:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2221      	movs	r2, #33	; 0x21
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2210      	movs	r2, #16
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	893a      	ldrh	r2, [r7, #8]
 80066b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4a50      	ldr	r2, [pc, #320]	; (8006804 <HAL_I2C_Master_Transmit+0x1f8>)
 80066c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80066c4:	8979      	ldrh	r1, [r7, #10]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	6a3a      	ldr	r2, [r7, #32]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fbbc 	bl	8006e48 <I2C_MasterRequestWrite>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e08d      	b.n	80067f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066da:	2300      	movs	r3, #0
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80066f0:	e066      	b.n	80067c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	6a39      	ldr	r1, [r7, #32]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fe7c 	bl	80073f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	2b04      	cmp	r3, #4
 8006708:	d107      	bne.n	800671a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e06b      	b.n	80067f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	781a      	ldrb	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b04      	cmp	r3, #4
 800675a:	d11b      	bne.n	8006794 <HAL_I2C_Master_Transmit+0x188>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	d017      	beq.n	8006794 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	6a39      	ldr	r1, [r7, #32]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fe6c 	bl	8007476 <I2C_WaitOnBTFFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00d      	beq.n	80067c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d107      	bne.n	80067bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e01a      	b.n	80067f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d194      	bne.n	80066f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	00100002 	.word	0x00100002
 8006804:	ffff0000 	.word	0xffff0000

08006808 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	4608      	mov	r0, r1
 8006812:	4611      	mov	r1, r2
 8006814:	461a      	mov	r2, r3
 8006816:	4603      	mov	r3, r0
 8006818:	817b      	strh	r3, [r7, #10]
 800681a:	460b      	mov	r3, r1
 800681c:	813b      	strh	r3, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006822:	f7fd fca9 	bl	8004178 <HAL_GetTick>
 8006826:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b20      	cmp	r3, #32
 8006832:	f040 80d9 	bne.w	80069e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	2319      	movs	r3, #25
 800683c:	2201      	movs	r2, #1
 800683e:	496d      	ldr	r1, [pc, #436]	; (80069f4 <HAL_I2C_Mem_Write+0x1ec>)
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fd01 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
 800684e:	e0cc      	b.n	80069ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_I2C_Mem_Write+0x56>
 800685a:	2302      	movs	r3, #2
 800685c:	e0c5      	b.n	80069ea <HAL_I2C_Mem_Write+0x1e2>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b01      	cmp	r3, #1
 8006872:	d007      	beq.n	8006884 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006892:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2221      	movs	r2, #33	; 0x21
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2240      	movs	r2, #64	; 0x40
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a3a      	ldr	r2, [r7, #32]
 80068ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a4d      	ldr	r2, [pc, #308]	; (80069f8 <HAL_I2C_Mem_Write+0x1f0>)
 80068c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068c6:	88f8      	ldrh	r0, [r7, #6]
 80068c8:	893a      	ldrh	r2, [r7, #8]
 80068ca:	8979      	ldrh	r1, [r7, #10]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	4603      	mov	r3, r0
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fb38 	bl	8006f4c <I2C_RequestMemoryWrite>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d052      	beq.n	8006988 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e081      	b.n	80069ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fd82 	bl	80073f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00d      	beq.n	8006912 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d107      	bne.n	800690e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e06b      	b.n	80069ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	781a      	ldrb	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b04      	cmp	r3, #4
 800694e:	d11b      	bne.n	8006988 <HAL_I2C_Mem_Write+0x180>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	d017      	beq.n	8006988 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1aa      	bne.n	80068e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 fd6e 	bl	8007476 <I2C_WaitOnBTFFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00d      	beq.n	80069bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d107      	bne.n	80069b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e016      	b.n	80069ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	e000      	b.n	80069ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069e8:	2302      	movs	r3, #2
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	00100002 	.word	0x00100002
 80069f8:	ffff0000 	.word	0xffff0000

080069fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08c      	sub	sp, #48	; 0x30
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	4608      	mov	r0, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	817b      	strh	r3, [r7, #10]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	813b      	strh	r3, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a16:	f7fd fbaf 	bl	8004178 <HAL_GetTick>
 8006a1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	f040 8208 	bne.w	8006e3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	2319      	movs	r3, #25
 8006a30:	2201      	movs	r2, #1
 8006a32:	497b      	ldr	r1, [pc, #492]	; (8006c20 <HAL_I2C_Mem_Read+0x224>)
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 fc07 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
 8006a42:	e1fb      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_I2C_Mem_Read+0x56>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e1f4      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d007      	beq.n	8006a78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2222      	movs	r2, #34	; 0x22
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2240      	movs	r2, #64	; 0x40
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4a5b      	ldr	r2, [pc, #364]	; (8006c24 <HAL_I2C_Mem_Read+0x228>)
 8006ab8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aba:	88f8      	ldrh	r0, [r7, #6]
 8006abc:	893a      	ldrh	r2, [r7, #8]
 8006abe:	8979      	ldrh	r1, [r7, #10]
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	4603      	mov	r3, r0
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fad4 	bl	8007078 <I2C_RequestMemoryRead>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e1b0      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d113      	bne.n	8006b0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	623b      	str	r3, [r7, #32]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	e184      	b.n	8006e14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d11b      	bne.n	8006b4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b22:	2300      	movs	r3, #0
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e164      	b.n	8006e14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d11b      	bne.n	8006b8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b72:	2300      	movs	r3, #0
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	e144      	b.n	8006e14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ba0:	e138      	b.n	8006e14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	f200 80f1 	bhi.w	8006d8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d123      	bne.n	8006bfc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fc9d 	bl	80074f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e139      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691a      	ldr	r2, [r3, #16]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bfa:	e10b      	b.n	8006e14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d14e      	bne.n	8006ca2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	4906      	ldr	r1, [pc, #24]	; (8006c28 <HAL_I2C_Mem_Read+0x22c>)
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fb1a 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e10e      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
 8006c1e:	bf00      	nop
 8006c20:	00100002 	.word	0x00100002
 8006c24:	ffff0000 	.word	0xffff0000
 8006c28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ca0:	e0b8      	b.n	8006e14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4966      	ldr	r1, [pc, #408]	; (8006e44 <HAL_I2C_Mem_Read+0x448>)
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 facb 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e0bf      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691a      	ldr	r2, [r3, #16]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	2200      	movs	r2, #0
 8006d06:	494f      	ldr	r1, [pc, #316]	; (8006e44 <HAL_I2C_Mem_Read+0x448>)
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fa9d 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e091      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d8c:	e042      	b.n	8006e14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 fbb0 	bl	80074f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e04c      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d118      	bne.n	8006e14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f47f aec2 	bne.w	8006ba2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e000      	b.n	8006e3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e3a:	2302      	movs	r3, #2
  }
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3728      	adds	r7, #40	; 0x28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	00010004 	.word	0x00010004

08006e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af02      	add	r7, sp, #8
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	607a      	str	r2, [r7, #4]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	460b      	mov	r3, r1
 8006e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d006      	beq.n	8006e72 <I2C_MasterRequestWrite+0x2a>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d003      	beq.n	8006e72 <I2C_MasterRequestWrite+0x2a>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e70:	d108      	bne.n	8006e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e00b      	b.n	8006e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	2b12      	cmp	r3, #18
 8006e8a:	d107      	bne.n	8006e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f9cd 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00d      	beq.n	8006ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec2:	d103      	bne.n	8006ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e035      	b.n	8006f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ed8:	d108      	bne.n	8006eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eda:	897b      	ldrh	r3, [r7, #10]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ee8:	611a      	str	r2, [r3, #16]
 8006eea:	e01b      	b.n	8006f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006eec:	897b      	ldrh	r3, [r7, #10]
 8006eee:	11db      	asrs	r3, r3, #7
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 0306 	and.w	r3, r3, #6
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f063 030f 	orn	r3, r3, #15
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	490e      	ldr	r1, [pc, #56]	; (8006f44 <I2C_MasterRequestWrite+0xfc>)
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 f9f3 	bl	80072f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e010      	b.n	8006f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f1a:	897b      	ldrh	r3, [r7, #10]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4907      	ldr	r1, [pc, #28]	; (8006f48 <I2C_MasterRequestWrite+0x100>)
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f9e3 	bl	80072f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	00010008 	.word	0x00010008
 8006f48:	00010002 	.word	0x00010002

08006f4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	817b      	strh	r3, [r7, #10]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	813b      	strh	r3, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f960 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00d      	beq.n	8006faa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9c:	d103      	bne.n	8006fa6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e05f      	b.n	800706a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006faa:	897b      	ldrh	r3, [r7, #10]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	6a3a      	ldr	r2, [r7, #32]
 8006fbe:	492d      	ldr	r1, [pc, #180]	; (8007074 <I2C_RequestMemoryWrite+0x128>)
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f998 	bl	80072f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e04c      	b.n	800706a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe8:	6a39      	ldr	r1, [r7, #32]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fa02 	bl	80073f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d107      	bne.n	800700e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e02b      	b.n	800706a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d105      	bne.n	8007024 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007018:	893b      	ldrh	r3, [r7, #8]
 800701a:	b2da      	uxtb	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	611a      	str	r2, [r3, #16]
 8007022:	e021      	b.n	8007068 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007024:	893b      	ldrh	r3, [r7, #8]
 8007026:	0a1b      	lsrs	r3, r3, #8
 8007028:	b29b      	uxth	r3, r3
 800702a:	b2da      	uxtb	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007034:	6a39      	ldr	r1, [r7, #32]
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f9dc 	bl	80073f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	2b04      	cmp	r3, #4
 8007048:	d107      	bne.n	800705a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e005      	b.n	800706a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800705e:	893b      	ldrh	r3, [r7, #8]
 8007060:	b2da      	uxtb	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	00010002 	.word	0x00010002

08007078 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	4608      	mov	r0, r1
 8007082:	4611      	mov	r1, r2
 8007084:	461a      	mov	r2, r3
 8007086:	4603      	mov	r3, r0
 8007088:	817b      	strh	r3, [r7, #10]
 800708a:	460b      	mov	r3, r1
 800708c:	813b      	strh	r3, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 f8c2 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d8:	d103      	bne.n	80070e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e0aa      	b.n	800723c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070e6:	897b      	ldrh	r3, [r7, #10]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	6a3a      	ldr	r2, [r7, #32]
 80070fa:	4952      	ldr	r1, [pc, #328]	; (8007244 <I2C_RequestMemoryRead+0x1cc>)
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f8fa 	bl	80072f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e097      	b.n	800723c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007124:	6a39      	ldr	r1, [r7, #32]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f964 	bl	80073f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00d      	beq.n	800714e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	2b04      	cmp	r3, #4
 8007138:	d107      	bne.n	800714a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007148:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e076      	b.n	800723c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d105      	bne.n	8007160 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007154:	893b      	ldrh	r3, [r7, #8]
 8007156:	b2da      	uxtb	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	611a      	str	r2, [r3, #16]
 800715e:	e021      	b.n	80071a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007160:	893b      	ldrh	r3, [r7, #8]
 8007162:	0a1b      	lsrs	r3, r3, #8
 8007164:	b29b      	uxth	r3, r3
 8007166:	b2da      	uxtb	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800716e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007170:	6a39      	ldr	r1, [r7, #32]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 f93e 	bl	80073f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00d      	beq.n	800719a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	2b04      	cmp	r3, #4
 8007184:	d107      	bne.n	8007196 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007194:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e050      	b.n	800723c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800719a:	893b      	ldrh	r3, [r7, #8]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a6:	6a39      	ldr	r1, [r7, #32]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 f923 	bl	80073f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00d      	beq.n	80071d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d107      	bne.n	80071cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e035      	b.n	800723c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f82b 	bl	8007248 <I2C_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00d      	beq.n	8007214 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007206:	d103      	bne.n	8007210 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800720e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e013      	b.n	800723c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007214:	897b      	ldrh	r3, [r7, #10]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f043 0301 	orr.w	r3, r3, #1
 800721c:	b2da      	uxtb	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	6a3a      	ldr	r2, [r7, #32]
 8007228:	4906      	ldr	r1, [pc, #24]	; (8007244 <I2C_RequestMemoryRead+0x1cc>)
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f863 	bl	80072f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	00010002 	.word	0x00010002

08007248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	4613      	mov	r3, r2
 8007256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007258:	e025      	b.n	80072a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007260:	d021      	beq.n	80072a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007262:	f7fc ff89 	bl	8004178 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	d302      	bcc.n	8007278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d116      	bne.n	80072a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	f043 0220 	orr.w	r2, r3, #32
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e023      	b.n	80072ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	0c1b      	lsrs	r3, r3, #16
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d10d      	bne.n	80072cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	43da      	mvns	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4013      	ands	r3, r2
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bf0c      	ite	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	2300      	movne	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	e00c      	b.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	43da      	mvns	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf0c      	ite	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	2300      	movne	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d0b6      	beq.n	800725a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	607a      	str	r2, [r7, #4]
 8007302:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007304:	e051      	b.n	80073aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007314:	d123      	bne.n	800735e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007324:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800732e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f043 0204 	orr.w	r2, r3, #4
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e046      	b.n	80073ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007364:	d021      	beq.n	80073aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007366:	f7fc ff07 	bl	8004178 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	429a      	cmp	r2, r3
 8007374:	d302      	bcc.n	800737c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d116      	bne.n	80073aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2220      	movs	r2, #32
 8007386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f043 0220 	orr.w	r2, r3, #32
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e020      	b.n	80073ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d10c      	bne.n	80073ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	43da      	mvns	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4013      	ands	r3, r2
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bf14      	ite	ne
 80073c6:	2301      	movne	r3, #1
 80073c8:	2300      	moveq	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	e00b      	b.n	80073e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	43da      	mvns	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4013      	ands	r3, r2
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bf14      	ite	ne
 80073e0:	2301      	movne	r3, #1
 80073e2:	2300      	moveq	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d18d      	bne.n	8007306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007400:	e02d      	b.n	800745e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f8ce 	bl	80075a4 <I2C_IsAcknowledgeFailed>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e02d      	b.n	800746e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007418:	d021      	beq.n	800745e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741a:	f7fc fead 	bl	8004178 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d116      	bne.n	800745e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f043 0220 	orr.w	r2, r3, #32
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e007      	b.n	800746e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	d1ca      	bne.n	8007402 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007482:	e02d      	b.n	80074e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f88d 	bl	80075a4 <I2C_IsAcknowledgeFailed>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e02d      	b.n	80074f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800749a:	d021      	beq.n	80074e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749c:	f7fc fe6c 	bl	8004178 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d302      	bcc.n	80074b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d116      	bne.n	80074e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074cc:	f043 0220 	orr.w	r2, r3, #32
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e007      	b.n	80074f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d1ca      	bne.n	8007484 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007504:	e042      	b.n	800758c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b10      	cmp	r3, #16
 8007512:	d119      	bne.n	8007548 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0210 	mvn.w	r2, #16
 800751c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e029      	b.n	800759c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007548:	f7fc fe16 	bl	8004178 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	429a      	cmp	r2, r3
 8007556:	d302      	bcc.n	800755e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d116      	bne.n	800758c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	f043 0220 	orr.w	r2, r3, #32
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e007      	b.n	800759c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d1b5      	bne.n	8007506 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ba:	d11b      	bne.n	80075f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	f043 0204 	orr.w	r2, r3, #4
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e128      	b.n	8007868 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a90      	ldr	r2, [pc, #576]	; (8007870 <HAL_I2S_Init+0x26c>)
 800762e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7fb fe7b 	bl	800332c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800764c:	f023 030f 	bic.w	r3, r3, #15
 8007650:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2202      	movs	r2, #2
 8007658:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d060      	beq.n	8007724 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800766a:	2310      	movs	r3, #16
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	e001      	b.n	8007674 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007670:	2320      	movs	r3, #32
 8007672:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	2b20      	cmp	r3, #32
 800767a:	d802      	bhi.n	8007682 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007682:	2001      	movs	r0, #1
 8007684:	f001 f9e6 	bl	8008a54 <HAL_RCCEx_GetPeriphCLKFreq>
 8007688:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007692:	d125      	bne.n	80076e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b8:	3305      	adds	r3, #5
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	e01f      	b.n	80076fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	461a      	mov	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076da:	3305      	adds	r3, #5
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	e00e      	b.n	80076fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80076e8:	4613      	mov	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076fa:	3305      	adds	r3, #5
 80076fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4a5c      	ldr	r2, [pc, #368]	; (8007874 <HAL_I2S_Init+0x270>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	08db      	lsrs	r3, r3, #3
 8007708:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	085b      	lsrs	r3, r3, #1
 800771a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	e003      	b.n	800772c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007724:	2302      	movs	r3, #2
 8007726:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d902      	bls.n	8007738 <HAL_I2S_Init+0x134>
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	2bff      	cmp	r3, #255	; 0xff
 8007736:	d907      	bls.n	8007748 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773c:	f043 0210 	orr.w	r2, r3, #16
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e08f      	b.n	8007868 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	ea42 0103 	orr.w	r1, r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	430a      	orrs	r2, r1
 800775a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007766:	f023 030f 	bic.w	r3, r3, #15
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6851      	ldr	r1, [r2, #4]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6892      	ldr	r2, [r2, #8]
 8007772:	4311      	orrs	r1, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	68d2      	ldr	r2, [r2, #12]
 8007778:	4311      	orrs	r1, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6992      	ldr	r2, [r2, #24]
 800777e:	430a      	orrs	r2, r1
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800778a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d161      	bne.n	8007858 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a38      	ldr	r2, [pc, #224]	; (8007878 <HAL_I2S_Init+0x274>)
 8007798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a37      	ldr	r2, [pc, #220]	; (800787c <HAL_I2S_Init+0x278>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d101      	bne.n	80077a8 <HAL_I2S_Init+0x1a4>
 80077a4:	4b36      	ldr	r3, [pc, #216]	; (8007880 <HAL_I2S_Init+0x27c>)
 80077a6:	e001      	b.n	80077ac <HAL_I2S_Init+0x1a8>
 80077a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6812      	ldr	r2, [r2, #0]
 80077b2:	4932      	ldr	r1, [pc, #200]	; (800787c <HAL_I2S_Init+0x278>)
 80077b4:	428a      	cmp	r2, r1
 80077b6:	d101      	bne.n	80077bc <HAL_I2S_Init+0x1b8>
 80077b8:	4a31      	ldr	r2, [pc, #196]	; (8007880 <HAL_I2S_Init+0x27c>)
 80077ba:	e001      	b.n	80077c0 <HAL_I2S_Init+0x1bc>
 80077bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80077c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80077c4:	f023 030f 	bic.w	r3, r3, #15
 80077c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a2b      	ldr	r2, [pc, #172]	; (800787c <HAL_I2S_Init+0x278>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d101      	bne.n	80077d8 <HAL_I2S_Init+0x1d4>
 80077d4:	4b2a      	ldr	r3, [pc, #168]	; (8007880 <HAL_I2S_Init+0x27c>)
 80077d6:	e001      	b.n	80077dc <HAL_I2S_Init+0x1d8>
 80077d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077dc:	2202      	movs	r2, #2
 80077de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a25      	ldr	r2, [pc, #148]	; (800787c <HAL_I2S_Init+0x278>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d101      	bne.n	80077ee <HAL_I2S_Init+0x1ea>
 80077ea:	4b25      	ldr	r3, [pc, #148]	; (8007880 <HAL_I2S_Init+0x27c>)
 80077ec:	e001      	b.n	80077f2 <HAL_I2S_Init+0x1ee>
 80077ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fe:	d003      	beq.n	8007808 <HAL_I2S_Init+0x204>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	e001      	b.n	8007814 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800781e:	4313      	orrs	r3, r2
 8007820:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007828:	4313      	orrs	r3, r2
 800782a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8007832:	4313      	orrs	r3, r2
 8007834:	b29a      	uxth	r2, r3
 8007836:	897b      	ldrh	r3, [r7, #10]
 8007838:	4313      	orrs	r3, r2
 800783a:	b29b      	uxth	r3, r3
 800783c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007840:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a0d      	ldr	r2, [pc, #52]	; (800787c <HAL_I2S_Init+0x278>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d101      	bne.n	8007850 <HAL_I2S_Init+0x24c>
 800784c:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <HAL_I2S_Init+0x27c>)
 800784e:	e001      	b.n	8007854 <HAL_I2S_Init+0x250>
 8007850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007854:	897a      	ldrh	r2, [r7, #10]
 8007856:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	0800797b 	.word	0x0800797b
 8007874:	cccccccd 	.word	0xcccccccd
 8007878:	08007a91 	.word	0x08007a91
 800787c:	40003800 	.word	0x40003800
 8007880:	40003400 	.word	0x40003400

08007884 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	881a      	ldrh	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	1c9a      	adds	r2, r3, #2
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10e      	bne.n	8007914 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007904:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff ffb8 	bl	8007884 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	b292      	uxth	r2, r2
 8007930:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	1c9a      	adds	r2, r3, #2
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007940:	b29b      	uxth	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10e      	bne.n	8007972 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007962:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7ff ff93 	bl	8007898 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b086      	sub	sp, #24
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b04      	cmp	r3, #4
 8007994:	d13a      	bne.n	8007a0c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b01      	cmp	r3, #1
 800799e:	d109      	bne.n	80079b4 <I2S_IRQHandler+0x3a>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079aa:	2b40      	cmp	r3, #64	; 0x40
 80079ac:	d102      	bne.n	80079b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff ffb4 	bl	800791c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b40      	cmp	r3, #64	; 0x40
 80079bc:	d126      	bne.n	8007a0c <I2S_IRQHandler+0x92>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d11f      	bne.n	8007a0c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80079da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fe:	f043 0202 	orr.w	r2, r3, #2
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff ff50 	bl	80078ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d136      	bne.n	8007a86 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d109      	bne.n	8007a36 <I2S_IRQHandler+0xbc>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2c:	2b80      	cmp	r3, #128	; 0x80
 8007a2e:	d102      	bne.n	8007a36 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff ff45 	bl	80078c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d122      	bne.n	8007a86 <I2S_IRQHandler+0x10c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d11b      	bne.n	8007a86 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a5c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a78:	f043 0204 	orr.w	r2, r3, #4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff ff13 	bl	80078ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a86:	bf00      	nop
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4aa2      	ldr	r2, [pc, #648]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d101      	bne.n	8007aae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007aaa:	4ba2      	ldr	r3, [pc, #648]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007aac:	e001      	b.n	8007ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a9b      	ldr	r2, [pc, #620]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d101      	bne.n	8007acc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007ac8:	4b9a      	ldr	r3, [pc, #616]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007aca:	e001      	b.n	8007ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007adc:	d004      	beq.n	8007ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f040 8099 	bne.w	8007c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d107      	bne.n	8007b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f925 	bl	8007d4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d107      	bne.n	8007b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9c8 	bl	8007eac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b22:	2b40      	cmp	r3, #64	; 0x40
 8007b24:	d13a      	bne.n	8007b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d035      	beq.n	8007b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a7e      	ldr	r2, [pc, #504]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d101      	bne.n	8007b3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007b3a:	4b7e      	ldr	r3, [pc, #504]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007b3c:	e001      	b.n	8007b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007b3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4979      	ldr	r1, [pc, #484]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007b4a:	428b      	cmp	r3, r1
 8007b4c:	d101      	bne.n	8007b52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007b4e:	4b79      	ldr	r3, [pc, #484]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007b50:	e001      	b.n	8007b56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8e:	f043 0202 	orr.w	r2, r3, #2
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff fe88 	bl	80078ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	2b08      	cmp	r3, #8
 8007ba4:	f040 80be 	bne.w	8007d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 80b8 	beq.w	8007d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bc2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a59      	ldr	r2, [pc, #356]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d101      	bne.n	8007bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007bce:	4b59      	ldr	r3, [pc, #356]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007bd0:	e001      	b.n	8007bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4954      	ldr	r1, [pc, #336]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007bde:	428b      	cmp	r3, r1
 8007be0:	d101      	bne.n	8007be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007be2:	4b54      	ldr	r3, [pc, #336]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007be4:	e001      	b.n	8007bea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007bea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60bb      	str	r3, [r7, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	60bb      	str	r3, [r7, #8]
 8007bfc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0a:	f043 0204 	orr.w	r2, r3, #4
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff fe4a 	bl	80078ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007c18:	e084      	b.n	8007d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d107      	bne.n	8007c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8be 	bl	8007db0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d107      	bne.n	8007c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f8fd 	bl	8007e48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b40      	cmp	r3, #64	; 0x40
 8007c56:	d12f      	bne.n	8007cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d02a      	beq.n	8007cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007c70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a2e      	ldr	r2, [pc, #184]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d101      	bne.n	8007c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007c7c:	4b2d      	ldr	r3, [pc, #180]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c7e:	e001      	b.n	8007c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4929      	ldr	r1, [pc, #164]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007c8c:	428b      	cmp	r3, r1
 8007c8e:	d101      	bne.n	8007c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007c90:	4b28      	ldr	r3, [pc, #160]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007c92:	e001      	b.n	8007c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	f043 0202 	orr.w	r2, r3, #2
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff fdfa 	bl	80078ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d131      	bne.n	8007d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02c      	beq.n	8007d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a17      	ldr	r2, [pc, #92]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d101      	bne.n	8007cda <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007cd6:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007cd8:	e001      	b.n	8007cde <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4912      	ldr	r1, [pc, #72]	; (8007d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007ce6:	428b      	cmp	r3, r1
 8007ce8:	d101      	bne.n	8007cee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007cea:	4b12      	ldr	r3, [pc, #72]	; (8007d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007cec:	e001      	b.n	8007cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007cf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007cf6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007d06:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d14:	f043 0204 	orr.w	r2, r3, #4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff fdc5 	bl	80078ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007d22:	e000      	b.n	8007d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007d24:	bf00      	nop
}
 8007d26:	bf00      	nop
 8007d28:	3720      	adds	r7, #32
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40003800 	.word	0x40003800
 8007d34:	40003400 	.word	0x40003400

08007d38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	1c99      	adds	r1, r3, #2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6251      	str	r1, [r2, #36]	; 0x24
 8007d5e:	881a      	ldrh	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d113      	bne.n	8007da6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007d8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d106      	bne.n	8007da6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff ffc9 	bl	8007d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	1c99      	adds	r1, r3, #2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6251      	str	r1, [r2, #36]	; 0x24
 8007dc2:	8819      	ldrh	r1, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a1d      	ldr	r2, [pc, #116]	; (8007e40 <I2SEx_TxISR_I2SExt+0x90>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d101      	bne.n	8007dd2 <I2SEx_TxISR_I2SExt+0x22>
 8007dce:	4b1d      	ldr	r3, [pc, #116]	; (8007e44 <I2SEx_TxISR_I2SExt+0x94>)
 8007dd0:	e001      	b.n	8007dd6 <I2SEx_TxISR_I2SExt+0x26>
 8007dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007dd6:	460a      	mov	r2, r1
 8007dd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d121      	bne.n	8007e36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a12      	ldr	r2, [pc, #72]	; (8007e40 <I2SEx_TxISR_I2SExt+0x90>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d101      	bne.n	8007e00 <I2SEx_TxISR_I2SExt+0x50>
 8007dfc:	4b11      	ldr	r3, [pc, #68]	; (8007e44 <I2SEx_TxISR_I2SExt+0x94>)
 8007dfe:	e001      	b.n	8007e04 <I2SEx_TxISR_I2SExt+0x54>
 8007e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	490d      	ldr	r1, [pc, #52]	; (8007e40 <I2SEx_TxISR_I2SExt+0x90>)
 8007e0c:	428b      	cmp	r3, r1
 8007e0e:	d101      	bne.n	8007e14 <I2SEx_TxISR_I2SExt+0x64>
 8007e10:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <I2SEx_TxISR_I2SExt+0x94>)
 8007e12:	e001      	b.n	8007e18 <I2SEx_TxISR_I2SExt+0x68>
 8007e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ff81 	bl	8007d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40003800 	.word	0x40003800
 8007e44:	40003400 	.word	0x40003400

08007e48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68d8      	ldr	r0, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	1c99      	adds	r1, r3, #2
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007e60:	b282      	uxth	r2, r0
 8007e62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d113      	bne.n	8007ea4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff ff4a 	bl	8007d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a20      	ldr	r2, [pc, #128]	; (8007f3c <I2SEx_RxISR_I2SExt+0x90>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d101      	bne.n	8007ec2 <I2SEx_RxISR_I2SExt+0x16>
 8007ebe:	4b20      	ldr	r3, [pc, #128]	; (8007f40 <I2SEx_RxISR_I2SExt+0x94>)
 8007ec0:	e001      	b.n	8007ec6 <I2SEx_RxISR_I2SExt+0x1a>
 8007ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007ec6:	68d8      	ldr	r0, [r3, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	1c99      	adds	r1, r3, #2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007ed2:	b282      	uxth	r2, r0
 8007ed4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d121      	bne.n	8007f32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a12      	ldr	r2, [pc, #72]	; (8007f3c <I2SEx_RxISR_I2SExt+0x90>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d101      	bne.n	8007efc <I2SEx_RxISR_I2SExt+0x50>
 8007ef8:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <I2SEx_RxISR_I2SExt+0x94>)
 8007efa:	e001      	b.n	8007f00 <I2SEx_RxISR_I2SExt+0x54>
 8007efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	490d      	ldr	r1, [pc, #52]	; (8007f3c <I2SEx_RxISR_I2SExt+0x90>)
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	d101      	bne.n	8007f10 <I2SEx_RxISR_I2SExt+0x64>
 8007f0c:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <I2SEx_RxISR_I2SExt+0x94>)
 8007f0e:	e001      	b.n	8007f14 <I2SEx_RxISR_I2SExt+0x68>
 8007f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007f18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d106      	bne.n	8007f32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ff03 	bl	8007d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40003800 	.word	0x40003800
 8007f40:	40003400 	.word	0x40003400

08007f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e264      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d075      	beq.n	800804e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f62:	4ba3      	ldr	r3, [pc, #652]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 030c 	and.w	r3, r3, #12
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d00c      	beq.n	8007f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f6e:	4ba0      	ldr	r3, [pc, #640]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d112      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f7a:	4b9d      	ldr	r3, [pc, #628]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f86:	d10b      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f88:	4b99      	ldr	r3, [pc, #612]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d05b      	beq.n	800804c <HAL_RCC_OscConfig+0x108>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d157      	bne.n	800804c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e23f      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa8:	d106      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x74>
 8007faa:	4b91      	ldr	r3, [pc, #580]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a90      	ldr	r2, [pc, #576]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	e01d      	b.n	8007ff4 <HAL_RCC_OscConfig+0xb0>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fc0:	d10c      	bne.n	8007fdc <HAL_RCC_OscConfig+0x98>
 8007fc2:	4b8b      	ldr	r3, [pc, #556]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a8a      	ldr	r2, [pc, #552]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	4b88      	ldr	r3, [pc, #544]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a87      	ldr	r2, [pc, #540]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	e00b      	b.n	8007ff4 <HAL_RCC_OscConfig+0xb0>
 8007fdc:	4b84      	ldr	r3, [pc, #528]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a83      	ldr	r2, [pc, #524]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	4b81      	ldr	r3, [pc, #516]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a80      	ldr	r2, [pc, #512]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8007fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d013      	beq.n	8008024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ffc:	f7fc f8bc 	bl	8004178 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008004:	f7fc f8b8 	bl	8004178 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b64      	cmp	r3, #100	; 0x64
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e204      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008016:	4b76      	ldr	r3, [pc, #472]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0f0      	beq.n	8008004 <HAL_RCC_OscConfig+0xc0>
 8008022:	e014      	b.n	800804e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008024:	f7fc f8a8 	bl	8004178 <HAL_GetTick>
 8008028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800802a:	e008      	b.n	800803e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800802c:	f7fc f8a4 	bl	8004178 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b64      	cmp	r3, #100	; 0x64
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e1f0      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800803e:	4b6c      	ldr	r3, [pc, #432]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1f0      	bne.n	800802c <HAL_RCC_OscConfig+0xe8>
 800804a:	e000      	b.n	800804e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800804c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d063      	beq.n	8008122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800805a:	4b65      	ldr	r3, [pc, #404]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 030c 	and.w	r3, r3, #12
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008066:	4b62      	ldr	r3, [pc, #392]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800806e:	2b08      	cmp	r3, #8
 8008070:	d11c      	bne.n	80080ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008072:	4b5f      	ldr	r3, [pc, #380]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d116      	bne.n	80080ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800807e:	4b5c      	ldr	r3, [pc, #368]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <HAL_RCC_OscConfig+0x152>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d001      	beq.n	8008096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e1c4      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008096:	4b56      	ldr	r3, [pc, #344]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4952      	ldr	r1, [pc, #328]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080aa:	e03a      	b.n	8008122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d020      	beq.n	80080f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080b4:	4b4f      	ldr	r3, [pc, #316]	; (80081f4 <HAL_RCC_OscConfig+0x2b0>)
 80080b6:	2201      	movs	r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ba:	f7fc f85d 	bl	8004178 <HAL_GetTick>
 80080be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c0:	e008      	b.n	80080d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080c2:	f7fc f859 	bl	8004178 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d901      	bls.n	80080d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e1a5      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d4:	4b46      	ldr	r3, [pc, #280]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0f0      	beq.n	80080c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e0:	4b43      	ldr	r3, [pc, #268]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	4940      	ldr	r1, [pc, #256]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	600b      	str	r3, [r1, #0]
 80080f4:	e015      	b.n	8008122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080f6:	4b3f      	ldr	r3, [pc, #252]	; (80081f4 <HAL_RCC_OscConfig+0x2b0>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fc:	f7fc f83c 	bl	8004178 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008104:	f7fc f838 	bl	8004178 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e184      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008116:	4b36      	ldr	r3, [pc, #216]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f0      	bne.n	8008104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d030      	beq.n	8008190 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d016      	beq.n	8008164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008136:	4b30      	ldr	r3, [pc, #192]	; (80081f8 <HAL_RCC_OscConfig+0x2b4>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800813c:	f7fc f81c 	bl	8004178 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008144:	f7fc f818 	bl	8004178 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e164      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008156:	4b26      	ldr	r3, [pc, #152]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <HAL_RCC_OscConfig+0x200>
 8008162:	e015      	b.n	8008190 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008164:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <HAL_RCC_OscConfig+0x2b4>)
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800816a:	f7fc f805 	bl	8004178 <HAL_GetTick>
 800816e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008172:	f7fc f801 	bl	8004178 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e14d      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008184:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 8008186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80a0 	beq.w	80082de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081a2:	4b13      	ldr	r3, [pc, #76]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10f      	bne.n	80081ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	4a0e      	ldr	r2, [pc, #56]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 80081b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081bc:	6413      	str	r3, [r2, #64]	; 0x40
 80081be:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <HAL_RCC_OscConfig+0x2ac>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c6:	60bb      	str	r3, [r7, #8]
 80081c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ce:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <HAL_RCC_OscConfig+0x2b8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d121      	bne.n	800821e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081da:	4b08      	ldr	r3, [pc, #32]	; (80081fc <HAL_RCC_OscConfig+0x2b8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a07      	ldr	r2, [pc, #28]	; (80081fc <HAL_RCC_OscConfig+0x2b8>)
 80081e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081e6:	f7fb ffc7 	bl	8004178 <HAL_GetTick>
 80081ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ec:	e011      	b.n	8008212 <HAL_RCC_OscConfig+0x2ce>
 80081ee:	bf00      	nop
 80081f0:	40023800 	.word	0x40023800
 80081f4:	42470000 	.word	0x42470000
 80081f8:	42470e80 	.word	0x42470e80
 80081fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008200:	f7fb ffba 	bl	8004178 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e106      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008212:	4b85      	ldr	r3, [pc, #532]	; (8008428 <HAL_RCC_OscConfig+0x4e4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d106      	bne.n	8008234 <HAL_RCC_OscConfig+0x2f0>
 8008226:	4b81      	ldr	r3, [pc, #516]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 8008228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822a:	4a80      	ldr	r2, [pc, #512]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 800822c:	f043 0301 	orr.w	r3, r3, #1
 8008230:	6713      	str	r3, [r2, #112]	; 0x70
 8008232:	e01c      	b.n	800826e <HAL_RCC_OscConfig+0x32a>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2b05      	cmp	r3, #5
 800823a:	d10c      	bne.n	8008256 <HAL_RCC_OscConfig+0x312>
 800823c:	4b7b      	ldr	r3, [pc, #492]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 800823e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008240:	4a7a      	ldr	r2, [pc, #488]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 8008242:	f043 0304 	orr.w	r3, r3, #4
 8008246:	6713      	str	r3, [r2, #112]	; 0x70
 8008248:	4b78      	ldr	r3, [pc, #480]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 800824a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824c:	4a77      	ldr	r2, [pc, #476]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	6713      	str	r3, [r2, #112]	; 0x70
 8008254:	e00b      	b.n	800826e <HAL_RCC_OscConfig+0x32a>
 8008256:	4b75      	ldr	r3, [pc, #468]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 8008258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825a:	4a74      	ldr	r2, [pc, #464]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 800825c:	f023 0301 	bic.w	r3, r3, #1
 8008260:	6713      	str	r3, [r2, #112]	; 0x70
 8008262:	4b72      	ldr	r3, [pc, #456]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 8008264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008266:	4a71      	ldr	r2, [pc, #452]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 8008268:	f023 0304 	bic.w	r3, r3, #4
 800826c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d015      	beq.n	80082a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008276:	f7fb ff7f 	bl	8004178 <HAL_GetTick>
 800827a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800827c:	e00a      	b.n	8008294 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800827e:	f7fb ff7b 	bl	8004178 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	f241 3288 	movw	r2, #5000	; 0x1388
 800828c:	4293      	cmp	r3, r2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e0c5      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008294:	4b65      	ldr	r3, [pc, #404]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 8008296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0ee      	beq.n	800827e <HAL_RCC_OscConfig+0x33a>
 80082a0:	e014      	b.n	80082cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082a2:	f7fb ff69 	bl	8004178 <HAL_GetTick>
 80082a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082a8:	e00a      	b.n	80082c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082aa:	f7fb ff65 	bl	8004178 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e0af      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082c0:	4b5a      	ldr	r3, [pc, #360]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 80082c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1ee      	bne.n	80082aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d105      	bne.n	80082de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082d2:	4b56      	ldr	r3, [pc, #344]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	4a55      	ldr	r2, [pc, #340]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 80082d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 809b 	beq.w	800841e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082e8:	4b50      	ldr	r3, [pc, #320]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f003 030c 	and.w	r3, r3, #12
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d05c      	beq.n	80083ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d141      	bne.n	8008380 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082fc:	4b4c      	ldr	r3, [pc, #304]	; (8008430 <HAL_RCC_OscConfig+0x4ec>)
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008302:	f7fb ff39 	bl	8004178 <HAL_GetTick>
 8008306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008308:	e008      	b.n	800831c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800830a:	f7fb ff35 	bl	8004178 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d901      	bls.n	800831c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e081      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800831c:	4b43      	ldr	r3, [pc, #268]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f0      	bne.n	800830a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	431a      	orrs	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	019b      	lsls	r3, r3, #6
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	3b01      	subs	r3, #1
 8008342:	041b      	lsls	r3, r3, #16
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	4937      	ldr	r1, [pc, #220]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 800834e:	4313      	orrs	r3, r2
 8008350:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008352:	4b37      	ldr	r3, [pc, #220]	; (8008430 <HAL_RCC_OscConfig+0x4ec>)
 8008354:	2201      	movs	r2, #1
 8008356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008358:	f7fb ff0e 	bl	8004178 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008360:	f7fb ff0a 	bl	8004178 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e056      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008372:	4b2e      	ldr	r3, [pc, #184]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0f0      	beq.n	8008360 <HAL_RCC_OscConfig+0x41c>
 800837e:	e04e      	b.n	800841e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008380:	4b2b      	ldr	r3, [pc, #172]	; (8008430 <HAL_RCC_OscConfig+0x4ec>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008386:	f7fb fef7 	bl	8004178 <HAL_GetTick>
 800838a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800838c:	e008      	b.n	80083a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800838e:	f7fb fef3 	bl	8004178 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d901      	bls.n	80083a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e03f      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083a0:	4b22      	ldr	r3, [pc, #136]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1f0      	bne.n	800838e <HAL_RCC_OscConfig+0x44a>
 80083ac:	e037      	b.n	800841e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e032      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083ba:	4b1c      	ldr	r3, [pc, #112]	; (800842c <HAL_RCC_OscConfig+0x4e8>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d028      	beq.n	800841a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d121      	bne.n	800841a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d11a      	bne.n	800841a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083ea:	4013      	ands	r3, r2
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d111      	bne.n	800841a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	3b01      	subs	r3, #1
 8008404:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008406:	429a      	cmp	r2, r3
 8008408:	d107      	bne.n	800841a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008416:	429a      	cmp	r2, r3
 8008418:	d001      	beq.n	800841e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40007000 	.word	0x40007000
 800842c:	40023800 	.word	0x40023800
 8008430:	42470060 	.word	0x42470060

08008434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e0cc      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008448:	4b68      	ldr	r3, [pc, #416]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d90c      	bls.n	8008470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008456:	4b65      	ldr	r3, [pc, #404]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800845e:	4b63      	ldr	r3, [pc, #396]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d001      	beq.n	8008470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e0b8      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d020      	beq.n	80084be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008488:	4b59      	ldr	r3, [pc, #356]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	4a58      	ldr	r2, [pc, #352]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 800848e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0308 	and.w	r3, r3, #8
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084a0:	4b53      	ldr	r3, [pc, #332]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	4a52      	ldr	r2, [pc, #328]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084ac:	4b50      	ldr	r3, [pc, #320]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	494d      	ldr	r1, [pc, #308]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d044      	beq.n	8008554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d107      	bne.n	80084e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084d2:	4b47      	ldr	r3, [pc, #284]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d119      	bne.n	8008512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e07f      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d003      	beq.n	80084f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d107      	bne.n	8008502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084f2:	4b3f      	ldr	r3, [pc, #252]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e06f      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008502:	4b3b      	ldr	r3, [pc, #236]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e067      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008512:	4b37      	ldr	r3, [pc, #220]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f023 0203 	bic.w	r2, r3, #3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	4934      	ldr	r1, [pc, #208]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008520:	4313      	orrs	r3, r2
 8008522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008524:	f7fb fe28 	bl	8004178 <HAL_GetTick>
 8008528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800852a:	e00a      	b.n	8008542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800852c:	f7fb fe24 	bl	8004178 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	f241 3288 	movw	r2, #5000	; 0x1388
 800853a:	4293      	cmp	r3, r2
 800853c:	d901      	bls.n	8008542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e04f      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008542:	4b2b      	ldr	r3, [pc, #172]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 020c 	and.w	r2, r3, #12
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	429a      	cmp	r2, r3
 8008552:	d1eb      	bne.n	800852c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008554:	4b25      	ldr	r3, [pc, #148]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d20c      	bcs.n	800857c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008562:	4b22      	ldr	r3, [pc, #136]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800856a:	4b20      	ldr	r3, [pc, #128]	; (80085ec <HAL_RCC_ClockConfig+0x1b8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d001      	beq.n	800857c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e032      	b.n	80085e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d008      	beq.n	800859a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008588:	4b19      	ldr	r3, [pc, #100]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	4916      	ldr	r1, [pc, #88]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008596:	4313      	orrs	r3, r2
 8008598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085a6:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	490e      	ldr	r1, [pc, #56]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085ba:	f000 f821 	bl	8008600 <HAL_RCC_GetSysClockFreq>
 80085be:	4602      	mov	r2, r0
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <HAL_RCC_ClockConfig+0x1bc>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	091b      	lsrs	r3, r3, #4
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	490a      	ldr	r1, [pc, #40]	; (80085f4 <HAL_RCC_ClockConfig+0x1c0>)
 80085cc:	5ccb      	ldrb	r3, [r1, r3]
 80085ce:	fa22 f303 	lsr.w	r3, r2, r3
 80085d2:	4a09      	ldr	r2, [pc, #36]	; (80085f8 <HAL_RCC_ClockConfig+0x1c4>)
 80085d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085d6:	4b09      	ldr	r3, [pc, #36]	; (80085fc <HAL_RCC_ClockConfig+0x1c8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fb f860 	bl	80036a0 <HAL_InitTick>

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40023c00 	.word	0x40023c00
 80085f0:	40023800 	.word	0x40023800
 80085f4:	08012804 	.word	0x08012804
 80085f8:	20000014 	.word	0x20000014
 80085fc:	20000018 	.word	0x20000018

08008600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	2300      	movs	r3, #0
 8008612:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008618:	4b67      	ldr	r3, [pc, #412]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 030c 	and.w	r3, r3, #12
 8008620:	2b08      	cmp	r3, #8
 8008622:	d00d      	beq.n	8008640 <HAL_RCC_GetSysClockFreq+0x40>
 8008624:	2b08      	cmp	r3, #8
 8008626:	f200 80bd 	bhi.w	80087a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <HAL_RCC_GetSysClockFreq+0x34>
 800862e:	2b04      	cmp	r3, #4
 8008630:	d003      	beq.n	800863a <HAL_RCC_GetSysClockFreq+0x3a>
 8008632:	e0b7      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008634:	4b61      	ldr	r3, [pc, #388]	; (80087bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008636:	60bb      	str	r3, [r7, #8]
       break;
 8008638:	e0b7      	b.n	80087aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800863a:	4b61      	ldr	r3, [pc, #388]	; (80087c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800863c:	60bb      	str	r3, [r7, #8]
      break;
 800863e:	e0b4      	b.n	80087aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008640:	4b5d      	ldr	r3, [pc, #372]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008648:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800864a:	4b5b      	ldr	r3, [pc, #364]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d04d      	beq.n	80086f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008656:	4b58      	ldr	r3, [pc, #352]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	099b      	lsrs	r3, r3, #6
 800865c:	461a      	mov	r2, r3
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008666:	f04f 0100 	mov.w	r1, #0
 800866a:	ea02 0800 	and.w	r8, r2, r0
 800866e:	ea03 0901 	and.w	r9, r3, r1
 8008672:	4640      	mov	r0, r8
 8008674:	4649      	mov	r1, r9
 8008676:	f04f 0200 	mov.w	r2, #0
 800867a:	f04f 0300 	mov.w	r3, #0
 800867e:	014b      	lsls	r3, r1, #5
 8008680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008684:	0142      	lsls	r2, r0, #5
 8008686:	4610      	mov	r0, r2
 8008688:	4619      	mov	r1, r3
 800868a:	ebb0 0008 	subs.w	r0, r0, r8
 800868e:	eb61 0109 	sbc.w	r1, r1, r9
 8008692:	f04f 0200 	mov.w	r2, #0
 8008696:	f04f 0300 	mov.w	r3, #0
 800869a:	018b      	lsls	r3, r1, #6
 800869c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086a0:	0182      	lsls	r2, r0, #6
 80086a2:	1a12      	subs	r2, r2, r0
 80086a4:	eb63 0301 	sbc.w	r3, r3, r1
 80086a8:	f04f 0000 	mov.w	r0, #0
 80086ac:	f04f 0100 	mov.w	r1, #0
 80086b0:	00d9      	lsls	r1, r3, #3
 80086b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086b6:	00d0      	lsls	r0, r2, #3
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	eb12 0208 	adds.w	r2, r2, r8
 80086c0:	eb43 0309 	adc.w	r3, r3, r9
 80086c4:	f04f 0000 	mov.w	r0, #0
 80086c8:	f04f 0100 	mov.w	r1, #0
 80086cc:	0259      	lsls	r1, r3, #9
 80086ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80086d2:	0250      	lsls	r0, r2, #9
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4610      	mov	r0, r2
 80086da:	4619      	mov	r1, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	461a      	mov	r2, r3
 80086e0:	f04f 0300 	mov.w	r3, #0
 80086e4:	f7f7 fddc 	bl	80002a0 <__aeabi_uldivmod>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4613      	mov	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e04a      	b.n	8008788 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086f2:	4b31      	ldr	r3, [pc, #196]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	099b      	lsrs	r3, r3, #6
 80086f8:	461a      	mov	r2, r3
 80086fa:	f04f 0300 	mov.w	r3, #0
 80086fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008702:	f04f 0100 	mov.w	r1, #0
 8008706:	ea02 0400 	and.w	r4, r2, r0
 800870a:	ea03 0501 	and.w	r5, r3, r1
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	f04f 0300 	mov.w	r3, #0
 800871a:	014b      	lsls	r3, r1, #5
 800871c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008720:	0142      	lsls	r2, r0, #5
 8008722:	4610      	mov	r0, r2
 8008724:	4619      	mov	r1, r3
 8008726:	1b00      	subs	r0, r0, r4
 8008728:	eb61 0105 	sbc.w	r1, r1, r5
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	018b      	lsls	r3, r1, #6
 8008736:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800873a:	0182      	lsls	r2, r0, #6
 800873c:	1a12      	subs	r2, r2, r0
 800873e:	eb63 0301 	sbc.w	r3, r3, r1
 8008742:	f04f 0000 	mov.w	r0, #0
 8008746:	f04f 0100 	mov.w	r1, #0
 800874a:	00d9      	lsls	r1, r3, #3
 800874c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008750:	00d0      	lsls	r0, r2, #3
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	1912      	adds	r2, r2, r4
 8008758:	eb45 0303 	adc.w	r3, r5, r3
 800875c:	f04f 0000 	mov.w	r0, #0
 8008760:	f04f 0100 	mov.w	r1, #0
 8008764:	0299      	lsls	r1, r3, #10
 8008766:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800876a:	0290      	lsls	r0, r2, #10
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	4610      	mov	r0, r2
 8008772:	4619      	mov	r1, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	461a      	mov	r2, r3
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	f7f7 fd90 	bl	80002a0 <__aeabi_uldivmod>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4613      	mov	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008788:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	0c1b      	lsrs	r3, r3, #16
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	3301      	adds	r3, #1
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a0:	60bb      	str	r3, [r7, #8]
      break;
 80087a2:	e002      	b.n	80087aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087a4:	4b05      	ldr	r3, [pc, #20]	; (80087bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80087a6:	60bb      	str	r3, [r7, #8]
      break;
 80087a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087aa:	68bb      	ldr	r3, [r7, #8]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80087b6:	bf00      	nop
 80087b8:	40023800 	.word	0x40023800
 80087bc:	00f42400 	.word	0x00f42400
 80087c0:	007a1200 	.word	0x007a1200

080087c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087c4:	b480      	push	{r7}
 80087c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087c8:	4b03      	ldr	r3, [pc, #12]	; (80087d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80087ca:	681b      	ldr	r3, [r3, #0]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20000014 	.word	0x20000014

080087dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087e0:	f7ff fff0 	bl	80087c4 <HAL_RCC_GetHCLKFreq>
 80087e4:	4602      	mov	r2, r0
 80087e6:	4b05      	ldr	r3, [pc, #20]	; (80087fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	0a9b      	lsrs	r3, r3, #10
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	4903      	ldr	r1, [pc, #12]	; (8008800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087f2:	5ccb      	ldrb	r3, [r1, r3]
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	40023800 	.word	0x40023800
 8008800:	08012814 	.word	0x08012814

08008804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008808:	f7ff ffdc 	bl	80087c4 <HAL_RCC_GetHCLKFreq>
 800880c:	4602      	mov	r2, r0
 800880e:	4b05      	ldr	r3, [pc, #20]	; (8008824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	0b5b      	lsrs	r3, r3, #13
 8008814:	f003 0307 	and.w	r3, r3, #7
 8008818:	4903      	ldr	r1, [pc, #12]	; (8008828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800881a:	5ccb      	ldrb	r3, [r1, r3]
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008820:	4618      	mov	r0, r3
 8008822:	bd80      	pop	{r7, pc}
 8008824:	40023800 	.word	0x40023800
 8008828:	08012814 	.word	0x08012814

0800882c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	220f      	movs	r2, #15
 800883a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800883c:	4b12      	ldr	r3, [pc, #72]	; (8008888 <HAL_RCC_GetClockConfig+0x5c>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f003 0203 	and.w	r2, r3, #3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <HAL_RCC_GetClockConfig+0x5c>)
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <HAL_RCC_GetClockConfig+0x5c>)
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <HAL_RCC_GetClockConfig+0x5c>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	08db      	lsrs	r3, r3, #3
 8008866:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800886e:	4b07      	ldr	r3, [pc, #28]	; (800888c <HAL_RCC_GetClockConfig+0x60>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0207 	and.w	r2, r3, #7
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	601a      	str	r2, [r3, #0]
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40023800 	.word	0x40023800
 800888c:	40023c00 	.word	0x40023c00

08008890 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d105      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d035      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088b8:	4b62      	ldr	r3, [pc, #392]	; (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088be:	f7fb fc5b 	bl	8004178 <HAL_GetTick>
 80088c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088c4:	e008      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088c6:	f7fb fc57 	bl	8004178 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d901      	bls.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e0b0      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088d8:	4b5b      	ldr	r3, [pc, #364]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1f0      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	019a      	lsls	r2, r3, #6
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	071b      	lsls	r3, r3, #28
 80088f0:	4955      	ldr	r1, [pc, #340]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088f8:	4b52      	ldr	r3, [pc, #328]	; (8008a44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088fa:	2201      	movs	r2, #1
 80088fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088fe:	f7fb fc3b 	bl	8004178 <HAL_GetTick>
 8008902:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008904:	e008      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008906:	f7fb fc37 	bl	8004178 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d901      	bls.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e090      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008918:	4b4b      	ldr	r3, [pc, #300]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0f0      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8083 	beq.w	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	4b44      	ldr	r3, [pc, #272]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	4a43      	ldr	r2, [pc, #268]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800893c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008940:	6413      	str	r3, [r2, #64]	; 0x40
 8008942:	4b41      	ldr	r3, [pc, #260]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a3e      	ldr	r2, [pc, #248]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008958:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800895a:	f7fb fc0d 	bl	8004178 <HAL_GetTick>
 800895e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008960:	e008      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008962:	f7fb fc09 	bl	8004178 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d901      	bls.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e062      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008974:	4b35      	ldr	r3, [pc, #212]	; (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0f0      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008980:	4b31      	ldr	r3, [pc, #196]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008988:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d02f      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	429a      	cmp	r2, r3
 800899c:	d028      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800899e:	4b2a      	ldr	r3, [pc, #168]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80089a8:	4b29      	ldr	r3, [pc, #164]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089aa:	2201      	movs	r2, #1
 80089ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80089ae:	4b28      	ldr	r3, [pc, #160]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80089b4:	4a24      	ldr	r2, [pc, #144]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089ba:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d114      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80089c6:	f7fb fbd7 	bl	8004178 <HAL_GetTick>
 80089ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089cc:	e00a      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ce:	f7fb fbd3 	bl	8004178 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089dc:	4293      	cmp	r3, r2
 80089de:	d901      	bls.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e02a      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089e4:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0ee      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089fc:	d10d      	bne.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a12:	490d      	ldr	r1, [pc, #52]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	608b      	str	r3, [r1, #8]
 8008a18:	e005      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008a1a:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	4a0a      	ldr	r2, [pc, #40]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008a24:	6093      	str	r3, [r2, #8]
 8008a26:	4b08      	ldr	r3, [pc, #32]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a32:	4905      	ldr	r1, [pc, #20]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	42470068 	.word	0x42470068
 8008a48:	40023800 	.word	0x40023800
 8008a4c:	40007000 	.word	0x40007000
 8008a50:	42470e40 	.word	0x42470e40

08008a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d13e      	bne.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008a72:	4b23      	ldr	r3, [pc, #140]	; (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d12f      	bne.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a88:	4b1e      	ldr	r3, [pc, #120]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008a8a:	617b      	str	r3, [r7, #20]
          break;
 8008a8c:	e02f      	b.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008a8e:	4b1c      	ldr	r3, [pc, #112]	; (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9a:	d108      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a9c:	4b18      	ldr	r3, [pc, #96]	; (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aa4:	4a18      	ldr	r2, [pc, #96]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aaa:	613b      	str	r3, [r7, #16]
 8008aac:	e007      	b.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008aae:	4b14      	ldr	r3, [pc, #80]	; (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab6:	4a15      	ldr	r2, [pc, #84]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008abe:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac4:	099b      	lsrs	r3, r3, #6
 8008ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	fb02 f303 	mul.w	r3, r2, r3
 8008ad0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008ad2:	4b0b      	ldr	r3, [pc, #44]	; (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad8:	0f1b      	lsrs	r3, r3, #28
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae4:	617b      	str	r3, [r7, #20]
          break;
 8008ae6:	e002      	b.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]
          break;
 8008aec:	bf00      	nop
        }
      }
      break;
 8008aee:	bf00      	nop
    }
  }
  return frequency;
 8008af0:	697b      	ldr	r3, [r7, #20]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	371c      	adds	r7, #28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	40023800 	.word	0x40023800
 8008b04:	00bb8000 	.word	0x00bb8000
 8008b08:	007a1200 	.word	0x007a1200
 8008b0c:	00f42400 	.word	0x00f42400

08008b10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e083      	b.n	8008c2a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	7f5b      	ldrb	r3, [r3, #29]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7fa fc7a 	bl	800342c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	22ca      	movs	r2, #202	; 0xca
 8008b44:	625a      	str	r2, [r3, #36]	; 0x24
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2253      	movs	r2, #83	; 0x53
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa59 	bl	8009006 <RTC_EnterInitMode>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d008      	beq.n	8008b6c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	22ff      	movs	r2, #255	; 0xff
 8008b60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2204      	movs	r2, #4
 8008b66:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e05e      	b.n	8008c2a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6812      	ldr	r2, [r2, #0]
 8008b76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b7e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6899      	ldr	r1, [r3, #8]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	431a      	orrs	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	68d2      	ldr	r2, [r2, #12]
 8008ba6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6919      	ldr	r1, [r3, #16]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	041a      	lsls	r2, r3, #16
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10e      	bne.n	8008bf8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f9eb 	bl	8008fb6 <HAL_RTC_WaitForSynchro>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	22ff      	movs	r2, #255	; 0xff
 8008bec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e018      	b.n	8008c2a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c06:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	22ff      	movs	r2, #255	; 0xff
 8008c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008c28:	2300      	movs	r3, #0
  }
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c32:	b590      	push	{r4, r7, lr}
 8008c34:	b087      	sub	sp, #28
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	7f1b      	ldrb	r3, [r3, #28]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HAL_RTC_SetTime+0x1c>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e0aa      	b.n	8008da4 <HAL_RTC_SetTime+0x172>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2202      	movs	r2, #2
 8008c58:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d126      	bne.n	8008cae <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 f9f0 	bl	800905e <RTC_ByteToBcd2>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 f9e9 	bl	800905e <RTC_ByteToBcd2>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008c90:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	789b      	ldrb	r3, [r3, #2]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 f9e1 	bl	800905e <RTC_ByteToBcd2>
 8008c9c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008c9e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	78db      	ldrb	r3, [r3, #3]
 8008ca6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	e018      	b.n	8008ce0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008cce:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008cd4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	78db      	ldrb	r3, [r3, #3]
 8008cda:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	22ca      	movs	r2, #202	; 0xca
 8008ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2253      	movs	r2, #83	; 0x53
 8008cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 f988 	bl	8009006 <RTC_EnterInitMode>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	22ff      	movs	r2, #255	; 0xff
 8008d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2204      	movs	r2, #4
 8008d08:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e047      	b.n	8008da4 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008d1e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008d22:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d32:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6899      	ldr	r1, [r3, #8]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	431a      	orrs	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d5a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d111      	bne.n	8008d8e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f923 	bl	8008fb6 <HAL_RTC_WaitForSynchro>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	22ff      	movs	r2, #255	; 0xff
 8008d7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2204      	movs	r2, #4
 8008d82:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e00a      	b.n	8008da4 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	22ff      	movs	r2, #255	; 0xff
 8008d94:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008da2:	2300      	movs	r3, #0
  }
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd90      	pop	{r4, r7, pc}

08008dac <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008dde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008de2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	0c1b      	lsrs	r3, r3, #16
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	0a1b      	lsrs	r3, r3, #8
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d11a      	bne.n	8008e5e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f934 	bl	800909a <RTC_Bcd2ToByte>
 8008e32:	4603      	mov	r3, r0
 8008e34:	461a      	mov	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f92b 	bl	800909a <RTC_Bcd2ToByte>
 8008e44:	4603      	mov	r3, r0
 8008e46:	461a      	mov	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	789b      	ldrb	r3, [r3, #2]
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f922 	bl	800909a <RTC_Bcd2ToByte>
 8008e56:	4603      	mov	r3, r0
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e68:	b590      	push	{r4, r7, lr}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	7f1b      	ldrb	r3, [r3, #28]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d101      	bne.n	8008e84 <HAL_RTC_SetDate+0x1c>
 8008e80:	2302      	movs	r3, #2
 8008e82:	e094      	b.n	8008fae <HAL_RTC_SetDate+0x146>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10e      	bne.n	8008eb4 <HAL_RTC_SetDate+0x4c>
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	785b      	ldrb	r3, [r3, #1]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d008      	beq.n	8008eb4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	f023 0310 	bic.w	r3, r3, #16
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	330a      	adds	r3, #10
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d11c      	bne.n	8008ef4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	78db      	ldrb	r3, [r3, #3]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f8cd 	bl	800905e <RTC_ByteToBcd2>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	785b      	ldrb	r3, [r3, #1]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 f8c6 	bl	800905e <RTC_ByteToBcd2>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ed6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	789b      	ldrb	r3, [r3, #2]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f8be 	bl	800905e <RTC_ByteToBcd2>
 8008ee2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008ee4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	e00e      	b.n	8008f12 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	78db      	ldrb	r3, [r3, #3]
 8008ef8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008f00:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008f06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	22ca      	movs	r2, #202	; 0xca
 8008f18:	625a      	str	r2, [r3, #36]	; 0x24
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2253      	movs	r2, #83	; 0x53
 8008f20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 f86f 	bl	8009006 <RTC_EnterInitMode>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	22ff      	movs	r2, #255	; 0xff
 8008f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2204      	movs	r2, #4
 8008f3a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e033      	b.n	8008fae <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f64:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d111      	bne.n	8008f98 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 f81e 	bl	8008fb6 <HAL_RTC_WaitForSynchro>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2204      	movs	r2, #4
 8008f8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e00a      	b.n	8008fae <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	22ff      	movs	r2, #255	; 0xff
 8008f9e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008fac:	2300      	movs	r3, #0
  }
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd90      	pop	{r4, r7, pc}

08008fb6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008fd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fd2:	f7fb f8d1 	bl	8004178 <HAL_GetTick>
 8008fd6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008fd8:	e009      	b.n	8008fee <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008fda:	f7fb f8cd 	bl	8004178 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fe8:	d901      	bls.n	8008fee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e007      	b.n	8008ffe <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f003 0320 	and.w	r3, r3, #32
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0ee      	beq.n	8008fda <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d119      	bne.n	8009054 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009028:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800902a:	f7fb f8a5 	bl	8004178 <HAL_GetTick>
 800902e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009030:	e009      	b.n	8009046 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009032:	f7fb f8a1 	bl	8004178 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009040:	d901      	bls.n	8009046 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e007      	b.n	8009056 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009050:	2b00      	cmp	r3, #0
 8009052:	d0ee      	beq.n	8009032 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800905e:	b480      	push	{r7}
 8009060:	b085      	sub	sp, #20
 8009062:	af00      	add	r7, sp, #0
 8009064:	4603      	mov	r3, r0
 8009066:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800906c:	e005      	b.n	800907a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3301      	adds	r3, #1
 8009072:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	3b0a      	subs	r3, #10
 8009078:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	2b09      	cmp	r3, #9
 800907e:	d8f6      	bhi.n	800906e <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	b2db      	uxtb	r3, r3
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	b2da      	uxtb	r2, r3
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	4313      	orrs	r3, r2
 800908c:	b2db      	uxtb	r3, r3
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	4603      	mov	r3, r0
 80090a2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	091b      	lsrs	r3, r3, #4
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	461a      	mov	r2, r3
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	f003 030f 	and.w	r3, r3, #15
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	4413      	add	r3, r2
 80090c8:	b2db      	uxtb	r3, r3
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e07b      	b.n	80091e0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d108      	bne.n	8009102 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090f8:	d009      	beq.n	800910e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	61da      	str	r2, [r3, #28]
 8009100:	e005      	b.n	800910e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7fa f9a9 	bl	8003480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009144:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009156:	431a      	orrs	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	431a      	orrs	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009188:	431a      	orrs	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009192:	ea42 0103 	orr.w	r1, r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	0c1b      	lsrs	r3, r3, #16
 80091ac:	f003 0104 	and.w	r1, r3, #4
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	f003 0210 	and.w	r2, r3, #16
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69da      	ldr	r2, [r3, #28]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e041      	b.n	800927e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d106      	bne.n	8009214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7fa f9ce 	bl	80035b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3304      	adds	r3, #4
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f000 fb32 	bl	8009890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b01      	cmp	r3, #1
 800929a:	d001      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e04e      	b.n	800933e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0201 	orr.w	r2, r2, #1
 80092b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a23      	ldr	r2, [pc, #140]	; (800934c <HAL_TIM_Base_Start_IT+0xc4>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d022      	beq.n	8009308 <HAL_TIM_Base_Start_IT+0x80>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ca:	d01d      	beq.n	8009308 <HAL_TIM_Base_Start_IT+0x80>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a1f      	ldr	r2, [pc, #124]	; (8009350 <HAL_TIM_Base_Start_IT+0xc8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d018      	beq.n	8009308 <HAL_TIM_Base_Start_IT+0x80>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a1e      	ldr	r2, [pc, #120]	; (8009354 <HAL_TIM_Base_Start_IT+0xcc>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d013      	beq.n	8009308 <HAL_TIM_Base_Start_IT+0x80>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a1c      	ldr	r2, [pc, #112]	; (8009358 <HAL_TIM_Base_Start_IT+0xd0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00e      	beq.n	8009308 <HAL_TIM_Base_Start_IT+0x80>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a1b      	ldr	r2, [pc, #108]	; (800935c <HAL_TIM_Base_Start_IT+0xd4>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d009      	beq.n	8009308 <HAL_TIM_Base_Start_IT+0x80>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a19      	ldr	r2, [pc, #100]	; (8009360 <HAL_TIM_Base_Start_IT+0xd8>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d004      	beq.n	8009308 <HAL_TIM_Base_Start_IT+0x80>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a18      	ldr	r2, [pc, #96]	; (8009364 <HAL_TIM_Base_Start_IT+0xdc>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d111      	bne.n	800932c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b06      	cmp	r3, #6
 8009318:	d010      	beq.n	800933c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0201 	orr.w	r2, r2, #1
 8009328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800932a:	e007      	b.n	800933c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f042 0201 	orr.w	r2, r2, #1
 800933a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40010000 	.word	0x40010000
 8009350:	40000400 	.word	0x40000400
 8009354:	40000800 	.word	0x40000800
 8009358:	40000c00 	.word	0x40000c00
 800935c:	40010400 	.word	0x40010400
 8009360:	40014000 	.word	0x40014000
 8009364:	40001800 	.word	0x40001800

08009368 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0201 	bic.w	r2, r2, #1
 800937e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6a1a      	ldr	r2, [r3, #32]
 8009386:	f241 1311 	movw	r3, #4369	; 0x1111
 800938a:	4013      	ands	r3, r2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10f      	bne.n	80093b0 <HAL_TIM_Base_Stop_IT+0x48>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6a1a      	ldr	r2, [r3, #32]
 8009396:	f240 4344 	movw	r3, #1092	; 0x444
 800939a:	4013      	ands	r3, r2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d107      	bne.n	80093b0 <HAL_TIM_Base_Stop_IT+0x48>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f022 0201 	bic.w	r2, r2, #1
 80093ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b086      	sub	sp, #24
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	e097      	b.n	800950a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7fa f88e 	bl	8003510 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6812      	ldr	r2, [r2, #0]
 8009406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800940a:	f023 0307 	bic.w	r3, r3, #7
 800940e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3304      	adds	r3, #4
 8009418:	4619      	mov	r1, r3
 800941a:	4610      	mov	r0, r2
 800941c:	f000 fa38 	bl	8009890 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	4313      	orrs	r3, r2
 8009440:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009448:	f023 0303 	bic.w	r3, r3, #3
 800944c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	4313      	orrs	r3, r2
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4313      	orrs	r3, r2
 800945e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009466:	f023 030c 	bic.w	r3, r3, #12
 800946a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	021b      	lsls	r3, r3, #8
 8009482:	4313      	orrs	r3, r2
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	4313      	orrs	r3, r2
 8009488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	011a      	lsls	r2, r3, #4
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	031b      	lsls	r3, r3, #12
 8009496:	4313      	orrs	r3, r2
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80094a4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80094ac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	011b      	lsls	r3, r3, #4
 80094b8:	4313      	orrs	r3, r2
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009522:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800952a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009532:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800953a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d110      	bne.n	8009564 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d102      	bne.n	800954e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009548:	7b7b      	ldrb	r3, [r7, #13]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d001      	beq.n	8009552 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e069      	b.n	8009626 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2202      	movs	r2, #2
 8009556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2202      	movs	r2, #2
 800955e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009562:	e031      	b.n	80095c8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b04      	cmp	r3, #4
 8009568:	d110      	bne.n	800958c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d102      	bne.n	8009576 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009570:	7b3b      	ldrb	r3, [r7, #12]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d001      	beq.n	800957a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e055      	b.n	8009626 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2202      	movs	r2, #2
 800957e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2202      	movs	r2, #2
 8009586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800958a:	e01d      	b.n	80095c8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d108      	bne.n	80095a4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d105      	bne.n	80095a4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009598:	7b7b      	ldrb	r3, [r7, #13]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d102      	bne.n	80095a4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800959e:	7b3b      	ldrb	r3, [r7, #12]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d001      	beq.n	80095a8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e03e      	b.n	8009626 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <HAL_TIM_Encoder_Start+0xc4>
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d008      	beq.n	80095e6 <HAL_TIM_Encoder_Start+0xd4>
 80095d4:	e00f      	b.n	80095f6 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2201      	movs	r2, #1
 80095dc:	2100      	movs	r1, #0
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 f9f6 	bl	80099d0 <TIM_CCxChannelCmd>
      break;
 80095e4:	e016      	b.n	8009614 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2201      	movs	r2, #1
 80095ec:	2104      	movs	r1, #4
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 f9ee 	bl	80099d0 <TIM_CCxChannelCmd>
      break;
 80095f4:	e00e      	b.n	8009614 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2201      	movs	r2, #1
 80095fc:	2100      	movs	r1, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f9e6 	bl	80099d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2201      	movs	r2, #1
 800960a:	2104      	movs	r1, #4
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f9df 	bl	80099d0 <TIM_CCxChannelCmd>
      break;
 8009612:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b02      	cmp	r3, #2
 8009642:	d122      	bne.n	800968a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b02      	cmp	r3, #2
 8009650:	d11b      	bne.n	800968a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f06f 0202 	mvn.w	r2, #2
 800965a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	f003 0303 	and.w	r3, r3, #3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f8ee 	bl	8009852 <HAL_TIM_IC_CaptureCallback>
 8009676:	e005      	b.n	8009684 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f8e0 	bl	800983e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f8f1 	bl	8009866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b04      	cmp	r3, #4
 8009696:	d122      	bne.n	80096de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	f003 0304 	and.w	r3, r3, #4
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d11b      	bne.n	80096de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f06f 0204 	mvn.w	r2, #4
 80096ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f8c4 	bl	8009852 <HAL_TIM_IC_CaptureCallback>
 80096ca:	e005      	b.n	80096d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8b6 	bl	800983e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f8c7 	bl	8009866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f003 0308 	and.w	r3, r3, #8
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d122      	bne.n	8009732 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	2b08      	cmp	r3, #8
 80096f8:	d11b      	bne.n	8009732 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f06f 0208 	mvn.w	r2, #8
 8009702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2204      	movs	r2, #4
 8009708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f003 0303 	and.w	r3, r3, #3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f89a 	bl	8009852 <HAL_TIM_IC_CaptureCallback>
 800971e:	e005      	b.n	800972c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f88c 	bl	800983e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f89d 	bl	8009866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b10      	cmp	r3, #16
 800973e:	d122      	bne.n	8009786 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	2b10      	cmp	r3, #16
 800974c:	d11b      	bne.n	8009786 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f06f 0210 	mvn.w	r2, #16
 8009756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2208      	movs	r2, #8
 800975c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69db      	ldr	r3, [r3, #28]
 8009764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009768:	2b00      	cmp	r3, #0
 800976a:	d003      	beq.n	8009774 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f870 	bl	8009852 <HAL_TIM_IC_CaptureCallback>
 8009772:	e005      	b.n	8009780 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f862 	bl	800983e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f873 	bl	8009866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b01      	cmp	r3, #1
 8009792:	d10e      	bne.n	80097b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d107      	bne.n	80097b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f06f 0201 	mvn.w	r2, #1
 80097aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7f9 fcd9 	bl	8003164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097bc:	2b80      	cmp	r3, #128	; 0x80
 80097be:	d10e      	bne.n	80097de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ca:	2b80      	cmp	r3, #128	; 0x80
 80097cc:	d107      	bne.n	80097de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f9a5 	bl	8009b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e8:	2b40      	cmp	r3, #64	; 0x40
 80097ea:	d10e      	bne.n	800980a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f6:	2b40      	cmp	r3, #64	; 0x40
 80097f8:	d107      	bne.n	800980a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f838 	bl	800987a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b20      	cmp	r3, #32
 8009816:	d10e      	bne.n	8009836 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f003 0320 	and.w	r3, r3, #32
 8009822:	2b20      	cmp	r3, #32
 8009824:	d107      	bne.n	8009836 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f06f 0220 	mvn.w	r2, #32
 800982e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f96f 	bl	8009b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009846:	bf00      	nop
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800985a:	bf00      	nop
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009882:	bf00      	nop
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
	...

08009890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a40      	ldr	r2, [pc, #256]	; (80099a4 <TIM_Base_SetConfig+0x114>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d013      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ae:	d00f      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a3d      	ldr	r2, [pc, #244]	; (80099a8 <TIM_Base_SetConfig+0x118>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00b      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a3c      	ldr	r2, [pc, #240]	; (80099ac <TIM_Base_SetConfig+0x11c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d007      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a3b      	ldr	r2, [pc, #236]	; (80099b0 <TIM_Base_SetConfig+0x120>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d003      	beq.n	80098d0 <TIM_Base_SetConfig+0x40>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a3a      	ldr	r2, [pc, #232]	; (80099b4 <TIM_Base_SetConfig+0x124>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d108      	bne.n	80098e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a2f      	ldr	r2, [pc, #188]	; (80099a4 <TIM_Base_SetConfig+0x114>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d02b      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f0:	d027      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a2c      	ldr	r2, [pc, #176]	; (80099a8 <TIM_Base_SetConfig+0x118>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d023      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a2b      	ldr	r2, [pc, #172]	; (80099ac <TIM_Base_SetConfig+0x11c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d01f      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a2a      	ldr	r2, [pc, #168]	; (80099b0 <TIM_Base_SetConfig+0x120>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d01b      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a29      	ldr	r2, [pc, #164]	; (80099b4 <TIM_Base_SetConfig+0x124>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d017      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a28      	ldr	r2, [pc, #160]	; (80099b8 <TIM_Base_SetConfig+0x128>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d013      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a27      	ldr	r2, [pc, #156]	; (80099bc <TIM_Base_SetConfig+0x12c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00f      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a26      	ldr	r2, [pc, #152]	; (80099c0 <TIM_Base_SetConfig+0x130>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d00b      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a25      	ldr	r2, [pc, #148]	; (80099c4 <TIM_Base_SetConfig+0x134>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d007      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a24      	ldr	r2, [pc, #144]	; (80099c8 <TIM_Base_SetConfig+0x138>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d003      	beq.n	8009942 <TIM_Base_SetConfig+0xb2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a23      	ldr	r2, [pc, #140]	; (80099cc <TIM_Base_SetConfig+0x13c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d108      	bne.n	8009954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	4313      	orrs	r3, r2
 8009952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a0a      	ldr	r2, [pc, #40]	; (80099a4 <TIM_Base_SetConfig+0x114>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d003      	beq.n	8009988 <TIM_Base_SetConfig+0xf8>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a0c      	ldr	r2, [pc, #48]	; (80099b4 <TIM_Base_SetConfig+0x124>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d103      	bne.n	8009990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	615a      	str	r2, [r3, #20]
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	40010000 	.word	0x40010000
 80099a8:	40000400 	.word	0x40000400
 80099ac:	40000800 	.word	0x40000800
 80099b0:	40000c00 	.word	0x40000c00
 80099b4:	40010400 	.word	0x40010400
 80099b8:	40014000 	.word	0x40014000
 80099bc:	40014400 	.word	0x40014400
 80099c0:	40014800 	.word	0x40014800
 80099c4:	40001800 	.word	0x40001800
 80099c8:	40001c00 	.word	0x40001c00
 80099cc:	40002000 	.word	0x40002000

080099d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	2201      	movs	r2, #1
 80099e4:	fa02 f303 	lsl.w	r3, r2, r3
 80099e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a1a      	ldr	r2, [r3, #32]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	43db      	mvns	r3, r3
 80099f2:	401a      	ands	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a1a      	ldr	r2, [r3, #32]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	f003 031f 	and.w	r3, r3, #31
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	fa01 f303 	lsl.w	r3, r1, r3
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	621a      	str	r2, [r3, #32]
}
 8009a0e:	bf00      	nop
 8009a10:	371c      	adds	r7, #28
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
	...

08009a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d101      	bne.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a30:	2302      	movs	r3, #2
 8009a32:	e05a      	b.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a21      	ldr	r2, [pc, #132]	; (8009af8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d022      	beq.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a80:	d01d      	beq.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a1d      	ldr	r2, [pc, #116]	; (8009afc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d018      	beq.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a1b      	ldr	r2, [pc, #108]	; (8009b00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d013      	beq.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1a      	ldr	r2, [pc, #104]	; (8009b04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00e      	beq.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a18      	ldr	r2, [pc, #96]	; (8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d009      	beq.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a17      	ldr	r2, [pc, #92]	; (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d004      	beq.n	8009abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a15      	ldr	r2, [pc, #84]	; (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d10c      	bne.n	8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	40010000 	.word	0x40010000
 8009afc:	40000400 	.word	0x40000400
 8009b00:	40000800 	.word	0x40000800
 8009b04:	40000c00 	.word	0x40000c00
 8009b08:	40010400 	.word	0x40010400
 8009b0c:	40014000 	.word	0x40014000
 8009b10:	40001800 	.word	0x40001800

08009b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e03f      	b.n	8009bce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f9 fd4c 	bl	8003600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2224      	movs	r2, #36	; 0x24
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68da      	ldr	r2, [r3, #12]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fddb 	bl	800a73c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	691a      	ldr	r2, [r3, #16]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	695a      	ldr	r2, [r3, #20]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b08a      	sub	sp, #40	; 0x28
 8009bda:	af02      	add	r7, sp, #8
 8009bdc:	60f8      	str	r0, [r7, #12]
 8009bde:	60b9      	str	r1, [r7, #8]
 8009be0:	603b      	str	r3, [r7, #0]
 8009be2:	4613      	mov	r3, r2
 8009be4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	d17c      	bne.n	8009cf0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <HAL_UART_Transmit+0x2c>
 8009bfc:	88fb      	ldrh	r3, [r7, #6]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e075      	b.n	8009cf2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_UART_Transmit+0x3e>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e06e      	b.n	8009cf2 <HAL_UART_Transmit+0x11c>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2221      	movs	r2, #33	; 0x21
 8009c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c2a:	f7fa faa5 	bl	8004178 <HAL_GetTick>
 8009c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	88fa      	ldrh	r2, [r7, #6]
 8009c34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	88fa      	ldrh	r2, [r7, #6]
 8009c3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c44:	d108      	bne.n	8009c58 <HAL_UART_Transmit+0x82>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d104      	bne.n	8009c58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	61bb      	str	r3, [r7, #24]
 8009c56:	e003      	b.n	8009c60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c68:	e02a      	b.n	8009cc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2200      	movs	r2, #0
 8009c72:	2180      	movs	r1, #128	; 0x80
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 fb1f 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e036      	b.n	8009cf2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10b      	bne.n	8009ca2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	3302      	adds	r3, #2
 8009c9e:	61bb      	str	r3, [r7, #24]
 8009ca0:	e007      	b.n	8009cb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	781a      	ldrb	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1cf      	bne.n	8009c6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2140      	movs	r1, #64	; 0x40
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 faef 	bl	800a2b8 <UART_WaitOnFlagUntilTimeout>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e006      	b.n	8009cf2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	e000      	b.n	8009cf2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009cf0:	2302      	movs	r3, #2
  }
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3720      	adds	r7, #32
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	60f8      	str	r0, [r7, #12]
 8009d02:	60b9      	str	r1, [r7, #8]
 8009d04:	4613      	mov	r3, r2
 8009d06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b20      	cmp	r3, #32
 8009d12:	d11d      	bne.n	8009d50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <HAL_UART_Receive_IT+0x26>
 8009d1a:	88fb      	ldrh	r3, [r7, #6]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e016      	b.n	8009d52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <HAL_UART_Receive_IT+0x38>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e00f      	b.n	8009d52 <HAL_UART_Receive_IT+0x58>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	461a      	mov	r2, r3
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f000 fb24 	bl	800a394 <UART_Start_Receive_IT>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	e000      	b.n	8009d52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009d50:	2302      	movs	r3, #2
  }
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b0ba      	sub	sp, #232	; 0xe8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10f      	bne.n	8009dc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d009      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x66>
 8009dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fc03 	bl	800a5c6 <UART_Receive_IT>
      return;
 8009dc0:	e256      	b.n	800a270 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 80de 	beq.w	8009f88 <HAL_UART_IRQHandler+0x22c>
 8009dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d106      	bne.n	8009de6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ddc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 80d1 	beq.w	8009f88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00b      	beq.n	8009e0a <HAL_UART_IRQHandler+0xae>
 8009df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d005      	beq.n	8009e0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	f043 0201 	orr.w	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0e:	f003 0304 	and.w	r3, r3, #4
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <HAL_UART_IRQHandler+0xd2>
 8009e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d005      	beq.n	8009e2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e26:	f043 0202 	orr.w	r2, r3, #2
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00b      	beq.n	8009e52 <HAL_UART_IRQHandler+0xf6>
 8009e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d005      	beq.n	8009e52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	f043 0204 	orr.w	r2, r3, #4
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e56:	f003 0308 	and.w	r3, r3, #8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d011      	beq.n	8009e82 <HAL_UART_IRQHandler+0x126>
 8009e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e62:	f003 0320 	and.w	r3, r3, #32
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d005      	beq.n	8009e82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f043 0208 	orr.w	r2, r3, #8
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 81ed 	beq.w	800a266 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e90:	f003 0320 	and.w	r3, r3, #32
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d008      	beq.n	8009eaa <HAL_UART_IRQHandler+0x14e>
 8009e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e9c:	f003 0320 	and.w	r3, r3, #32
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fb8e 	bl	800a5c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb4:	2b40      	cmp	r3, #64	; 0x40
 8009eb6:	bf0c      	ite	eq
 8009eb8:	2301      	moveq	r3, #1
 8009eba:	2300      	movne	r3, #0
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	f003 0308 	and.w	r3, r3, #8
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d103      	bne.n	8009ed6 <HAL_UART_IRQHandler+0x17a>
 8009ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d04f      	beq.n	8009f76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fa96 	bl	800a408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee6:	2b40      	cmp	r3, #64	; 0x40
 8009ee8:	d141      	bne.n	8009f6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3314      	adds	r3, #20
 8009ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ef8:	e853 3f00 	ldrex	r3, [r3]
 8009efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3314      	adds	r3, #20
 8009f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f26:	e841 2300 	strex	r3, r2, [r1]
 8009f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1d9      	bne.n	8009eea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d013      	beq.n	8009f66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f42:	4a7d      	ldr	r2, [pc, #500]	; (800a138 <HAL_UART_IRQHandler+0x3dc>)
 8009f44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fa fa96 	bl	800447c <HAL_DMA_Abort_IT>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d016      	beq.n	8009f84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f60:	4610      	mov	r0, r2
 8009f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f64:	e00e      	b.n	8009f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f990 	bl	800a28c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f6c:	e00a      	b.n	8009f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f98c 	bl	800a28c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f74:	e006      	b.n	8009f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f988 	bl	800a28c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f82:	e170      	b.n	800a266 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f84:	bf00      	nop
    return;
 8009f86:	e16e      	b.n	800a266 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	f040 814a 	bne.w	800a226 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f96:	f003 0310 	and.w	r3, r3, #16
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 8143 	beq.w	800a226 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fa4:	f003 0310 	and.w	r3, r3, #16
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 813c 	beq.w	800a226 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60bb      	str	r3, [r7, #8]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60bb      	str	r3, [r7, #8]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	60bb      	str	r3, [r7, #8]
 8009fc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fce:	2b40      	cmp	r3, #64	; 0x40
 8009fd0:	f040 80b4 	bne.w	800a13c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 8140 	beq.w	800a26a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	f080 8139 	bcs.w	800a26a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ffe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00a:	f000 8088 	beq.w	800a11e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	330c      	adds	r3, #12
 800a014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a02c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	330c      	adds	r3, #12
 800a036:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a03a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a03e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1d9      	bne.n	800a00e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3314      	adds	r3, #20
 800a060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a06a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a06c:	f023 0301 	bic.w	r3, r3, #1
 800a070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3314      	adds	r3, #20
 800a07a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a07e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e1      	bne.n	800a05a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3314      	adds	r3, #20
 800a09c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3314      	adds	r3, #20
 800a0b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e3      	bne.n	800a096 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	330c      	adds	r3, #12
 800a0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ee:	f023 0310 	bic.w	r3, r3, #16
 800a0f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	330c      	adds	r3, #12
 800a0fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a100:	65ba      	str	r2, [r7, #88]	; 0x58
 800a102:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a106:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e3      	bne.n	800a0dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fa f93f 	bl	800439c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a126:	b29b      	uxth	r3, r3
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f8b6 	bl	800a2a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a134:	e099      	b.n	800a26a <HAL_UART_IRQHandler+0x50e>
 800a136:	bf00      	nop
 800a138:	0800a4cf 	.word	0x0800a4cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a144:	b29b      	uxth	r3, r3
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a150:	b29b      	uxth	r3, r3
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 808b 	beq.w	800a26e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 8086 	beq.w	800a26e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	330c      	adds	r3, #12
 800a168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	e853 3f00 	ldrex	r3, [r3]
 800a170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	330c      	adds	r3, #12
 800a182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a186:	647a      	str	r2, [r7, #68]	; 0x44
 800a188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a18c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e3      	bne.n	800a162 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3314      	adds	r3, #20
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3314      	adds	r3, #20
 800a1ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1be:	633a      	str	r2, [r7, #48]	; 0x30
 800a1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e3      	bne.n	800a19a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0310 	bic.w	r3, r3, #16
 800a1f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	330c      	adds	r3, #12
 800a200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a204:	61fa      	str	r2, [r7, #28]
 800a206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	69b9      	ldr	r1, [r7, #24]
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	617b      	str	r3, [r7, #20]
   return(result);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e3      	bne.n	800a1e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f83e 	bl	800a2a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a224:	e023      	b.n	800a26e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d009      	beq.n	800a246 <HAL_UART_IRQHandler+0x4ea>
 800a232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f959 	bl	800a4f6 <UART_Transmit_IT>
    return;
 800a244:	e014      	b.n	800a270 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <HAL_UART_IRQHandler+0x514>
 800a252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d008      	beq.n	800a270 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f999 	bl	800a596 <UART_EndTransmit_IT>
    return;
 800a264:	e004      	b.n	800a270 <HAL_UART_IRQHandler+0x514>
    return;
 800a266:	bf00      	nop
 800a268:	e002      	b.n	800a270 <HAL_UART_IRQHandler+0x514>
      return;
 800a26a:	bf00      	nop
 800a26c:	e000      	b.n	800a270 <HAL_UART_IRQHandler+0x514>
      return;
 800a26e:	bf00      	nop
  }
}
 800a270:	37e8      	adds	r7, #232	; 0xe8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop

0800a278 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b090      	sub	sp, #64	; 0x40
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c8:	e050      	b.n	800a36c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d0:	d04c      	beq.n	800a36c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d007      	beq.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2d8:	f7f9 ff4e 	bl	8004178 <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d241      	bcs.n	800a36c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	330c      	adds	r3, #12
 800a306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a308:	637a      	str	r2, [r7, #52]	; 0x34
 800a30a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a30e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3314      	adds	r3, #20
 800a322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	613b      	str	r3, [r7, #16]
   return(result);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	f023 0301 	bic.w	r3, r3, #1
 800a332:	63bb      	str	r3, [r7, #56]	; 0x38
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3314      	adds	r3, #20
 800a33a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a33c:	623a      	str	r2, [r7, #32]
 800a33e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	69f9      	ldr	r1, [r7, #28]
 800a342:	6a3a      	ldr	r2, [r7, #32]
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	61bb      	str	r3, [r7, #24]
   return(result);
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e5      	bne.n	800a31c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2220      	movs	r2, #32
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e00f      	b.n	800a38c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	4013      	ands	r3, r2
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	429a      	cmp	r2, r3
 800a37a:	bf0c      	ite	eq
 800a37c:	2301      	moveq	r3, #1
 800a37e:	2300      	movne	r3, #0
 800a380:	b2db      	uxtb	r3, r3
 800a382:	461a      	mov	r2, r3
 800a384:	79fb      	ldrb	r3, [r7, #7]
 800a386:	429a      	cmp	r2, r3
 800a388:	d09f      	beq.n	800a2ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3740      	adds	r7, #64	; 0x40
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	88fa      	ldrh	r2, [r7, #6]
 800a3ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	88fa      	ldrh	r2, [r7, #6]
 800a3b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2222      	movs	r2, #34	; 0x22
 800a3be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68da      	ldr	r2, [r3, #12]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	695a      	ldr	r2, [r3, #20]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 0201 	orr.w	r2, r2, #1
 800a3e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68da      	ldr	r2, [r3, #12]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f042 0220 	orr.w	r2, r2, #32
 800a3f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a408:	b480      	push	{r7}
 800a40a:	b095      	sub	sp, #84	; 0x54
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	330c      	adds	r3, #12
 800a416:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a426:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	330c      	adds	r3, #12
 800a42e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a430:	643a      	str	r2, [r7, #64]	; 0x40
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a434:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e5      	bne.n	800a410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3314      	adds	r3, #20
 800a44a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	61fb      	str	r3, [r7, #28]
   return(result);
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	f023 0301 	bic.w	r3, r3, #1
 800a45a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3314      	adds	r3, #20
 800a462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a464:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a46a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46c:	e841 2300 	strex	r3, r2, [r1]
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e5      	bne.n	800a444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d119      	bne.n	800a4b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	330c      	adds	r3, #12
 800a486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	e853 3f00 	ldrex	r3, [r3]
 800a48e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f023 0310 	bic.w	r3, r3, #16
 800a496:	647b      	str	r3, [r7, #68]	; 0x44
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	330c      	adds	r3, #12
 800a49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4a0:	61ba      	str	r2, [r7, #24]
 800a4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a4:	6979      	ldr	r1, [r7, #20]
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	e841 2300 	strex	r3, r2, [r1]
 800a4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e5      	bne.n	800a480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4c2:	bf00      	nop
 800a4c4:	3754      	adds	r7, #84	; 0x54
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7ff fecf 	bl	800a28c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b21      	cmp	r3, #33	; 0x21
 800a508:	d13e      	bne.n	800a588 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a512:	d114      	bne.n	800a53e <UART_Transmit_IT+0x48>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d110      	bne.n	800a53e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	881b      	ldrh	r3, [r3, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a530:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	1c9a      	adds	r2, r3, #2
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	621a      	str	r2, [r3, #32]
 800a53c:	e008      	b.n	800a550 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	1c59      	adds	r1, r3, #1
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	6211      	str	r1, [r2, #32]
 800a548:	781a      	ldrb	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a554:	b29b      	uxth	r3, r3
 800a556:	3b01      	subs	r3, #1
 800a558:	b29b      	uxth	r3, r3
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	4619      	mov	r1, r3
 800a55e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10f      	bne.n	800a584 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68da      	ldr	r2, [r3, #12]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a572:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a582:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	e000      	b.n	800a58a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a588:	2302      	movs	r3, #2
  }
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff fe5e 	bl	800a278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b08c      	sub	sp, #48	; 0x30
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b22      	cmp	r3, #34	; 0x22
 800a5d8:	f040 80ab 	bne.w	800a732 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e4:	d117      	bne.n	800a616 <UART_Receive_IT+0x50>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d113      	bne.n	800a616 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a604:	b29a      	uxth	r2, r3
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60e:	1c9a      	adds	r2, r3, #2
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	629a      	str	r2, [r3, #40]	; 0x28
 800a614:	e026      	b.n	800a664 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a628:	d007      	beq.n	800a63a <UART_Receive_IT+0x74>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10a      	bne.n	800a648 <UART_Receive_IT+0x82>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d106      	bne.n	800a648 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	b2da      	uxtb	r2, r3
 800a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a644:	701a      	strb	r2, [r3, #0]
 800a646:	e008      	b.n	800a65a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a654:	b2da      	uxtb	r2, r3
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a668:	b29b      	uxth	r3, r3
 800a66a:	3b01      	subs	r3, #1
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	4619      	mov	r1, r3
 800a672:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a674:	2b00      	cmp	r3, #0
 800a676:	d15a      	bne.n	800a72e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f022 0220 	bic.w	r2, r2, #32
 800a686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	695a      	ldr	r2, [r3, #20]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0201 	bic.w	r2, r2, #1
 800a6a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d135      	bne.n	800a724 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	330c      	adds	r3, #12
 800a6c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f023 0310 	bic.w	r3, r3, #16
 800a6d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	330c      	adds	r3, #12
 800a6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6de:	623a      	str	r2, [r7, #32]
 800a6e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	69f9      	ldr	r1, [r7, #28]
 800a6e4:	6a3a      	ldr	r2, [r7, #32]
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e5      	bne.n	800a6be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0310 	and.w	r3, r3, #16
 800a6fc:	2b10      	cmp	r3, #16
 800a6fe:	d10a      	bne.n	800a716 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a700:	2300      	movs	r3, #0
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a71a:	4619      	mov	r1, r3
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff fdbf 	bl	800a2a0 <HAL_UARTEx_RxEventCallback>
 800a722:	e002      	b.n	800a72a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7f6 fe4d 	bl	80013c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	e002      	b.n	800a734 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	e000      	b.n	800a734 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a732:	2302      	movs	r3, #2
  }
}
 800a734:	4618      	mov	r0, r3
 800a736:	3730      	adds	r7, #48	; 0x30
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	b09f      	sub	sp, #124	; 0x7c
 800a742:	af00      	add	r7, sp, #0
 800a744:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a752:	68d9      	ldr	r1, [r3, #12]
 800a754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	ea40 0301 	orr.w	r3, r0, r1
 800a75c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a75e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a760:	689a      	ldr	r2, [r3, #8]
 800a762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	431a      	orrs	r2, r3
 800a768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	431a      	orrs	r2, r3
 800a76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	4313      	orrs	r3, r2
 800a774:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a780:	f021 010c 	bic.w	r1, r1, #12
 800a784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a78a:	430b      	orrs	r3, r1
 800a78c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a78e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a79a:	6999      	ldr	r1, [r3, #24]
 800a79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	ea40 0301 	orr.w	r3, r0, r1
 800a7a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	4bc5      	ldr	r3, [pc, #788]	; (800aac0 <UART_SetConfig+0x384>)
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d004      	beq.n	800a7ba <UART_SetConfig+0x7e>
 800a7b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	4bc3      	ldr	r3, [pc, #780]	; (800aac4 <UART_SetConfig+0x388>)
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d103      	bne.n	800a7c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7ba:	f7fe f823 	bl	8008804 <HAL_RCC_GetPCLK2Freq>
 800a7be:	6778      	str	r0, [r7, #116]	; 0x74
 800a7c0:	e002      	b.n	800a7c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a7c2:	f7fe f80b 	bl	80087dc <HAL_RCC_GetPCLK1Freq>
 800a7c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7d0:	f040 80b6 	bne.w	800a940 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7d6:	461c      	mov	r4, r3
 800a7d8:	f04f 0500 	mov.w	r5, #0
 800a7dc:	4622      	mov	r2, r4
 800a7de:	462b      	mov	r3, r5
 800a7e0:	1891      	adds	r1, r2, r2
 800a7e2:	6439      	str	r1, [r7, #64]	; 0x40
 800a7e4:	415b      	adcs	r3, r3
 800a7e6:	647b      	str	r3, [r7, #68]	; 0x44
 800a7e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a7ec:	1912      	adds	r2, r2, r4
 800a7ee:	eb45 0303 	adc.w	r3, r5, r3
 800a7f2:	f04f 0000 	mov.w	r0, #0
 800a7f6:	f04f 0100 	mov.w	r1, #0
 800a7fa:	00d9      	lsls	r1, r3, #3
 800a7fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a800:	00d0      	lsls	r0, r2, #3
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	1911      	adds	r1, r2, r4
 800a808:	6639      	str	r1, [r7, #96]	; 0x60
 800a80a:	416b      	adcs	r3, r5
 800a80c:	667b      	str	r3, [r7, #100]	; 0x64
 800a80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	461a      	mov	r2, r3
 800a814:	f04f 0300 	mov.w	r3, #0
 800a818:	1891      	adds	r1, r2, r2
 800a81a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a81c:	415b      	adcs	r3, r3
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a824:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a828:	f7f5 fd3a 	bl	80002a0 <__aeabi_uldivmod>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	4ba5      	ldr	r3, [pc, #660]	; (800aac8 <UART_SetConfig+0x38c>)
 800a832:	fba3 2302 	umull	r2, r3, r3, r2
 800a836:	095b      	lsrs	r3, r3, #5
 800a838:	011e      	lsls	r6, r3, #4
 800a83a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a83c:	461c      	mov	r4, r3
 800a83e:	f04f 0500 	mov.w	r5, #0
 800a842:	4622      	mov	r2, r4
 800a844:	462b      	mov	r3, r5
 800a846:	1891      	adds	r1, r2, r2
 800a848:	6339      	str	r1, [r7, #48]	; 0x30
 800a84a:	415b      	adcs	r3, r3
 800a84c:	637b      	str	r3, [r7, #52]	; 0x34
 800a84e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a852:	1912      	adds	r2, r2, r4
 800a854:	eb45 0303 	adc.w	r3, r5, r3
 800a858:	f04f 0000 	mov.w	r0, #0
 800a85c:	f04f 0100 	mov.w	r1, #0
 800a860:	00d9      	lsls	r1, r3, #3
 800a862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a866:	00d0      	lsls	r0, r2, #3
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	1911      	adds	r1, r2, r4
 800a86e:	65b9      	str	r1, [r7, #88]	; 0x58
 800a870:	416b      	adcs	r3, r5
 800a872:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	461a      	mov	r2, r3
 800a87a:	f04f 0300 	mov.w	r3, #0
 800a87e:	1891      	adds	r1, r2, r2
 800a880:	62b9      	str	r1, [r7, #40]	; 0x28
 800a882:	415b      	adcs	r3, r3
 800a884:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a88a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a88e:	f7f5 fd07 	bl	80002a0 <__aeabi_uldivmod>
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	4b8c      	ldr	r3, [pc, #560]	; (800aac8 <UART_SetConfig+0x38c>)
 800a898:	fba3 1302 	umull	r1, r3, r3, r2
 800a89c:	095b      	lsrs	r3, r3, #5
 800a89e:	2164      	movs	r1, #100	; 0x64
 800a8a0:	fb01 f303 	mul.w	r3, r1, r3
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	00db      	lsls	r3, r3, #3
 800a8a8:	3332      	adds	r3, #50	; 0x32
 800a8aa:	4a87      	ldr	r2, [pc, #540]	; (800aac8 <UART_SetConfig+0x38c>)
 800a8ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b0:	095b      	lsrs	r3, r3, #5
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8b8:	441e      	add	r6, r3
 800a8ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f04f 0100 	mov.w	r1, #0
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	1894      	adds	r4, r2, r2
 800a8c8:	623c      	str	r4, [r7, #32]
 800a8ca:	415b      	adcs	r3, r3
 800a8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a8ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8d2:	1812      	adds	r2, r2, r0
 800a8d4:	eb41 0303 	adc.w	r3, r1, r3
 800a8d8:	f04f 0400 	mov.w	r4, #0
 800a8dc:	f04f 0500 	mov.w	r5, #0
 800a8e0:	00dd      	lsls	r5, r3, #3
 800a8e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a8e6:	00d4      	lsls	r4, r2, #3
 800a8e8:	4622      	mov	r2, r4
 800a8ea:	462b      	mov	r3, r5
 800a8ec:	1814      	adds	r4, r2, r0
 800a8ee:	653c      	str	r4, [r7, #80]	; 0x50
 800a8f0:	414b      	adcs	r3, r1
 800a8f2:	657b      	str	r3, [r7, #84]	; 0x54
 800a8f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f04f 0300 	mov.w	r3, #0
 800a8fe:	1891      	adds	r1, r2, r2
 800a900:	61b9      	str	r1, [r7, #24]
 800a902:	415b      	adcs	r3, r3
 800a904:	61fb      	str	r3, [r7, #28]
 800a906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a90a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a90e:	f7f5 fcc7 	bl	80002a0 <__aeabi_uldivmod>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4b6c      	ldr	r3, [pc, #432]	; (800aac8 <UART_SetConfig+0x38c>)
 800a918:	fba3 1302 	umull	r1, r3, r3, r2
 800a91c:	095b      	lsrs	r3, r3, #5
 800a91e:	2164      	movs	r1, #100	; 0x64
 800a920:	fb01 f303 	mul.w	r3, r1, r3
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	00db      	lsls	r3, r3, #3
 800a928:	3332      	adds	r3, #50	; 0x32
 800a92a:	4a67      	ldr	r2, [pc, #412]	; (800aac8 <UART_SetConfig+0x38c>)
 800a92c:	fba2 2303 	umull	r2, r3, r2, r3
 800a930:	095b      	lsrs	r3, r3, #5
 800a932:	f003 0207 	and.w	r2, r3, #7
 800a936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4432      	add	r2, r6
 800a93c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a93e:	e0b9      	b.n	800aab4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a942:	461c      	mov	r4, r3
 800a944:	f04f 0500 	mov.w	r5, #0
 800a948:	4622      	mov	r2, r4
 800a94a:	462b      	mov	r3, r5
 800a94c:	1891      	adds	r1, r2, r2
 800a94e:	6139      	str	r1, [r7, #16]
 800a950:	415b      	adcs	r3, r3
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a958:	1912      	adds	r2, r2, r4
 800a95a:	eb45 0303 	adc.w	r3, r5, r3
 800a95e:	f04f 0000 	mov.w	r0, #0
 800a962:	f04f 0100 	mov.w	r1, #0
 800a966:	00d9      	lsls	r1, r3, #3
 800a968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a96c:	00d0      	lsls	r0, r2, #3
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	eb12 0804 	adds.w	r8, r2, r4
 800a976:	eb43 0905 	adc.w	r9, r3, r5
 800a97a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	4618      	mov	r0, r3
 800a980:	f04f 0100 	mov.w	r1, #0
 800a984:	f04f 0200 	mov.w	r2, #0
 800a988:	f04f 0300 	mov.w	r3, #0
 800a98c:	008b      	lsls	r3, r1, #2
 800a98e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a992:	0082      	lsls	r2, r0, #2
 800a994:	4640      	mov	r0, r8
 800a996:	4649      	mov	r1, r9
 800a998:	f7f5 fc82 	bl	80002a0 <__aeabi_uldivmod>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4b49      	ldr	r3, [pc, #292]	; (800aac8 <UART_SetConfig+0x38c>)
 800a9a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a9a6:	095b      	lsrs	r3, r3, #5
 800a9a8:	011e      	lsls	r6, r3, #4
 800a9aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f04f 0100 	mov.w	r1, #0
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	1894      	adds	r4, r2, r2
 800a9b8:	60bc      	str	r4, [r7, #8]
 800a9ba:	415b      	adcs	r3, r3
 800a9bc:	60fb      	str	r3, [r7, #12]
 800a9be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9c2:	1812      	adds	r2, r2, r0
 800a9c4:	eb41 0303 	adc.w	r3, r1, r3
 800a9c8:	f04f 0400 	mov.w	r4, #0
 800a9cc:	f04f 0500 	mov.w	r5, #0
 800a9d0:	00dd      	lsls	r5, r3, #3
 800a9d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a9d6:	00d4      	lsls	r4, r2, #3
 800a9d8:	4622      	mov	r2, r4
 800a9da:	462b      	mov	r3, r5
 800a9dc:	1814      	adds	r4, r2, r0
 800a9de:	64bc      	str	r4, [r7, #72]	; 0x48
 800a9e0:	414b      	adcs	r3, r1
 800a9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f04f 0100 	mov.w	r1, #0
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	008b      	lsls	r3, r1, #2
 800a9f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a9fc:	0082      	lsls	r2, r0, #2
 800a9fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800aa02:	f7f5 fc4d 	bl	80002a0 <__aeabi_uldivmod>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4b2f      	ldr	r3, [pc, #188]	; (800aac8 <UART_SetConfig+0x38c>)
 800aa0c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa10:	095b      	lsrs	r3, r3, #5
 800aa12:	2164      	movs	r1, #100	; 0x64
 800aa14:	fb01 f303 	mul.w	r3, r1, r3
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	011b      	lsls	r3, r3, #4
 800aa1c:	3332      	adds	r3, #50	; 0x32
 800aa1e:	4a2a      	ldr	r2, [pc, #168]	; (800aac8 <UART_SetConfig+0x38c>)
 800aa20:	fba2 2303 	umull	r2, r3, r2, r3
 800aa24:	095b      	lsrs	r3, r3, #5
 800aa26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa2a:	441e      	add	r6, r3
 800aa2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f04f 0100 	mov.w	r1, #0
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	1894      	adds	r4, r2, r2
 800aa3a:	603c      	str	r4, [r7, #0]
 800aa3c:	415b      	adcs	r3, r3
 800aa3e:	607b      	str	r3, [r7, #4]
 800aa40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa44:	1812      	adds	r2, r2, r0
 800aa46:	eb41 0303 	adc.w	r3, r1, r3
 800aa4a:	f04f 0400 	mov.w	r4, #0
 800aa4e:	f04f 0500 	mov.w	r5, #0
 800aa52:	00dd      	lsls	r5, r3, #3
 800aa54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa58:	00d4      	lsls	r4, r2, #3
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	eb12 0a00 	adds.w	sl, r2, r0
 800aa62:	eb43 0b01 	adc.w	fp, r3, r1
 800aa66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f04f 0100 	mov.w	r1, #0
 800aa70:	f04f 0200 	mov.w	r2, #0
 800aa74:	f04f 0300 	mov.w	r3, #0
 800aa78:	008b      	lsls	r3, r1, #2
 800aa7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa7e:	0082      	lsls	r2, r0, #2
 800aa80:	4650      	mov	r0, sl
 800aa82:	4659      	mov	r1, fp
 800aa84:	f7f5 fc0c 	bl	80002a0 <__aeabi_uldivmod>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <UART_SetConfig+0x38c>)
 800aa8e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa92:	095b      	lsrs	r3, r3, #5
 800aa94:	2164      	movs	r1, #100	; 0x64
 800aa96:	fb01 f303 	mul.w	r3, r1, r3
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	011b      	lsls	r3, r3, #4
 800aa9e:	3332      	adds	r3, #50	; 0x32
 800aaa0:	4a09      	ldr	r2, [pc, #36]	; (800aac8 <UART_SetConfig+0x38c>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	095b      	lsrs	r3, r3, #5
 800aaa8:	f003 020f 	and.w	r2, r3, #15
 800aaac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4432      	add	r2, r6
 800aab2:	609a      	str	r2, [r3, #8]
}
 800aab4:	bf00      	nop
 800aab6:	377c      	adds	r7, #124	; 0x7c
 800aab8:	46bd      	mov	sp, r7
 800aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabe:	bf00      	nop
 800aac0:	40011000 	.word	0x40011000
 800aac4:	40011400 	.word	0x40011400
 800aac8:	51eb851f 	.word	0x51eb851f

0800aacc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aacc:	b084      	sub	sp, #16
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	f107 001c 	add.w	r0, r7, #28
 800aada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d122      	bne.n	800ab2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aaf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ab0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d105      	bne.n	800ab1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f9a0 	bl	800ae64 <USB_CoreReset>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]
 800ab28:	e01a      	b.n	800ab60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f994 	bl	800ae64 <USB_CoreReset>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d106      	bne.n	800ab54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	639a      	str	r2, [r3, #56]	; 0x38
 800ab52:	e005      	b.n	800ab60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d10b      	bne.n	800ab7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f043 0206 	orr.w	r2, r3, #6
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f043 0220 	orr.w	r2, r3, #32
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab8a:	b004      	add	sp, #16
 800ab8c:	4770      	bx	lr

0800ab8e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b083      	sub	sp, #12
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f043 0201 	orr.w	r2, r3, #1
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f023 0201 	bic.w	r2, r3, #1
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abee:	78fb      	ldrb	r3, [r7, #3]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d115      	bne.n	800ac20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac00:	2001      	movs	r0, #1
 800ac02:	f7f9 fac5 	bl	8004190 <HAL_Delay>
      ms++;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f91a 	bl	800ae46 <USB_GetMode>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d01e      	beq.n	800ac56 <USB_SetCurrentMode+0x84>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b31      	cmp	r3, #49	; 0x31
 800ac1c:	d9f0      	bls.n	800ac00 <USB_SetCurrentMode+0x2e>
 800ac1e:	e01a      	b.n	800ac56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d115      	bne.n	800ac52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac32:	2001      	movs	r0, #1
 800ac34:	f7f9 faac 	bl	8004190 <HAL_Delay>
      ms++;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f901 	bl	800ae46 <USB_GetMode>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d005      	beq.n	800ac56 <USB_SetCurrentMode+0x84>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b31      	cmp	r3, #49	; 0x31
 800ac4e:	d9f0      	bls.n	800ac32 <USB_SetCurrentMode+0x60>
 800ac50:	e001      	b.n	800ac56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	e005      	b.n	800ac62 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b32      	cmp	r3, #50	; 0x32
 800ac5a:	d101      	bne.n	800ac60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e000      	b.n	800ac62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	019b      	lsls	r3, r3, #6
 800ac7e:	f043 0220 	orr.w	r2, r3, #32
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	60fb      	str	r3, [r7, #12]
 800ac8c:	4a08      	ldr	r2, [pc, #32]	; (800acb0 <USB_FlushTxFifo+0x44>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d901      	bls.n	800ac96 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e006      	b.n	800aca4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	f003 0320 	and.w	r3, r3, #32
 800ac9e:	2b20      	cmp	r3, #32
 800aca0:	d0f1      	beq.n	800ac86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	00030d40 	.word	0x00030d40

0800acb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2210      	movs	r2, #16
 800acc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3301      	adds	r3, #1
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	4a08      	ldr	r2, [pc, #32]	; (800acf0 <USB_FlushRxFifo+0x3c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d901      	bls.n	800acd6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e006      	b.n	800ace4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f003 0310 	and.w	r3, r3, #16
 800acde:	2b10      	cmp	r3, #16
 800ace0:	d0f1      	beq.n	800acc6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	00030d40 	.word	0x00030d40

0800acf4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b089      	sub	sp, #36	; 0x24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	4611      	mov	r1, r2
 800ad00:	461a      	mov	r2, r3
 800ad02:	460b      	mov	r3, r1
 800ad04:	71fb      	strb	r3, [r7, #7]
 800ad06:	4613      	mov	r3, r2
 800ad08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ad12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d123      	bne.n	800ad62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ad1a:	88bb      	ldrh	r3, [r7, #4]
 800ad1c:	3303      	adds	r3, #3
 800ad1e:	089b      	lsrs	r3, r3, #2
 800ad20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ad22:	2300      	movs	r3, #0
 800ad24:	61bb      	str	r3, [r7, #24]
 800ad26:	e018      	b.n	800ad5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ad28:	79fb      	ldrb	r3, [r7, #7]
 800ad2a:	031a      	lsls	r2, r3, #12
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad34:	461a      	mov	r2, r3
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	3301      	adds	r3, #1
 800ad46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	3301      	adds	r3, #1
 800ad52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	3301      	adds	r3, #1
 800ad58:	61bb      	str	r3, [r7, #24]
 800ad5a:	69ba      	ldr	r2, [r7, #24]
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d3e2      	bcc.n	800ad28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3724      	adds	r7, #36	; 0x24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b08b      	sub	sp, #44	; 0x2c
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ad86:	88fb      	ldrh	r3, [r7, #6]
 800ad88:	089b      	lsrs	r3, r3, #2
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ad8e:	88fb      	ldrh	r3, [r7, #6]
 800ad90:	f003 0303 	and.w	r3, r3, #3
 800ad94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ad96:	2300      	movs	r3, #0
 800ad98:	623b      	str	r3, [r7, #32]
 800ad9a:	e014      	b.n	800adc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	601a      	str	r2, [r3, #0]
    pDest++;
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	3301      	adds	r3, #1
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	3301      	adds	r3, #1
 800adb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	3301      	adds	r3, #1
 800adb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	3301      	adds	r3, #1
 800adbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	3301      	adds	r3, #1
 800adc4:	623b      	str	r3, [r7, #32]
 800adc6:	6a3a      	ldr	r2, [r7, #32]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d3e6      	bcc.n	800ad9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800adce:	8bfb      	ldrh	r3, [r7, #30]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d01e      	beq.n	800ae12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adde:	461a      	mov	r2, r3
 800ade0:	f107 0310 	add.w	r3, r7, #16
 800ade4:	6812      	ldr	r2, [r2, #0]
 800ade6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	fa22 f303 	lsr.w	r3, r2, r3
 800adf4:	b2da      	uxtb	r2, r3
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	701a      	strb	r2, [r3, #0]
      i++;
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	3301      	adds	r3, #1
 800adfe:	623b      	str	r3, [r7, #32]
      pDest++;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	3301      	adds	r3, #1
 800ae04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ae06:	8bfb      	ldrh	r3, [r7, #30]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ae0c:	8bfb      	ldrh	r3, [r7, #30]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1ea      	bne.n	800ade8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	372c      	adds	r7, #44	; 0x2c
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	4013      	ands	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae38:	68fb      	ldr	r3, [r7, #12]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f003 0301 	and.w	r3, r3, #1
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
	...

0800ae64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	3301      	adds	r3, #1
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	4a13      	ldr	r2, [pc, #76]	; (800aec4 <USB_CoreReset+0x60>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d901      	bls.n	800ae80 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e01a      	b.n	800aeb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	daf3      	bge.n	800ae70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	f043 0201 	orr.w	r2, r3, #1
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	60fb      	str	r3, [r7, #12]
 800ae9e:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <USB_CoreReset+0x60>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d901      	bls.n	800aea8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e006      	b.n	800aeb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d0f1      	beq.n	800ae98 <USB_CoreReset+0x34>

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	00030d40 	.word	0x00030d40

0800aec8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aec8:	b084      	sub	sp, #16
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	f107 001c 	add.w	r0, r7, #28
 800aed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aee4:	461a      	mov	r2, r3
 800aee6:	2300      	movs	r3, #0
 800aee8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af16:	2b00      	cmp	r3, #0
 800af18:	d018      	beq.n	800af4c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d10a      	bne.n	800af36 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800af2e:	f043 0304 	orr.w	r3, r3, #4
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	e014      	b.n	800af60 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800af44:	f023 0304 	bic.w	r3, r3, #4
 800af48:	6013      	str	r3, [r2, #0]
 800af4a:	e009      	b.n	800af60 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800af5a:	f023 0304 	bic.w	r3, r3, #4
 800af5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800af60:	2110      	movs	r1, #16
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff fe82 	bl	800ac6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff fea3 	bl	800acb4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	e015      	b.n	800afa0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af80:	461a      	mov	r2, r3
 800af82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af94:	461a      	mov	r2, r3
 800af96:	2300      	movs	r3, #0
 800af98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3301      	adds	r3, #1
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d3e5      	bcc.n	800af74 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afb4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00b      	beq.n	800afda <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afc8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a13      	ldr	r2, [pc, #76]	; (800b01c <USB_HostInit+0x154>)
 800afce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a13      	ldr	r2, [pc, #76]	; (800b020 <USB_HostInit+0x158>)
 800afd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800afd8:	e009      	b.n	800afee <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2280      	movs	r2, #128	; 0x80
 800afde:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a10      	ldr	r2, [pc, #64]	; (800b024 <USB_HostInit+0x15c>)
 800afe4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a0f      	ldr	r2, [pc, #60]	; (800b028 <USB_HostInit+0x160>)
 800afea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d105      	bne.n	800b000 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	f043 0210 	orr.w	r2, r3, #16
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	699a      	ldr	r2, [r3, #24]
 800b004:	4b09      	ldr	r3, [pc, #36]	; (800b02c <USB_HostInit+0x164>)
 800b006:	4313      	orrs	r3, r2
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b018:	b004      	add	sp, #16
 800b01a:	4770      	bx	lr
 800b01c:	01000200 	.word	0x01000200
 800b020:	00e00300 	.word	0x00e00300
 800b024:	00600080 	.word	0x00600080
 800b028:	004000e0 	.word	0x004000e0
 800b02c:	a3200008 	.word	0xa3200008

0800b030 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b04e:	f023 0303 	bic.w	r3, r3, #3
 800b052:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	78fb      	ldrb	r3, [r7, #3]
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	68f9      	ldr	r1, [r7, #12]
 800b064:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b068:	4313      	orrs	r3, r2
 800b06a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b06c:	78fb      	ldrb	r3, [r7, #3]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d107      	bne.n	800b082 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b078:	461a      	mov	r2, r3
 800b07a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b07e:	6053      	str	r3, [r2, #4]
 800b080:	e009      	b.n	800b096 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b082:	78fb      	ldrb	r3, [r7, #3]
 800b084:	2b02      	cmp	r3, #2
 800b086:	d106      	bne.n	800b096 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b08e:	461a      	mov	r2, r3
 800b090:	f241 7370 	movw	r3, #6000	; 0x1770
 800b094:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b0c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b0ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b0d4:	2064      	movs	r0, #100	; 0x64
 800b0d6:	f7f9 f85b 	bl	8004190 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b0e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b0e8:	200a      	movs	r0, #10
 800b0ea:	f7f9 f851 	bl	8004190 <HAL_Delay>

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b108:	2300      	movs	r3, #0
 800b10a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b11c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d109      	bne.n	800b13c <USB_DriveVbus+0x44>
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d106      	bne.n	800b13c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b136:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b13a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b146:	d109      	bne.n	800b15c <USB_DriveVbus+0x64>
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b15a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	0c5b      	lsrs	r3, r3, #17
 800b188:	f003 0303 	and.w	r3, r3, #3
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	b29b      	uxth	r3, r3
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
	...

0800b1bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	70fb      	strb	r3, [r7, #3]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	70bb      	strb	r3, [r7, #2]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b1de:	78fb      	ldrb	r3, [r7, #3]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b1f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d87e      	bhi.n	800b2f8 <USB_HC_Init+0x13c>
 800b1fa:	a201      	add	r2, pc, #4	; (adr r2, 800b200 <USB_HC_Init+0x44>)
 800b1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b200:	0800b211 	.word	0x0800b211
 800b204:	0800b2bb 	.word	0x0800b2bb
 800b208:	0800b211 	.word	0x0800b211
 800b20c:	0800b27d 	.word	0x0800b27d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	4413      	add	r3, r2
 800b218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b21c:	461a      	mov	r2, r3
 800b21e:	f240 439d 	movw	r3, #1181	; 0x49d
 800b222:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b224:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	da10      	bge.n	800b24e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b22c:	78fb      	ldrb	r3, [r7, #3]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	4413      	add	r3, r2
 800b234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	78fa      	ldrb	r2, [r7, #3]
 800b23c:	0151      	lsls	r1, r2, #5
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	440a      	add	r2, r1
 800b242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b24a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b24c:	e057      	b.n	800b2fe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b256:	2b00      	cmp	r3, #0
 800b258:	d051      	beq.n	800b2fe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b25a:	78fb      	ldrb	r3, [r7, #3]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	4413      	add	r3, r2
 800b262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	78fa      	ldrb	r2, [r7, #3]
 800b26a:	0151      	lsls	r1, r2, #5
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	440a      	add	r2, r1
 800b270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b274:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b278:	60d3      	str	r3, [r2, #12]
      break;
 800b27a:	e040      	b.n	800b2fe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	4413      	add	r3, r2
 800b284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b288:	461a      	mov	r2, r3
 800b28a:	f240 639d 	movw	r3, #1693	; 0x69d
 800b28e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b290:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b294:	2b00      	cmp	r3, #0
 800b296:	da34      	bge.n	800b302 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b298:	78fb      	ldrb	r3, [r7, #3]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	78fa      	ldrb	r2, [r7, #3]
 800b2a8:	0151      	lsls	r1, r2, #5
 800b2aa:	693a      	ldr	r2, [r7, #16]
 800b2ac:	440a      	add	r2, r1
 800b2ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b2b8:	e023      	b.n	800b302 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	015a      	lsls	r2, r3, #5
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	f240 2325 	movw	r3, #549	; 0x225
 800b2cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b2ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	da17      	bge.n	800b306 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b2d6:	78fb      	ldrb	r3, [r7, #3]
 800b2d8:	015a      	lsls	r2, r3, #5
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	4413      	add	r3, r2
 800b2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	78fa      	ldrb	r2, [r7, #3]
 800b2e6:	0151      	lsls	r1, r2, #5
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	440a      	add	r2, r1
 800b2ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b2f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b2f6:	e006      	b.n	800b306 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	77fb      	strb	r3, [r7, #31]
      break;
 800b2fc:	e004      	b.n	800b308 <USB_HC_Init+0x14c>
      break;
 800b2fe:	bf00      	nop
 800b300:	e002      	b.n	800b308 <USB_HC_Init+0x14c>
      break;
 800b302:	bf00      	nop
 800b304:	e000      	b.n	800b308 <USB_HC_Init+0x14c>
      break;
 800b306:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b30e:	699a      	ldr	r2, [r3, #24]
 800b310:	78fb      	ldrb	r3, [r7, #3]
 800b312:	f003 030f 	and.w	r3, r3, #15
 800b316:	2101      	movs	r1, #1
 800b318:	fa01 f303 	lsl.w	r3, r1, r3
 800b31c:	6939      	ldr	r1, [r7, #16]
 800b31e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b322:	4313      	orrs	r3, r2
 800b324:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b332:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b336:	2b00      	cmp	r3, #0
 800b338:	da03      	bge.n	800b342 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b33a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b33e:	61bb      	str	r3, [r7, #24]
 800b340:	e001      	b.n	800b346 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff ff0f 	bl	800b16a <USB_GetHostSpeed>
 800b34c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b34e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b352:	2b02      	cmp	r3, #2
 800b354:	d106      	bne.n	800b364 <USB_HC_Init+0x1a8>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d003      	beq.n	800b364 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b35c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	e001      	b.n	800b368 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b368:	787b      	ldrb	r3, [r7, #1]
 800b36a:	059b      	lsls	r3, r3, #22
 800b36c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b370:	78bb      	ldrb	r3, [r7, #2]
 800b372:	02db      	lsls	r3, r3, #11
 800b374:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b378:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b37a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b37e:	049b      	lsls	r3, r3, #18
 800b380:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b384:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b386:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b388:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b38c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b392:	78fb      	ldrb	r3, [r7, #3]
 800b394:	0159      	lsls	r1, r3, #5
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	440b      	add	r3, r1
 800b39a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b39e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b3a4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b3a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d10f      	bne.n	800b3ce <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b3ae:	78fb      	ldrb	r3, [r7, #3]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	0151      	lsls	r1, r2, #5
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	440a      	add	r2, r1
 800b3c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b3ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3720      	adds	r7, #32
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b08c      	sub	sp, #48	; 0x30
 800b3dc:	af02      	add	r7, sp, #8
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	785b      	ldrb	r3, [r3, #1]
 800b3ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b3f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3f4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d02d      	beq.n	800b45e <USB_HC_StartXfer+0x86>
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	791b      	ldrb	r3, [r3, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d129      	bne.n	800b45e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b40a:	79fb      	ldrb	r3, [r7, #7]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d117      	bne.n	800b440 <USB_HC_StartXfer+0x68>
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	79db      	ldrb	r3, [r3, #7]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d003      	beq.n	800b420 <USB_HC_StartXfer+0x48>
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	79db      	ldrb	r3, [r3, #7]
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d10f      	bne.n	800b440 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	4413      	add	r3, r2
 800b428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	69fa      	ldr	r2, [r7, #28]
 800b430:	0151      	lsls	r1, r2, #5
 800b432:	6a3a      	ldr	r2, [r7, #32]
 800b434:	440a      	add	r2, r1
 800b436:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10b      	bne.n	800b45e <USB_HC_StartXfer+0x86>
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	795b      	ldrb	r3, [r3, #5]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d107      	bne.n	800b45e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	785b      	ldrb	r3, [r3, #1]
 800b452:	4619      	mov	r1, r3
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 fa2f 	bl	800b8b8 <USB_DoPing>
      return HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	e0f8      	b.n	800b650 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	695b      	ldr	r3, [r3, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d018      	beq.n	800b498 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	8912      	ldrh	r2, [r2, #8]
 800b46e:	4413      	add	r3, r2
 800b470:	3b01      	subs	r3, #1
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	8912      	ldrh	r2, [r2, #8]
 800b476:	fbb3 f3f2 	udiv	r3, r3, r2
 800b47a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b47c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b47e:	8b7b      	ldrh	r3, [r7, #26]
 800b480:	429a      	cmp	r2, r3
 800b482:	d90b      	bls.n	800b49c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b484:	8b7b      	ldrh	r3, [r7, #26]
 800b486:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	8912      	ldrh	r2, [r2, #8]
 800b48e:	fb02 f203 	mul.w	r2, r2, r3
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	611a      	str	r2, [r3, #16]
 800b496:	e001      	b.n	800b49c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b498:	2301      	movs	r3, #1
 800b49a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	78db      	ldrb	r3, [r3, #3]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d007      	beq.n	800b4b4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b4a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	8912      	ldrh	r2, [r2, #8]
 800b4aa:	fb02 f203 	mul.w	r2, r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	611a      	str	r2, [r3, #16]
 800b4b2:	e003      	b.n	800b4bc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	695a      	ldr	r2, [r3, #20]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b4c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4c6:	04d9      	lsls	r1, r3, #19
 800b4c8:	4b63      	ldr	r3, [pc, #396]	; (800b658 <USB_HC_StartXfer+0x280>)
 800b4ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b4cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	7a9b      	ldrb	r3, [r3, #10]
 800b4d2:	075b      	lsls	r3, r3, #29
 800b4d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b4d8:	69f9      	ldr	r1, [r7, #28]
 800b4da:	0148      	lsls	r0, r1, #5
 800b4dc:	6a39      	ldr	r1, [r7, #32]
 800b4de:	4401      	add	r1, r0
 800b4e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b4e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b4e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d009      	beq.n	800b502 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	68d9      	ldr	r1, [r3, #12]
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4fe:	460a      	mov	r2, r1
 800b500:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	bf0c      	ite	eq
 800b512:	2301      	moveq	r3, #1
 800b514:	2300      	movne	r3, #0
 800b516:	b2db      	uxtb	r3, r3
 800b518:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	015a      	lsls	r2, r3, #5
 800b51e:	6a3b      	ldr	r3, [r7, #32]
 800b520:	4413      	add	r3, r2
 800b522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	69fa      	ldr	r2, [r7, #28]
 800b52a:	0151      	lsls	r1, r2, #5
 800b52c:	6a3a      	ldr	r2, [r7, #32]
 800b52e:	440a      	add	r2, r1
 800b530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b534:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b538:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	015a      	lsls	r2, r3, #5
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	4413      	add	r3, r2
 800b542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	7e7b      	ldrb	r3, [r7, #25]
 800b54a:	075b      	lsls	r3, r3, #29
 800b54c:	69f9      	ldr	r1, [r7, #28]
 800b54e:	0148      	lsls	r0, r1, #5
 800b550:	6a39      	ldr	r1, [r7, #32]
 800b552:	4401      	add	r1, r0
 800b554:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b558:	4313      	orrs	r3, r2
 800b55a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	6a3b      	ldr	r3, [r7, #32]
 800b562:	4413      	add	r3, r2
 800b564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b572:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	78db      	ldrb	r3, [r3, #3]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d004      	beq.n	800b586 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b582:	613b      	str	r3, [r7, #16]
 800b584:	e003      	b.n	800b58e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b58c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b594:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	6a3b      	ldr	r3, [r7, #32]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e04e      	b.n	800b650 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	78db      	ldrb	r3, [r3, #3]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d149      	bne.n	800b64e <USB_HC_StartXfer+0x276>
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d045      	beq.n	800b64e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	79db      	ldrb	r3, [r3, #7]
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d830      	bhi.n	800b62c <USB_HC_StartXfer+0x254>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <USB_HC_StartXfer+0x1f8>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b5e1 	.word	0x0800b5e1
 800b5d4:	0800b605 	.word	0x0800b605
 800b5d8:	0800b5e1 	.word	0x0800b5e1
 800b5dc:	0800b605 	.word	0x0800b605
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	3303      	adds	r3, #3
 800b5e6:	089b      	lsrs	r3, r3, #2
 800b5e8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b5ea:	8afa      	ldrh	r2, [r7, #22]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d91c      	bls.n	800b630 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	f043 0220 	orr.w	r2, r3, #32
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	619a      	str	r2, [r3, #24]
        }
        break;
 800b602:	e015      	b.n	800b630 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	3303      	adds	r3, #3
 800b60a:	089b      	lsrs	r3, r3, #2
 800b60c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b60e:	8afa      	ldrh	r2, [r7, #22]
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d90a      	bls.n	800b634 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	619a      	str	r2, [r3, #24]
        }
        break;
 800b62a:	e003      	b.n	800b634 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b62c:	bf00      	nop
 800b62e:	e002      	b.n	800b636 <USB_HC_StartXfer+0x25e>
        break;
 800b630:	bf00      	nop
 800b632:	e000      	b.n	800b636 <USB_HC_StartXfer+0x25e>
        break;
 800b634:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	68d9      	ldr	r1, [r3, #12]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	785a      	ldrb	r2, [r3, #1]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	b29b      	uxth	r3, r3
 800b644:	2000      	movs	r0, #0
 800b646:	9000      	str	r0, [sp, #0]
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7ff fb53 	bl	800acf4 <USB_WritePacket>
  }

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3728      	adds	r7, #40	; 0x28
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	1ff80000 	.word	0x1ff80000

0800b65c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b66e:	695b      	ldr	r3, [r3, #20]
 800b670:	b29b      	uxth	r3, r3
}
 800b672:	4618      	mov	r0, r3
 800b674:	3714      	adds	r7, #20
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b67e:	b480      	push	{r7}
 800b680:	b089      	sub	sp, #36	; 0x24
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	460b      	mov	r3, r1
 800b688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800b68e:	78fb      	ldrb	r3, [r7, #3]
 800b690:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800b692:	2300      	movs	r3, #0
 800b694:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	0c9b      	lsrs	r3, r3, #18
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	015a      	lsls	r2, r3, #5
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	0fdb      	lsrs	r3, r3, #31
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f003 0320 	and.w	r3, r3, #32
 800b6ca:	2b20      	cmp	r3, #32
 800b6cc:	d104      	bne.n	800b6d8 <USB_HC_Halt+0x5a>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	e0e8      	b.n	800b8aa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d002      	beq.n	800b6e4 <USB_HC_Halt+0x66>
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d173      	bne.n	800b7cc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	015a      	lsls	r2, r3, #5
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	0151      	lsls	r1, r2, #5
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	440a      	add	r2, r1
 800b6fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b6fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b702:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f003 0320 	and.w	r3, r3, #32
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f040 80cb 	bne.w	800b8a8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b716:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d143      	bne.n	800b7a6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	015a      	lsls	r2, r3, #5
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	4413      	add	r3, r2
 800b726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	0151      	lsls	r1, r2, #5
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	440a      	add	r2, r1
 800b734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b73c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	015a      	lsls	r2, r3, #5
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	4413      	add	r3, r2
 800b746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	0151      	lsls	r1, r2, #5
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	440a      	add	r2, r1
 800b754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b75c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	015a      	lsls	r2, r3, #5
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	4413      	add	r3, r2
 800b766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	0151      	lsls	r1, r2, #5
 800b770:	69ba      	ldr	r2, [r7, #24]
 800b772:	440a      	add	r2, r1
 800b774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b778:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b77c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	3301      	adds	r3, #1
 800b782:	61fb      	str	r3, [r7, #28]
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b78a:	d81d      	bhi.n	800b7c8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	015a      	lsls	r2, r3, #5
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	4413      	add	r3, r2
 800b794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b79e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7a2:	d0ec      	beq.n	800b77e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b7a4:	e080      	b.n	800b8a8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7c4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b7c6:	e06f      	b.n	800b8a8 <USB_HC_Halt+0x22a>
            break;
 800b7c8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b7ca:	e06d      	b.n	800b8a8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	0151      	lsls	r1, r2, #5
 800b7de:	69ba      	ldr	r2, [r7, #24]
 800b7e0:	440a      	add	r2, r1
 800b7e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7ea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d143      	bne.n	800b884 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	4413      	add	r3, r2
 800b804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	0151      	lsls	r1, r2, #5
 800b80e:	69ba      	ldr	r2, [r7, #24]
 800b810:	440a      	add	r2, r1
 800b812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b816:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b81a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	015a      	lsls	r2, r3, #5
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	4413      	add	r3, r2
 800b824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	0151      	lsls	r1, r2, #5
 800b82e:	69ba      	ldr	r2, [r7, #24]
 800b830:	440a      	add	r2, r1
 800b832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b83a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	015a      	lsls	r2, r3, #5
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	4413      	add	r3, r2
 800b844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	0151      	lsls	r1, r2, #5
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	440a      	add	r2, r1
 800b852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b856:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b85a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	3301      	adds	r3, #1
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b868:	d81d      	bhi.n	800b8a6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	4413      	add	r3, r2
 800b872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b87c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b880:	d0ec      	beq.n	800b85c <USB_HC_Halt+0x1de>
 800b882:	e011      	b.n	800b8a8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	0151      	lsls	r1, r2, #5
 800b896:	69ba      	ldr	r2, [r7, #24]
 800b898:	440a      	add	r2, r1
 800b89a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b89e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8a2:	6013      	str	r3, [r2, #0]
 800b8a4:	e000      	b.n	800b8a8 <USB_HC_Halt+0x22a>
          break;
 800b8a6:	bf00      	nop
    }
  }

  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3724      	adds	r7, #36	; 0x24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b8c8:	78fb      	ldrb	r3, [r7, #3]
 800b8ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	04da      	lsls	r2, r3, #19
 800b8d4:	4b15      	ldr	r3, [pc, #84]	; (800b92c <USB_DoPing+0x74>)
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	0151      	lsls	r1, r2, #5
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	440a      	add	r2, r1
 800b8e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	015a      	lsls	r2, r3, #5
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b900:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b908:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	015a      	lsls	r2, r3, #5
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	4413      	add	r3, r2
 800b912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b916:	461a      	mov	r2, r3
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	371c      	adds	r7, #28
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	1ff80000 	.word	0x1ff80000

0800b930 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff f935 	bl	800abb0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b946:	2110      	movs	r1, #16
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff f98f 	bl	800ac6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7ff f9b0 	bl	800acb4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b954:	2300      	movs	r3, #0
 800b956:	613b      	str	r3, [r7, #16]
 800b958:	e01f      	b.n	800b99a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b970:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b978:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b980:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	015a      	lsls	r2, r3, #5
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4413      	add	r3, r2
 800b98a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b98e:	461a      	mov	r2, r3
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	3301      	adds	r3, #1
 800b998:	613b      	str	r3, [r7, #16]
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	2b0f      	cmp	r3, #15
 800b99e:	d9dc      	bls.n	800b95a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	613b      	str	r3, [r7, #16]
 800b9a4:	e034      	b.n	800ba10 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b9c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	015a      	lsls	r2, r3, #5
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9da:	461a      	mov	r2, r3
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	617b      	str	r3, [r7, #20]
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9ec:	d80c      	bhi.n	800ba08 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba04:	d0ec      	beq.n	800b9e0 <USB_StopHost+0xb0>
 800ba06:	e000      	b.n	800ba0a <USB_StopHost+0xda>
        break;
 800ba08:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	613b      	str	r3, [r7, #16]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	2b0f      	cmp	r3, #15
 800ba14:	d9c7      	bls.n	800b9a6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba22:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba2a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff f8ae 	bl	800ab8e <USB_EnableGlobalInt>

  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3718      	adds	r7, #24
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ba3c:	b590      	push	{r4, r7, lr}
 800ba3e:	b089      	sub	sp, #36	; 0x24
 800ba40:	af04      	add	r7, sp, #16
 800ba42:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ba44:	2301      	movs	r3, #1
 800ba46:	2202      	movs	r2, #2
 800ba48:	2102      	movs	r1, #2
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fcb2 	bl	800c3b4 <USBH_FindInterface>
 800ba50:	4603      	mov	r3, r0
 800ba52:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
 800ba56:	2bff      	cmp	r3, #255	; 0xff
 800ba58:	d002      	beq.n	800ba60 <USBH_CDC_InterfaceInit+0x24>
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d901      	bls.n	800ba64 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ba60:	2302      	movs	r3, #2
 800ba62:	e13d      	b.n	800bce0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fc87 	bl	800c37c <USBH_SelectInterface>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ba78:	2302      	movs	r3, #2
 800ba7a:	e131      	b.n	800bce0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ba82:	2050      	movs	r0, #80	; 0x50
 800ba84:	f005 fec0 	bl	8011808 <malloc>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba92:	69db      	ldr	r3, [r3, #28]
 800ba94:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	e11f      	b.n	800bce0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800baa0:	2250      	movs	r2, #80	; 0x50
 800baa2:	2100      	movs	r1, #0
 800baa4:	68b8      	ldr	r0, [r7, #8]
 800baa6:	f005 fecd 	bl	8011844 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	211a      	movs	r1, #26
 800bab0:	fb01 f303 	mul.w	r3, r1, r3
 800bab4:	4413      	add	r3, r2
 800bab6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	b25b      	sxtb	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	da15      	bge.n	800baee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	211a      	movs	r1, #26
 800bac8:	fb01 f303 	mul.w	r3, r1, r3
 800bacc:	4413      	add	r3, r2
 800bace:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bad2:	781a      	ldrb	r2, [r3, #0]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	211a      	movs	r1, #26
 800bade:	fb01 f303 	mul.w	r3, r1, r3
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bae8:	881a      	ldrh	r2, [r3, #0]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	785b      	ldrb	r3, [r3, #1]
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f002 f88c 	bl	800dc12 <USBH_AllocPipe>
 800bafa:	4603      	mov	r3, r0
 800bafc:	461a      	mov	r2, r3
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	7819      	ldrb	r1, [r3, #0]
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	7858      	ldrb	r0, [r3, #1]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	8952      	ldrh	r2, [r2, #10]
 800bb1a:	9202      	str	r2, [sp, #8]
 800bb1c:	2203      	movs	r2, #3
 800bb1e:	9201      	str	r2, [sp, #4]
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	4623      	mov	r3, r4
 800bb24:	4602      	mov	r2, r0
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f002 f844 	bl	800dbb4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2200      	movs	r2, #0
 800bb32:	4619      	mov	r1, r3
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f005 fdb7 	bl	80116a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	210a      	movs	r1, #10
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 fc37 	bl	800c3b4 <USBH_FindInterface>
 800bb46:	4603      	mov	r3, r0
 800bb48:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
 800bb4c:	2bff      	cmp	r3, #255	; 0xff
 800bb4e:	d002      	beq.n	800bb56 <USBH_CDC_InterfaceInit+0x11a>
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d901      	bls.n	800bb5a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bb56:	2302      	movs	r3, #2
 800bb58:	e0c2      	b.n	800bce0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bb5a:	7bfb      	ldrb	r3, [r7, #15]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	211a      	movs	r1, #26
 800bb60:	fb01 f303 	mul.w	r3, r1, r3
 800bb64:	4413      	add	r3, r2
 800bb66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	b25b      	sxtb	r3, r3
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	da16      	bge.n	800bba0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	211a      	movs	r1, #26
 800bb78:	fb01 f303 	mul.w	r3, r1, r3
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bb82:	781a      	ldrb	r2, [r3, #0]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	211a      	movs	r1, #26
 800bb8e:	fb01 f303 	mul.w	r3, r1, r3
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bb98:	881a      	ldrh	r2, [r3, #0]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	835a      	strh	r2, [r3, #26]
 800bb9e:	e015      	b.n	800bbcc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	211a      	movs	r1, #26
 800bba6:	fb01 f303 	mul.w	r3, r1, r3
 800bbaa:	4413      	add	r3, r2
 800bbac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bbb0:	781a      	ldrb	r2, [r3, #0]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	211a      	movs	r1, #26
 800bbbc:	fb01 f303 	mul.w	r3, r1, r3
 800bbc0:	4413      	add	r3, r2
 800bbc2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bbc6:	881a      	ldrh	r2, [r3, #0]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	211a      	movs	r1, #26
 800bbd2:	fb01 f303 	mul.w	r3, r1, r3
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	b25b      	sxtb	r3, r3
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	da16      	bge.n	800bc12 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	211a      	movs	r1, #26
 800bbea:	fb01 f303 	mul.w	r3, r1, r3
 800bbee:	4413      	add	r3, r2
 800bbf0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bbf4:	781a      	ldrb	r2, [r3, #0]
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	211a      	movs	r1, #26
 800bc00:	fb01 f303 	mul.w	r3, r1, r3
 800bc04:	4413      	add	r3, r2
 800bc06:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bc0a:	881a      	ldrh	r2, [r3, #0]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	835a      	strh	r2, [r3, #26]
 800bc10:	e015      	b.n	800bc3e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	211a      	movs	r1, #26
 800bc18:	fb01 f303 	mul.w	r3, r1, r3
 800bc1c:	4413      	add	r3, r2
 800bc1e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bc22:	781a      	ldrb	r2, [r3, #0]
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	211a      	movs	r1, #26
 800bc2e:	fb01 f303 	mul.w	r3, r1, r3
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bc38:	881a      	ldrh	r2, [r3, #0]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	7b9b      	ldrb	r3, [r3, #14]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f001 ffe4 	bl	800dc12 <USBH_AllocPipe>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	7bdb      	ldrb	r3, [r3, #15]
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 ffda 	bl	800dc12 <USBH_AllocPipe>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	461a      	mov	r2, r3
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	7b59      	ldrb	r1, [r3, #13]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	7b98      	ldrb	r0, [r3, #14]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	8b12      	ldrh	r2, [r2, #24]
 800bc7e:	9202      	str	r2, [sp, #8]
 800bc80:	2202      	movs	r2, #2
 800bc82:	9201      	str	r2, [sp, #4]
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	4623      	mov	r3, r4
 800bc88:	4602      	mov	r2, r0
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f001 ff92 	bl	800dbb4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	7b19      	ldrb	r1, [r3, #12]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	7bd8      	ldrb	r0, [r3, #15]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	8b52      	ldrh	r2, [r2, #26]
 800bca8:	9202      	str	r2, [sp, #8]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	9201      	str	r2, [sp, #4]
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	4623      	mov	r3, r4
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f001 ff7d 	bl	800dbb4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	7b5b      	ldrb	r3, [r3, #13]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f005 fcec 	bl	80116a8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	7b1b      	ldrb	r3, [r3, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f005 fce5 	bl	80116a8 <USBH_LL_SetToggle>

  return USBH_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd90      	pop	{r4, r7, pc}

0800bce8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00e      	beq.n	800bd20 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	4619      	mov	r1, r3
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f001 ff72 	bl	800dbf2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	4619      	mov	r1, r3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f001 ff9d 	bl	800dc54 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	7b1b      	ldrb	r3, [r3, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00e      	beq.n	800bd46 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	7b1b      	ldrb	r3, [r3, #12]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 ff5f 	bl	800dbf2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	7b1b      	ldrb	r3, [r3, #12]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f001 ff8a 	bl	800dc54 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	7b5b      	ldrb	r3, [r3, #13]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00e      	beq.n	800bd6c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	7b5b      	ldrb	r3, [r3, #13]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f001 ff4c 	bl	800dbf2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	7b5b      	ldrb	r3, [r3, #13]
 800bd5e:	4619      	mov	r1, r3
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f001 ff77 	bl	800dc54 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d00b      	beq.n	800bd90 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd7e:	69db      	ldr	r3, [r3, #28]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f005 fd49 	bl	8011818 <free>
    phost->pActiveClass->pData = 0U;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3340      	adds	r3, #64	; 0x40
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f8b1 	bl	800bf1a <GetLineCoding>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bdc8:	2102      	movs	r1, #2
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800bdce:	7afb      	ldrb	r3, [r7, #11]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bde0:	2301      	movs	r3, #1
 800bde2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bdf8:	2b04      	cmp	r3, #4
 800bdfa:	d877      	bhi.n	800beec <USBH_CDC_Process+0x114>
 800bdfc:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <USBH_CDC_Process+0x2c>)
 800bdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be02:	bf00      	nop
 800be04:	0800be19 	.word	0x0800be19
 800be08:	0800be1f 	.word	0x0800be1f
 800be0c:	0800be4f 	.word	0x0800be4f
 800be10:	0800bec3 	.word	0x0800bec3
 800be14:	0800bed1 	.word	0x0800bed1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
      break;
 800be1c:	e06d      	b.n	800befa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f897 	bl	800bf58 <SetLineCoding>
 800be2a:	4603      	mov	r3, r0
 800be2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800be2e:	7bbb      	ldrb	r3, [r7, #14]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d104      	bne.n	800be3e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800be3c:	e058      	b.n	800bef0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800be3e:	7bbb      	ldrb	r3, [r7, #14]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d055      	beq.n	800bef0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2204      	movs	r2, #4
 800be48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800be4c:	e050      	b.n	800bef0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	3340      	adds	r3, #64	; 0x40
 800be52:	4619      	mov	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f860 	bl	800bf1a <GetLineCoding>
 800be5a:	4603      	mov	r3, r0
 800be5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d126      	bne.n	800beb2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be76:	791b      	ldrb	r3, [r3, #4]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d13b      	bne.n	800bef4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be86:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800be88:	429a      	cmp	r2, r3
 800be8a:	d133      	bne.n	800bef4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be96:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800be98:	429a      	cmp	r2, r3
 800be9a:	d12b      	bne.n	800bef4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bea4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d124      	bne.n	800bef4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f982 	bl	800c1b4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800beb0:	e020      	b.n	800bef4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800beb2:	7bbb      	ldrb	r3, [r7, #14]
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d01d      	beq.n	800bef4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	2204      	movs	r2, #4
 800bebc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800bec0:	e018      	b.n	800bef4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f867 	bl	800bf96 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f8f6 	bl	800c0ba <CDC_ProcessReception>
      break;
 800bece:	e014      	b.n	800befa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800bed0:	2100      	movs	r1, #0
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f001 f94d 	bl	800d172 <USBH_ClrFeature>
 800bed8:	4603      	mov	r3, r0
 800beda:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bedc:	7bbb      	ldrb	r3, [r7, #14]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10a      	bne.n	800bef8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800beea:	e005      	b.n	800bef8 <USBH_CDC_Process+0x120>

    default:
      break;
 800beec:	bf00      	nop
 800beee:	e004      	b.n	800befa <USBH_CDC_Process+0x122>
      break;
 800bef0:	bf00      	nop
 800bef2:	e002      	b.n	800befa <USBH_CDC_Process+0x122>
      break;
 800bef4:	bf00      	nop
 800bef6:	e000      	b.n	800befa <USBH_CDC_Process+0x122>
      break;
 800bef8:	bf00      	nop

  }

  return status;
 800befa:	7bfb      	ldrb	r3, [r7, #15]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b082      	sub	sp, #8
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	22a1      	movs	r2, #161	; 0xa1
 800bf28:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2221      	movs	r2, #33	; 0x21
 800bf2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2207      	movs	r2, #7
 800bf40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	2207      	movs	r2, #7
 800bf46:	4619      	mov	r1, r3
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 faf2 	bl	800d532 <USBH_CtlReq>
 800bf4e:	4603      	mov	r3, r0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2221      	movs	r2, #33	; 0x21
 800bf66:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2220      	movs	r2, #32
 800bf6c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2207      	movs	r2, #7
 800bf7e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2207      	movs	r2, #7
 800bf84:	4619      	mov	r1, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f001 fad3 	bl	800d532 <USBH_CtlReq>
 800bf8c:	4603      	mov	r3, r0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b086      	sub	sp, #24
 800bf9a:	af02      	add	r7, sp, #8
 800bf9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfa4:	69db      	ldr	r3, [r3, #28]
 800bfa6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d002      	beq.n	800bfbc <CDC_ProcessTransmission+0x26>
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d023      	beq.n	800c002 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800bfba:	e07a      	b.n	800c0b2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	8b12      	ldrh	r2, [r2, #24]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d90b      	bls.n	800bfe0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	69d9      	ldr	r1, [r3, #28]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	8b1a      	ldrh	r2, [r3, #24]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	7b5b      	ldrb	r3, [r3, #13]
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	9000      	str	r0, [sp, #0]
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f001 fda8 	bl	800db2e <USBH_BulkSendData>
 800bfde:	e00b      	b.n	800bff8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	7b5b      	ldrb	r3, [r3, #13]
 800bfee:	2001      	movs	r0, #1
 800bff0:	9000      	str	r0, [sp, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 fd9b 	bl	800db2e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2202      	movs	r2, #2
 800bffc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c000:	e057      	b.n	800c0b2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	7b5b      	ldrb	r3, [r3, #13]
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f005 fb23 	bl	8011654 <USBH_LL_GetURBState>
 800c00e:	4603      	mov	r3, r0
 800c010:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c012:	7afb      	ldrb	r3, [r7, #11]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d136      	bne.n	800c086 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	8b12      	ldrh	r2, [r2, #24]
 800c020:	4293      	cmp	r3, r2
 800c022:	d90e      	bls.n	800c042 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	8b12      	ldrh	r2, [r2, #24]
 800c02c:	1a9a      	subs	r2, r3, r2
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	8b12      	ldrh	r2, [r2, #24]
 800c03a:	441a      	add	r2, r3
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	61da      	str	r2, [r3, #28]
 800c040:	e002      	b.n	800c048 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d004      	beq.n	800c05a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2201      	movs	r2, #1
 800c054:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c058:	e006      	b.n	800c068 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f892 	bl	800c18c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2204      	movs	r2, #4
 800c06c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c07c:	2300      	movs	r3, #0
 800c07e:	2200      	movs	r2, #0
 800c080:	f001 ffd8 	bl	800e034 <osMessageQueuePut>
      break;
 800c084:	e014      	b.n	800c0b0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800c086:	7afb      	ldrb	r3, [r7, #11]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d111      	bne.n	800c0b0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2204      	movs	r2, #4
 800c098:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f001 ffc2 	bl	800e034 <osMessageQueuePut>
      break;
 800c0b0:	bf00      	nop
  }
}
 800c0b2:	bf00      	nop
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b086      	sub	sp, #24
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0c8:	69db      	ldr	r3, [r3, #28]
 800c0ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d002      	beq.n	800c0e0 <CDC_ProcessReception+0x26>
 800c0da:	2b04      	cmp	r3, #4
 800c0dc:	d00e      	beq.n	800c0fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c0de:	e051      	b.n	800c184 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	6a19      	ldr	r1, [r3, #32]
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	8b5a      	ldrh	r2, [r3, #26]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	7b1b      	ldrb	r3, [r3, #12]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f001 fd43 	bl	800db78 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	2204      	movs	r2, #4
 800c0f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c0fa:	e043      	b.n	800c184 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	7b1b      	ldrb	r3, [r3, #12]
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f005 faa6 	bl	8011654 <USBH_LL_GetURBState>
 800c108:	4603      	mov	r3, r0
 800c10a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c10c:	7cfb      	ldrb	r3, [r7, #19]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d137      	bne.n	800c182 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	7b1b      	ldrb	r3, [r3, #12]
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f005 fa09 	bl	8011530 <USBH_LL_GetLastXferSize>
 800c11e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	429a      	cmp	r2, r3
 800c128:	d016      	beq.n	800c158 <CDC_ProcessReception+0x9e>
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	8b5b      	ldrh	r3, [r3, #26]
 800c12e:	461a      	mov	r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	4293      	cmp	r3, r2
 800c134:	d910      	bls.n	800c158 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	1ad2      	subs	r2, r2, r3
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	6a1a      	ldr	r2, [r3, #32]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	441a      	add	r2, r3
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2203      	movs	r2, #3
 800c152:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c156:	e006      	b.n	800c166 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f81d 	bl	800c1a0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2204      	movs	r2, #4
 800c16a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c17a:	2300      	movs	r3, #0
 800c17c:	2200      	movs	r2, #0
 800c17e:	f001 ff59 	bl	800e034 <osMessageQueuePut>
      break;
 800c182:	bf00      	nop
  }
}
 800c184:	bf00      	nop
 800c186:	3718      	adds	r7, #24
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c194:	bf00      	nop
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d101      	bne.n	800c1e0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c1dc:	2302      	movs	r3, #2
 800c1de:	e044      	b.n	800c26a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	79fa      	ldrb	r2, [r7, #7]
 800c1e4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 f841 	bl	800c280 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d003      	beq.n	800c22c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c22c:	2200      	movs	r2, #0
 800c22e:	2104      	movs	r1, #4
 800c230:	2010      	movs	r0, #16
 800c232:	f001 fe8c 	bl	800df4e <osMessageQueueNew>
 800c236:	4602      	mov	r2, r0
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c23e:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <USBH_Init+0xac>)
 800c240:	4a0d      	ldr	r2, [pc, #52]	; (800c278 <USBH_Init+0xb0>)
 800c242:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c244:	4b0b      	ldr	r3, [pc, #44]	; (800c274 <USBH_Init+0xac>)
 800c246:	2280      	movs	r2, #128	; 0x80
 800c248:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c24a:	4b0a      	ldr	r3, [pc, #40]	; (800c274 <USBH_Init+0xac>)
 800c24c:	2218      	movs	r2, #24
 800c24e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c250:	4a08      	ldr	r2, [pc, #32]	; (800c274 <USBH_Init+0xac>)
 800c252:	68f9      	ldr	r1, [r7, #12]
 800c254:	4809      	ldr	r0, [pc, #36]	; (800c27c <USBH_Init+0xb4>)
 800c256:	f001 fdcd 	bl	800ddf4 <osThreadNew>
 800c25a:	4602      	mov	r2, r0
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f005 f8b0 	bl	80113c8 <USBH_LL_Init>

  return USBH_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20004fe0 	.word	0x20004fe0
 800c278:	080126b4 	.word	0x080126b4
 800c27c:	0800cee9 	.word	0x0800cee9

0800c280 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c288:	2300      	movs	r3, #0
 800c28a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c28c:	2300      	movs	r3, #0
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	e009      	b.n	800c2a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	33e0      	adds	r3, #224	; 0xe0
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	2200      	movs	r2, #0
 800c29e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	60fb      	str	r3, [r7, #12]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b0e      	cmp	r3, #14
 800c2aa:	d9f2      	bls.n	800c292 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60fb      	str	r3, [r7, #12]
 800c2b0:	e009      	b.n	800c2c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c2bc:	2200      	movs	r2, #0
 800c2be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	60fb      	str	r3, [r7, #12]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2cc:	d3f1      	bcc.n	800c2b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2240      	movs	r2, #64	; 0x40
 800c2f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c332:	2300      	movs	r3, #0
 800c334:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d016      	beq.n	800c36a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10e      	bne.n	800c364 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c34c:	1c59      	adds	r1, r3, #1
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	33de      	adds	r3, #222	; 0xde
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]
 800c362:	e004      	b.n	800c36e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c364:	2302      	movs	r3, #2
 800c366:	73fb      	strb	r3, [r7, #15]
 800c368:	e001      	b.n	800c36e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c36a:	2302      	movs	r3, #2
 800c36c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	460b      	mov	r3, r1
 800c386:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c392:	78fa      	ldrb	r2, [r7, #3]
 800c394:	429a      	cmp	r2, r3
 800c396:	d204      	bcs.n	800c3a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	78fa      	ldrb	r2, [r7, #3]
 800c39c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c3a0:	e001      	b.n	800c3a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	4608      	mov	r0, r1
 800c3be:	4611      	mov	r1, r2
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	70fb      	strb	r3, [r7, #3]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	70bb      	strb	r3, [r7, #2]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c3dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c3de:	e025      	b.n	800c42c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	221a      	movs	r2, #26
 800c3e4:	fb02 f303 	mul.w	r3, r2, r3
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	3302      	adds	r3, #2
 800c3f0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	795b      	ldrb	r3, [r3, #5]
 800c3f6:	78fa      	ldrb	r2, [r7, #3]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d002      	beq.n	800c402 <USBH_FindInterface+0x4e>
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	2bff      	cmp	r3, #255	; 0xff
 800c400:	d111      	bne.n	800c426 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c406:	78ba      	ldrb	r2, [r7, #2]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d002      	beq.n	800c412 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c40c:	78bb      	ldrb	r3, [r7, #2]
 800c40e:	2bff      	cmp	r3, #255	; 0xff
 800c410:	d109      	bne.n	800c426 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c416:	787a      	ldrb	r2, [r7, #1]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d002      	beq.n	800c422 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c41c:	787b      	ldrb	r3, [r7, #1]
 800c41e:	2bff      	cmp	r3, #255	; 0xff
 800c420:	d101      	bne.n	800c426 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	e006      	b.n	800c434 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	3301      	adds	r3, #1
 800c42a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d9d6      	bls.n	800c3e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c432:	23ff      	movs	r3, #255	; 0xff
}
 800c434:	4618      	mov	r0, r3
 800c436:	371c      	adds	r7, #28
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f004 fff9 	bl	8011440 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c44e:	2101      	movs	r1, #1
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f005 f912 	bl	801167a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af04      	add	r7, sp, #16
 800c466:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c468:	2302      	movs	r3, #2
 800c46a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d102      	bne.n	800c482 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2203      	movs	r2, #3
 800c480:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b0b      	cmp	r3, #11
 800c48a:	f200 823c 	bhi.w	800c906 <USBH_Process+0x4a6>
 800c48e:	a201      	add	r2, pc, #4	; (adr r2, 800c494 <USBH_Process+0x34>)
 800c490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c494:	0800c4c5 	.word	0x0800c4c5
 800c498:	0800c513 	.word	0x0800c513
 800c49c:	0800c597 	.word	0x0800c597
 800c4a0:	0800c885 	.word	0x0800c885
 800c4a4:	0800c907 	.word	0x0800c907
 800c4a8:	0800c657 	.word	0x0800c657
 800c4ac:	0800c80f 	.word	0x0800c80f
 800c4b0:	0800c6a9 	.word	0x0800c6a9
 800c4b4:	0800c6e5 	.word	0x0800c6e5
 800c4b8:	0800c71f 	.word	0x0800c71f
 800c4bc:	0800c767 	.word	0x0800c767
 800c4c0:	0800c86d 	.word	0x0800c86d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 821c 	beq.w	800c90a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c4d8:	20c8      	movs	r0, #200	; 0xc8
 800c4da:	f005 f915 	bl	8011708 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f005 f80b 	bl	80114fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c508:	2300      	movs	r3, #0
 800c50a:	2200      	movs	r2, #0
 800c50c:	f001 fd92 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c510:	e1fb      	b.n	800c90a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d107      	bne.n	800c52c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2202      	movs	r2, #2
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	e025      	b.n	800c578 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c536:	d914      	bls.n	800c562 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c53e:	3301      	adds	r3, #1
 800c540:	b2da      	uxtb	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d903      	bls.n	800c55a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	220d      	movs	r2, #13
 800c556:	701a      	strb	r2, [r3, #0]
 800c558:	e00e      	b.n	800c578 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	701a      	strb	r2, [r3, #0]
 800c560:	e00a      	b.n	800c578 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c568:	f103 020a 	add.w	r2, r3, #10
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c572:	200a      	movs	r0, #10
 800c574:	f005 f8c8 	bl	8011708 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c58c:	2300      	movs	r3, #0
 800c58e:	2200      	movs	r2, #0
 800c590:	f001 fd50 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      break;
 800c594:	e1c0      	b.n	800c918 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5a6:	2104      	movs	r1, #4
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c5ac:	2064      	movs	r0, #100	; 0x64
 800c5ae:	f005 f8ab 	bl	8011708 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f004 ff7a 	bl	80114ac <USBH_LL_GetSpeed>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2205      	movs	r2, #5
 800c5c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 fb21 	bl	800dc12 <USBH_AllocPipe>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c5d8:	2180      	movs	r1, #128	; 0x80
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f001 fb19 	bl	800dc12 <USBH_AllocPipe>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7919      	ldrb	r1, [r3, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c5fc:	b292      	uxth	r2, r2
 800c5fe:	9202      	str	r2, [sp, #8]
 800c600:	2200      	movs	r2, #0
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	4603      	mov	r3, r0
 800c608:	2280      	movs	r2, #128	; 0x80
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f001 fad2 	bl	800dbb4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	7959      	ldrb	r1, [r3, #5]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c624:	b292      	uxth	r2, r2
 800c626:	9202      	str	r2, [sp, #8]
 800c628:	2200      	movs	r2, #0
 800c62a:	9201      	str	r2, [sp, #4]
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	4603      	mov	r3, r0
 800c630:	2200      	movs	r2, #0
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f001 fabe 	bl	800dbb4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c64c:	2300      	movs	r3, #0
 800c64e:	2200      	movs	r2, #0
 800c650:	f001 fcf0 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      break;
 800c654:	e160      	b.n	800c918 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f964 	bl	800c924 <USBH_HandleEnum>
 800c65c:	4603      	mov	r3, r0
 800c65e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c660:	7bbb      	ldrb	r3, [r7, #14]
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	f040 8152 	bne.w	800c90e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d103      	bne.n	800c684 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2208      	movs	r2, #8
 800c680:	701a      	strb	r2, [r3, #0]
 800c682:	e002      	b.n	800c68a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2207      	movs	r2, #7
 800c688:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2205      	movs	r2, #5
 800c68e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c69e:	2300      	movs	r3, #0
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f001 fcc7 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c6a6:	e132      	b.n	800c90e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 812f 	beq.w	800c912 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6ba:	2101      	movs	r1, #1
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2208      	movs	r2, #8
 800c6c4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2205      	movs	r2, #5
 800c6ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c6da:	2300      	movs	r3, #0
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f001 fca9 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800c6e2:	e116      	b.n	800c912 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fcf8 	bl	800d0e4 <USBH_SetCfg>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d102      	bne.n	800c700 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2209      	movs	r2, #9
 800c6fe:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c714:	2300      	movs	r3, #0
 800c716:	2200      	movs	r2, #0
 800c718:	f001 fc8c 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      break;
 800c71c:	e0fc      	b.n	800c918 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c724:	f003 0320 	and.w	r3, r3, #32
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00a      	beq.n	800c742 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c72c:	2101      	movs	r1, #1
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fcfb 	bl	800d12a <USBH_SetFeature>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d106      	bne.n	800c748 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	220a      	movs	r2, #10
 800c73e:	701a      	strb	r2, [r3, #0]
 800c740:	e002      	b.n	800c748 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	220a      	movs	r2, #10
 800c746:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c75c:	2300      	movs	r3, #0
 800c75e:	2200      	movs	r2, #0
 800c760:	f001 fc68 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      break;
 800c764:	e0d8      	b.n	800c918 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d03f      	beq.n	800c7f0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c778:	2300      	movs	r3, #0
 800c77a:	73fb      	strb	r3, [r7, #15]
 800c77c:	e016      	b.n	800c7ac <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c77e:	7bfa      	ldrb	r2, [r7, #15]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	32de      	adds	r2, #222	; 0xde
 800c784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c788:	791a      	ldrb	r2, [r3, #4]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c790:	429a      	cmp	r2, r3
 800c792:	d108      	bne.n	800c7a6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c794:	7bfa      	ldrb	r2, [r7, #15]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	32de      	adds	r2, #222	; 0xde
 800c79a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c7a4:	e005      	b.n	800c7b2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	73fb      	strb	r3, [r7, #15]
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0e5      	beq.n	800c77e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d016      	beq.n	800c7ea <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	4798      	blx	r3
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d109      	bne.n	800c7e2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2206      	movs	r2, #6
 800c7d2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7da:	2103      	movs	r1, #3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	4798      	blx	r3
 800c7e0:	e006      	b.n	800c7f0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	220d      	movs	r2, #13
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	e002      	b.n	800c7f0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	220d      	movs	r2, #13
 800c7ee:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2205      	movs	r2, #5
 800c7f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c804:	2300      	movs	r3, #0
 800c806:	2200      	movs	r2, #0
 800c808:	f001 fc14 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      break;
 800c80c:	e084      	b.n	800c918 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c814:	2b00      	cmp	r3, #0
 800c816:	d017      	beq.n	800c848 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	4798      	blx	r3
 800c824:	4603      	mov	r3, r0
 800c826:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c828:	7bbb      	ldrb	r3, [r7, #14]
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d103      	bne.n	800c838 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	220b      	movs	r2, #11
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	e00a      	b.n	800c84e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800c838:	7bbb      	ldrb	r3, [r7, #14]
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d106      	bne.n	800c84e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	220d      	movs	r2, #13
 800c844:	701a      	strb	r2, [r3, #0]
 800c846:	e002      	b.n	800c84e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	220d      	movs	r2, #13
 800c84c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2205      	movs	r2, #5
 800c852:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c862:	2300      	movs	r3, #0
 800c864:	2200      	movs	r2, #0
 800c866:	f001 fbe5 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      break;
 800c86a:	e055      	b.n	800c918 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c872:	2b00      	cmp	r3, #0
 800c874:	d04f      	beq.n	800c916 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	4798      	blx	r3
      }
      break;
 800c882:	e048      	b.n	800c916 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff fcf7 	bl	800c280 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d009      	beq.n	800c8b0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d005      	beq.n	800c8c6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8c0:	2105      	movs	r1, #5
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d107      	bne.n	800c8e2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7ff fdb0 	bl	800c440 <USBH_Start>
 800c8e0:	e002      	b.n	800c8e8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f004 fdac 	bl	8011440 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	2200      	movs	r2, #0
 800c900:	f001 fb98 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      break;
 800c904:	e008      	b.n	800c918 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c906:	bf00      	nop
 800c908:	e006      	b.n	800c918 <USBH_Process+0x4b8>
      break;
 800c90a:	bf00      	nop
 800c90c:	e004      	b.n	800c918 <USBH_Process+0x4b8>
      break;
 800c90e:	bf00      	nop
 800c910:	e002      	b.n	800c918 <USBH_Process+0x4b8>
    break;
 800c912:	bf00      	nop
 800c914:	e000      	b.n	800c918 <USBH_Process+0x4b8>
      break;
 800c916:	bf00      	nop
  }
  return USBH_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop

0800c924 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b088      	sub	sp, #32
 800c928:	af04      	add	r7, sp, #16
 800c92a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c92c:	2301      	movs	r3, #1
 800c92e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c930:	2301      	movs	r3, #1
 800c932:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	785b      	ldrb	r3, [r3, #1]
 800c938:	2b07      	cmp	r3, #7
 800c93a:	f200 8208 	bhi.w	800cd4e <USBH_HandleEnum+0x42a>
 800c93e:	a201      	add	r2, pc, #4	; (adr r2, 800c944 <USBH_HandleEnum+0x20>)
 800c940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c944:	0800c965 	.word	0x0800c965
 800c948:	0800ca23 	.word	0x0800ca23
 800c94c:	0800ca8d 	.word	0x0800ca8d
 800c950:	0800cb1b 	.word	0x0800cb1b
 800c954:	0800cb85 	.word	0x0800cb85
 800c958:	0800cbf5 	.word	0x0800cbf5
 800c95c:	0800cc91 	.word	0x0800cc91
 800c960:	0800cd0f 	.word	0x0800cd0f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c964:	2108      	movs	r1, #8
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 faec 	bl	800cf44 <USBH_Get_DevDesc>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c970:	7bbb      	ldrb	r3, [r7, #14]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d130      	bne.n	800c9d8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	7919      	ldrb	r1, [r3, #4]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c99a:	b292      	uxth	r2, r2
 800c99c:	9202      	str	r2, [sp, #8]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	9201      	str	r2, [sp, #4]
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2280      	movs	r2, #128	; 0x80
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f001 f903 	bl	800dbb4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	7959      	ldrb	r1, [r3, #5]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c9c2:	b292      	uxth	r2, r2
 800c9c4:	9202      	str	r2, [sp, #8]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	9201      	str	r2, [sp, #4]
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f001 f8ef 	bl	800dbb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c9d6:	e1bc      	b.n	800cd52 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
 800c9da:	2b03      	cmp	r3, #3
 800c9dc:	f040 81b9 	bne.w	800cd52 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c9f6:	2b03      	cmp	r3, #3
 800c9f8:	d903      	bls.n	800ca02 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	220d      	movs	r2, #13
 800c9fe:	701a      	strb	r2, [r3, #0]
      break;
 800ca00:	e1a7      	b.n	800cd52 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	795b      	ldrb	r3, [r3, #5]
 800ca06:	4619      	mov	r1, r3
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f001 f923 	bl	800dc54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	791b      	ldrb	r3, [r3, #4]
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f001 f91d 	bl	800dc54 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	701a      	strb	r2, [r3, #0]
      break;
 800ca20:	e197      	b.n	800cd52 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ca22:	2112      	movs	r1, #18
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fa8d 	bl	800cf44 <USBH_Get_DevDesc>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca2e:	7bbb      	ldrb	r3, [r7, #14]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d103      	bne.n	800ca3c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2202      	movs	r2, #2
 800ca38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ca3a:	e18c      	b.n	800cd56 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	f040 8189 	bne.w	800cd56 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d903      	bls.n	800ca66 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	220d      	movs	r2, #13
 800ca62:	701a      	strb	r2, [r3, #0]
      break;
 800ca64:	e177      	b.n	800cd56 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	795b      	ldrb	r3, [r3, #5]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 f8f1 	bl	800dc54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	791b      	ldrb	r3, [r3, #4]
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f001 f8eb 	bl	800dc54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	701a      	strb	r2, [r3, #0]
      break;
 800ca8a:	e164      	b.n	800cd56 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fb04 	bl	800d09c <USBH_SetAddress>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca98:	7bbb      	ldrb	r3, [r7, #14]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d132      	bne.n	800cb04 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ca9e:	2002      	movs	r0, #2
 800caa0:	f004 fe32 	bl	8011708 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2203      	movs	r2, #3
 800cab0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	7919      	ldrb	r1, [r3, #4]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cac6:	b292      	uxth	r2, r2
 800cac8:	9202      	str	r2, [sp, #8]
 800caca:	2200      	movs	r2, #0
 800cacc:	9201      	str	r2, [sp, #4]
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	4603      	mov	r3, r0
 800cad2:	2280      	movs	r2, #128	; 0x80
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f001 f86d 	bl	800dbb4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	7959      	ldrb	r1, [r3, #5]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800caee:	b292      	uxth	r2, r2
 800caf0:	9202      	str	r2, [sp, #8]
 800caf2:	2200      	movs	r2, #0
 800caf4:	9201      	str	r2, [sp, #4]
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	4603      	mov	r3, r0
 800cafa:	2200      	movs	r2, #0
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f001 f859 	bl	800dbb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cb02:	e12a      	b.n	800cd5a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	2b03      	cmp	r3, #3
 800cb08:	f040 8127 	bne.w	800cd5a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	220d      	movs	r2, #13
 800cb10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	705a      	strb	r2, [r3, #1]
      break;
 800cb18:	e11f      	b.n	800cd5a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cb1a:	2109      	movs	r1, #9
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fa39 	bl	800cf94 <USBH_Get_CfgDesc>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d103      	bne.n	800cb34 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2204      	movs	r2, #4
 800cb30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cb32:	e114      	b.n	800cd5e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb34:	7bbb      	ldrb	r3, [r7, #14]
 800cb36:	2b03      	cmp	r3, #3
 800cb38:	f040 8111 	bne.w	800cd5e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cb42:	3301      	adds	r3, #1
 800cb44:	b2da      	uxtb	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d903      	bls.n	800cb5e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	220d      	movs	r2, #13
 800cb5a:	701a      	strb	r2, [r3, #0]
      break;
 800cb5c:	e0ff      	b.n	800cd5e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	795b      	ldrb	r3, [r3, #5]
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f001 f875 	bl	800dc54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	791b      	ldrb	r3, [r3, #4]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f001 f86f 	bl	800dc54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	701a      	strb	r2, [r3, #0]
      break;
 800cb82:	e0ec      	b.n	800cd5e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fa01 	bl	800cf94 <USBH_Get_CfgDesc>
 800cb92:	4603      	mov	r3, r0
 800cb94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb96:	7bbb      	ldrb	r3, [r7, #14]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d103      	bne.n	800cba4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2205      	movs	r2, #5
 800cba0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cba2:	e0de      	b.n	800cd62 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cba4:	7bbb      	ldrb	r3, [r7, #14]
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	f040 80db 	bne.w	800cd62 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d903      	bls.n	800cbce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	220d      	movs	r2, #13
 800cbca:	701a      	strb	r2, [r3, #0]
      break;
 800cbcc:	e0c9      	b.n	800cd62 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	795b      	ldrb	r3, [r3, #5]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f001 f83d 	bl	800dc54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	791b      	ldrb	r3, [r3, #4]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f001 f837 	bl	800dc54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	701a      	strb	r2, [r3, #0]
      break;
 800cbf2:	e0b6      	b.n	800cd62 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d036      	beq.n	800cc6c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cc0a:	23ff      	movs	r3, #255	; 0xff
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 f9e5 	bl	800cfdc <USBH_Get_StringDesc>
 800cc12:	4603      	mov	r3, r0
 800cc14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d111      	bne.n	800cc40 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2206      	movs	r2, #6
 800cc20:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2205      	movs	r2, #5
 800cc26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc36:	2300      	movs	r3, #0
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f001 f9fb 	bl	800e034 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cc3e:	e092      	b.n	800cd66 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	f040 808f 	bne.w	800cd66 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2206      	movs	r2, #6
 800cc4c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2205      	movs	r2, #5
 800cc52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc62:	2300      	movs	r3, #0
 800cc64:	2200      	movs	r2, #0
 800cc66:	f001 f9e5 	bl	800e034 <osMessageQueuePut>
      break;
 800cc6a:	e07c      	b.n	800cd66 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2206      	movs	r2, #6
 800cc70:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2205      	movs	r2, #5
 800cc76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc86:	2300      	movs	r3, #0
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f001 f9d3 	bl	800e034 <osMessageQueuePut>
      break;
 800cc8e:	e06a      	b.n	800cd66 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d027      	beq.n	800ccea <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cca6:	23ff      	movs	r3, #255	; 0xff
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 f997 	bl	800cfdc <USBH_Get_StringDesc>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d103      	bne.n	800ccc0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2207      	movs	r2, #7
 800ccbc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ccbe:	e054      	b.n	800cd6a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ccc0:	7bbb      	ldrb	r3, [r7, #14]
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d151      	bne.n	800cd6a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2207      	movs	r2, #7
 800ccca:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2205      	movs	r2, #5
 800ccd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cce0:	2300      	movs	r3, #0
 800cce2:	2200      	movs	r2, #0
 800cce4:	f001 f9a6 	bl	800e034 <osMessageQueuePut>
      break;
 800cce8:	e03f      	b.n	800cd6a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2207      	movs	r2, #7
 800ccee:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2205      	movs	r2, #5
 800ccf4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd04:	2300      	movs	r3, #0
 800cd06:	2200      	movs	r2, #0
 800cd08:	f001 f994 	bl	800e034 <osMessageQueuePut>
      break;
 800cd0c:	e02d      	b.n	800cd6a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d017      	beq.n	800cd48 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cd24:	23ff      	movs	r3, #255	; 0xff
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 f958 	bl	800cfdc <USBH_Get_StringDesc>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cd30:	7bbb      	ldrb	r3, [r7, #14]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d102      	bne.n	800cd3c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cd36:	2300      	movs	r3, #0
 800cd38:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cd3a:	e018      	b.n	800cd6e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd3c:	7bbb      	ldrb	r3, [r7, #14]
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d115      	bne.n	800cd6e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
      break;
 800cd46:	e012      	b.n	800cd6e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73fb      	strb	r3, [r7, #15]
      break;
 800cd4c:	e00f      	b.n	800cd6e <USBH_HandleEnum+0x44a>

    default:
      break;
 800cd4e:	bf00      	nop
 800cd50:	e00e      	b.n	800cd70 <USBH_HandleEnum+0x44c>
      break;
 800cd52:	bf00      	nop
 800cd54:	e00c      	b.n	800cd70 <USBH_HandleEnum+0x44c>
      break;
 800cd56:	bf00      	nop
 800cd58:	e00a      	b.n	800cd70 <USBH_HandleEnum+0x44c>
      break;
 800cd5a:	bf00      	nop
 800cd5c:	e008      	b.n	800cd70 <USBH_HandleEnum+0x44c>
      break;
 800cd5e:	bf00      	nop
 800cd60:	e006      	b.n	800cd70 <USBH_HandleEnum+0x44c>
      break;
 800cd62:	bf00      	nop
 800cd64:	e004      	b.n	800cd70 <USBH_HandleEnum+0x44c>
      break;
 800cd66:	bf00      	nop
 800cd68:	e002      	b.n	800cd70 <USBH_HandleEnum+0x44c>
      break;
 800cd6a:	bf00      	nop
 800cd6c:	e000      	b.n	800cd70 <USBH_HandleEnum+0x44c>
      break;
 800cd6e:	bf00      	nop
  }
  return Status;
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop

0800cd7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cd8e:	bf00      	nop
 800cd90:	370c      	adds	r7, #12
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b082      	sub	sp, #8
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cda8:	1c5a      	adds	r2, r3, #1
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 f804 	bl	800cdbe <USBH_HandleSof>
}
 800cdb6:	bf00      	nop
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b0b      	cmp	r3, #11
 800cdce:	d10a      	bne.n	800cde6 <USBH_HandleSof+0x28>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d005      	beq.n	800cde6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	4798      	blx	r3
  }
}
 800cde6:	bf00      	nop
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce12:	2300      	movs	r3, #0
 800ce14:	2200      	movs	r2, #0
 800ce16:	f001 f90d 	bl	800e034 <osMessageQueuePut>
#endif
#endif

  return;
 800ce1a:	bf00      	nop
}
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b083      	sub	sp, #12
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ce32:	bf00      	nop
}
 800ce34:	370c      	adds	r7, #12
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr

0800ce3e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2201      	movs	r2, #1
 800ce62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce72:	2300      	movs	r3, #0
 800ce74:	2200      	movs	r2, #0
 800ce76:	f001 f8dd 	bl	800e034 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f004 fae6 	bl	8011476 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	791b      	ldrb	r3, [r3, #4]
 800ceae:	4619      	mov	r1, r3
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 fecf 	bl	800dc54 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	795b      	ldrb	r3, [r3, #5]
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fec9 	bl	800dc54 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ced6:	2300      	movs	r3, #0
 800ced8:	2200      	movs	r2, #0
 800ceda:	f001 f8ab 	bl	800e034 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cefc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf00:	2200      	movs	r2, #0
 800cf02:	f001 f8f7 	bl	800e0f4 <osMessageQueueGet>
 800cf06:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1f0      	bne.n	800cef0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff faa6 	bl	800c460 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cf14:	e7ec      	b.n	800cef0 <USBH_Process_OS+0x8>

0800cf16 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b082      	sub	sp, #8
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf32:	2300      	movs	r3, #0
 800cf34:	2200      	movs	r2, #0
 800cf36:	f001 f87d 	bl	800e034 <osMessageQueuePut>
#endif

  return USBH_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b086      	sub	sp, #24
 800cf48:	af02      	add	r7, sp, #8
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cf56:	78fb      	ldrb	r3, [r7, #3]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf62:	2100      	movs	r1, #0
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f864 	bl	800d032 <USBH_GetDescriptor>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73fb      	strb	r3, [r7, #15]
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10a      	bne.n	800cf8a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f203 3026 	addw	r0, r3, #806	; 0x326
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cf80:	78fa      	ldrb	r2, [r7, #3]
 800cf82:	b292      	uxth	r2, r2
 800cf84:	4619      	mov	r1, r3
 800cf86:	f000 f918 	bl	800d1ba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800cf8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af02      	add	r7, sp, #8
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	331c      	adds	r3, #28
 800cfa4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cfa6:	887b      	ldrh	r3, [r7, #2]
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f83d 	bl	800d032 <USBH_GetDescriptor>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	72fb      	strb	r3, [r7, #11]
 800cfbc:	7afb      	ldrb	r3, [r7, #11]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d107      	bne.n	800cfd2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cfc8:	887a      	ldrh	r2, [r7, #2]
 800cfca:	68f9      	ldr	r1, [r7, #12]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 f964 	bl	800d29a <USBH_ParseCfgDesc>
  }

  return status;
 800cfd2:	7afb      	ldrb	r3, [r7, #11]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b088      	sub	sp, #32
 800cfe0:	af02      	add	r7, sp, #8
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	607a      	str	r2, [r7, #4]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	460b      	mov	r3, r1
 800cfea:	72fb      	strb	r3, [r7, #11]
 800cfec:	4613      	mov	r3, r2
 800cfee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800cff0:	7afb      	ldrb	r3, [r7, #11]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cff8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d000:	893b      	ldrh	r3, [r7, #8]
 800d002:	9300      	str	r3, [sp, #0]
 800d004:	460b      	mov	r3, r1
 800d006:	2100      	movs	r1, #0
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f000 f812 	bl	800d032 <USBH_GetDescriptor>
 800d00e:	4603      	mov	r3, r0
 800d010:	75fb      	strb	r3, [r7, #23]
 800d012:	7dfb      	ldrb	r3, [r7, #23]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d107      	bne.n	800d028 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d01e:	893a      	ldrh	r2, [r7, #8]
 800d020:	6879      	ldr	r1, [r7, #4]
 800d022:	4618      	mov	r0, r3
 800d024:	f000 fa37 	bl	800d496 <USBH_ParseStringDesc>
  }

  return status;
 800d028:	7dfb      	ldrb	r3, [r7, #23]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	607b      	str	r3, [r7, #4]
 800d03c:	460b      	mov	r3, r1
 800d03e:	72fb      	strb	r3, [r7, #11]
 800d040:	4613      	mov	r3, r2
 800d042:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	789b      	ldrb	r3, [r3, #2]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d11c      	bne.n	800d086 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d04c:	7afb      	ldrb	r3, [r7, #11]
 800d04e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d052:	b2da      	uxtb	r2, r3
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2206      	movs	r2, #6
 800d05c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	893a      	ldrh	r2, [r7, #8]
 800d062:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d064:	893b      	ldrh	r3, [r7, #8]
 800d066:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d06e:	d104      	bne.n	800d07a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f240 4209 	movw	r2, #1033	; 0x409
 800d076:	829a      	strh	r2, [r3, #20]
 800d078:	e002      	b.n	800d080 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2200      	movs	r2, #0
 800d07e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	8b3a      	ldrh	r2, [r7, #24]
 800d084:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d086:	8b3b      	ldrh	r3, [r7, #24]
 800d088:	461a      	mov	r2, r3
 800d08a:	6879      	ldr	r1, [r7, #4]
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f000 fa50 	bl	800d532 <USBH_CtlReq>
 800d092:	4603      	mov	r3, r0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	789b      	ldrb	r3, [r3, #2]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d10f      	bne.n	800d0d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2205      	movs	r2, #5
 800d0ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d0bc:	78fb      	ldrb	r3, [r7, #3]
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fa2c 	bl	800d532 <USBH_CtlReq>
 800d0da:	4603      	mov	r3, r0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	789b      	ldrb	r3, [r3, #2]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d10e      	bne.n	800d116 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2209      	movs	r2, #9
 800d102:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	887a      	ldrh	r2, [r7, #2]
 800d108:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d116:	2200      	movs	r2, #0
 800d118:	2100      	movs	r1, #0
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fa09 	bl	800d532 <USBH_CtlReq>
 800d120:	4603      	mov	r3, r0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b082      	sub	sp, #8
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	460b      	mov	r3, r1
 800d134:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	789b      	ldrb	r3, [r3, #2]
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d10f      	bne.n	800d15e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2203      	movs	r2, #3
 800d148:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d14a:	78fb      	ldrb	r3, [r7, #3]
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d15e:	2200      	movs	r2, #0
 800d160:	2100      	movs	r1, #0
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f9e5 	bl	800d532 <USBH_CtlReq>
 800d168:	4603      	mov	r3, r0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b082      	sub	sp, #8
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
 800d17a:	460b      	mov	r3, r1
 800d17c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	789b      	ldrb	r3, [r3, #2]
 800d182:	2b01      	cmp	r3, #1
 800d184:	d10f      	bne.n	800d1a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2202      	movs	r2, #2
 800d18a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d198:	78fb      	ldrb	r3, [r7, #3]
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 f9c1 	bl	800d532 <USBH_CtlReq>
 800d1b0:	4603      	mov	r3, r0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b085      	sub	sp, #20
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	60f8      	str	r0, [r7, #12]
 800d1c2:	60b9      	str	r1, [r7, #8]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	781a      	ldrb	r2, [r3, #0]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	785a      	ldrb	r2, [r3, #1]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	3302      	adds	r3, #2
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	3303      	adds	r3, #3
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	021b      	lsls	r3, r3, #8
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	791a      	ldrb	r2, [r3, #4]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	795a      	ldrb	r2, [r3, #5]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	799a      	ldrb	r2, [r3, #6]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	79da      	ldrb	r2, [r3, #7]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d214:	88fb      	ldrh	r3, [r7, #6]
 800d216:	2b08      	cmp	r3, #8
 800d218:	d939      	bls.n	800d28e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	3308      	adds	r3, #8
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	b29a      	uxth	r2, r3
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	3309      	adds	r3, #9
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	021b      	lsls	r3, r3, #8
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	4313      	orrs	r3, r2
 800d230:	b29a      	uxth	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	330a      	adds	r3, #10
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	330b      	adds	r3, #11
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	b29b      	uxth	r3, r3
 800d246:	021b      	lsls	r3, r3, #8
 800d248:	b29b      	uxth	r3, r3
 800d24a:	4313      	orrs	r3, r2
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	330c      	adds	r3, #12
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	b29a      	uxth	r2, r3
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	330d      	adds	r3, #13
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	b29b      	uxth	r3, r3
 800d262:	021b      	lsls	r3, r3, #8
 800d264:	b29b      	uxth	r3, r3
 800d266:	4313      	orrs	r3, r2
 800d268:	b29a      	uxth	r2, r3
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	7b9a      	ldrb	r2, [r3, #14]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	7bda      	ldrb	r2, [r3, #15]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	7c1a      	ldrb	r2, [r3, #16]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	7c5a      	ldrb	r2, [r3, #17]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	745a      	strb	r2, [r3, #17]
  }
}
 800d28e:	bf00      	nop
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b08a      	sub	sp, #40	; 0x28
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	60b9      	str	r1, [r7, #8]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	781a      	ldrb	r2, [r3, #0]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	785a      	ldrb	r2, [r3, #1]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	3302      	adds	r3, #2
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	3303      	adds	r3, #3
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	021b      	lsls	r3, r3, #8
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	b29a      	uxth	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	791a      	ldrb	r2, [r3, #4]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	795a      	ldrb	r2, [r3, #5]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	799a      	ldrb	r2, [r3, #6]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	79da      	ldrb	r2, [r3, #7]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	7a1a      	ldrb	r2, [r3, #8]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d310:	88fb      	ldrh	r3, [r7, #6]
 800d312:	2b09      	cmp	r3, #9
 800d314:	d95f      	bls.n	800d3d6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d316:	2309      	movs	r3, #9
 800d318:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d31e:	e051      	b.n	800d3c4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d320:	f107 0316 	add.w	r3, r7, #22
 800d324:	4619      	mov	r1, r3
 800d326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d328:	f000 f8e8 	bl	800d4fc <USBH_GetNextDesc>
 800d32c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d330:	785b      	ldrb	r3, [r3, #1]
 800d332:	2b04      	cmp	r3, #4
 800d334:	d146      	bne.n	800d3c4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d33a:	221a      	movs	r2, #26
 800d33c:	fb02 f303 	mul.w	r3, r2, r3
 800d340:	3308      	adds	r3, #8
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	4413      	add	r3, r2
 800d346:	3302      	adds	r3, #2
 800d348:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d34a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d34c:	69f8      	ldr	r0, [r7, #28]
 800d34e:	f000 f846 	bl	800d3de <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d352:	2300      	movs	r3, #0
 800d354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d358:	2300      	movs	r3, #0
 800d35a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d35c:	e022      	b.n	800d3a4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d35e:	f107 0316 	add.w	r3, r7, #22
 800d362:	4619      	mov	r1, r3
 800d364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d366:	f000 f8c9 	bl	800d4fc <USBH_GetNextDesc>
 800d36a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36e:	785b      	ldrb	r3, [r3, #1]
 800d370:	2b05      	cmp	r3, #5
 800d372:	d117      	bne.n	800d3a4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d378:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d37c:	3201      	adds	r2, #1
 800d37e:	00d2      	lsls	r2, r2, #3
 800d380:	211a      	movs	r1, #26
 800d382:	fb01 f303 	mul.w	r3, r1, r3
 800d386:	4413      	add	r3, r2
 800d388:	3308      	adds	r3, #8
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	4413      	add	r3, r2
 800d38e:	3304      	adds	r3, #4
 800d390:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d394:	69b8      	ldr	r0, [r7, #24]
 800d396:	f000 f851 	bl	800d43c <USBH_ParseEPDesc>
            ep_ix++;
 800d39a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d39e:	3301      	adds	r3, #1
 800d3a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	791b      	ldrb	r3, [r3, #4]
 800d3a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d204      	bcs.n	800d3ba <USBH_ParseCfgDesc+0x120>
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	885a      	ldrh	r2, [r3, #2]
 800d3b4:	8afb      	ldrh	r3, [r7, #22]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d8d1      	bhi.n	800d35e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d3ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d3be:	3301      	adds	r3, #1
 800d3c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d3c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d804      	bhi.n	800d3d6 <USBH_ParseCfgDesc+0x13c>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	885a      	ldrh	r2, [r3, #2]
 800d3d0:	8afb      	ldrh	r3, [r7, #22]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d8a4      	bhi.n	800d320 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d3d6:	bf00      	nop
 800d3d8:	3728      	adds	r7, #40	; 0x28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d3de:	b480      	push	{r7}
 800d3e0:	b083      	sub	sp, #12
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	781a      	ldrb	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	785a      	ldrb	r2, [r3, #1]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	789a      	ldrb	r2, [r3, #2]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	78da      	ldrb	r2, [r3, #3]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	791a      	ldrb	r2, [r3, #4]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	795a      	ldrb	r2, [r3, #5]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	799a      	ldrb	r2, [r3, #6]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	79da      	ldrb	r2, [r3, #7]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	7a1a      	ldrb	r2, [r3, #8]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	721a      	strb	r2, [r3, #8]
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	781a      	ldrb	r2, [r3, #0]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	785a      	ldrb	r2, [r3, #1]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	789a      	ldrb	r2, [r3, #2]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	78da      	ldrb	r2, [r3, #3]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	3304      	adds	r3, #4
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	3305      	adds	r3, #5
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	b29b      	uxth	r3, r3
 800d476:	021b      	lsls	r3, r3, #8
 800d478:	b29b      	uxth	r3, r3
 800d47a:	4313      	orrs	r3, r2
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	799a      	ldrb	r2, [r3, #6]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	719a      	strb	r2, [r3, #6]
}
 800d48a:	bf00      	nop
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d496:	b480      	push	{r7}
 800d498:	b087      	sub	sp, #28
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	60f8      	str	r0, [r7, #12]
 800d49e:	60b9      	str	r1, [r7, #8]
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d120      	bne.n	800d4f0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	1e9a      	subs	r2, r3, #2
 800d4b4:	88fb      	ldrh	r3, [r7, #6]
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	bf28      	it	cs
 800d4ba:	4613      	movcs	r3, r2
 800d4bc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3302      	adds	r3, #2
 800d4c2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	82fb      	strh	r3, [r7, #22]
 800d4c8:	e00b      	b.n	800d4e2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d4ca:	8afb      	ldrh	r3, [r7, #22]
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	781a      	ldrb	r2, [r3, #0]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d4dc:	8afb      	ldrh	r3, [r7, #22]
 800d4de:	3302      	adds	r3, #2
 800d4e0:	82fb      	strh	r3, [r7, #22]
 800d4e2:	8afa      	ldrh	r2, [r7, #22]
 800d4e4:	8abb      	ldrh	r3, [r7, #20]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d3ef      	bcc.n	800d4ca <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	701a      	strb	r2, [r3, #0]
  }
}
 800d4f0:	bf00      	nop
 800d4f2:	371c      	adds	r7, #28
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	881a      	ldrh	r2, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	b29b      	uxth	r3, r3
 800d510:	4413      	add	r3, r2
 800d512:	b29a      	uxth	r2, r3
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4413      	add	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d524:	68fb      	ldr	r3, [r7, #12]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3714      	adds	r7, #20
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b086      	sub	sp, #24
 800d536:	af00      	add	r7, sp, #0
 800d538:	60f8      	str	r0, [r7, #12]
 800d53a:	60b9      	str	r1, [r7, #8]
 800d53c:	4613      	mov	r3, r2
 800d53e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d540:	2301      	movs	r3, #1
 800d542:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	789b      	ldrb	r3, [r3, #2]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d002      	beq.n	800d552 <USBH_CtlReq+0x20>
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d01d      	beq.n	800d58c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d550:	e043      	b.n	800d5da <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	88fa      	ldrh	r2, [r7, #6]
 800d55c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2202      	movs	r2, #2
 800d568:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d56a:	2301      	movs	r3, #1
 800d56c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2203      	movs	r2, #3
 800d572:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d582:	2300      	movs	r3, #0
 800d584:	2200      	movs	r2, #0
 800d586:	f000 fd55 	bl	800e034 <osMessageQueuePut>
      break;
 800d58a:	e026      	b.n	800d5da <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 f829 	bl	800d5e4 <USBH_HandleControl>
 800d592:	4603      	mov	r3, r0
 800d594:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d596:	7dfb      	ldrb	r3, [r7, #23]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d002      	beq.n	800d5a2 <USBH_CtlReq+0x70>
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	d106      	bne.n	800d5b0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	761a      	strb	r2, [r3, #24]
 800d5ae:	e005      	b.n	800d5bc <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d5b0:	7dfb      	ldrb	r3, [r7, #23]
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d102      	bne.n	800d5bc <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2203      	movs	r2, #3
 800d5c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f000 fd2e 	bl	800e034 <osMessageQueuePut>
      break;
 800d5d8:	bf00      	nop
  }
  return status;
 800d5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3718      	adds	r7, #24
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af02      	add	r7, sp, #8
 800d5ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	7e1b      	ldrb	r3, [r3, #24]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	2b0a      	cmp	r3, #10
 800d5fc:	f200 8229 	bhi.w	800da52 <USBH_HandleControl+0x46e>
 800d600:	a201      	add	r2, pc, #4	; (adr r2, 800d608 <USBH_HandleControl+0x24>)
 800d602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d606:	bf00      	nop
 800d608:	0800d635 	.word	0x0800d635
 800d60c:	0800d64f 	.word	0x0800d64f
 800d610:	0800d6f1 	.word	0x0800d6f1
 800d614:	0800d717 	.word	0x0800d717
 800d618:	0800d7a3 	.word	0x0800d7a3
 800d61c:	0800d7cd 	.word	0x0800d7cd
 800d620:	0800d88f 	.word	0x0800d88f
 800d624:	0800d8b1 	.word	0x0800d8b1
 800d628:	0800d943 	.word	0x0800d943
 800d62c:	0800d969 	.word	0x0800d969
 800d630:	0800d9fb 	.word	0x0800d9fb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f103 0110 	add.w	r1, r3, #16
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	795b      	ldrb	r3, [r3, #5]
 800d63e:	461a      	mov	r2, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 fa17 	bl	800da74 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2202      	movs	r2, #2
 800d64a:	761a      	strb	r2, [r3, #24]
      break;
 800d64c:	e20c      	b.n	800da68 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	795b      	ldrb	r3, [r3, #5]
 800d652:	4619      	mov	r1, r3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f003 fffd 	bl	8011654 <USBH_LL_GetURBState>
 800d65a:	4603      	mov	r3, r0
 800d65c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d65e:	7bbb      	ldrb	r3, [r7, #14]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d12c      	bne.n	800d6be <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	7c1b      	ldrb	r3, [r3, #16]
 800d668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d66c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	8adb      	ldrh	r3, [r3, #22]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00a      	beq.n	800d68c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d676:	7b7b      	ldrb	r3, [r7, #13]
 800d678:	2b80      	cmp	r3, #128	; 0x80
 800d67a:	d103      	bne.n	800d684 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2203      	movs	r2, #3
 800d680:	761a      	strb	r2, [r3, #24]
 800d682:	e00d      	b.n	800d6a0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2205      	movs	r2, #5
 800d688:	761a      	strb	r2, [r3, #24]
 800d68a:	e009      	b.n	800d6a0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d68c:	7b7b      	ldrb	r3, [r7, #13]
 800d68e:	2b80      	cmp	r3, #128	; 0x80
 800d690:	d103      	bne.n	800d69a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2209      	movs	r2, #9
 800d696:	761a      	strb	r2, [r3, #24]
 800d698:	e002      	b.n	800d6a0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2207      	movs	r2, #7
 800d69e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2203      	movs	r2, #3
 800d6a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f000 fcbc 	bl	800e034 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d6bc:	e1cb      	b.n	800da56 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d6be:	7bbb      	ldrb	r3, [r7, #14]
 800d6c0:	2b04      	cmp	r3, #4
 800d6c2:	d003      	beq.n	800d6cc <USBH_HandleControl+0xe8>
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	f040 81c5 	bne.w	800da56 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	220b      	movs	r2, #11
 800d6d0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2203      	movs	r2, #3
 800d6d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f000 fca3 	bl	800e034 <osMessageQueuePut>
      break;
 800d6ee:	e1b2      	b.n	800da56 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6899      	ldr	r1, [r3, #8]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	899a      	ldrh	r2, [r3, #12]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	791b      	ldrb	r3, [r3, #4]
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f9f2 	bl	800daf2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2204      	movs	r2, #4
 800d712:	761a      	strb	r2, [r3, #24]
      break;
 800d714:	e1a8      	b.n	800da68 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	791b      	ldrb	r3, [r3, #4]
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f003 ff99 	bl	8011654 <USBH_LL_GetURBState>
 800d722:	4603      	mov	r3, r0
 800d724:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d726:	7bbb      	ldrb	r3, [r7, #14]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d110      	bne.n	800d74e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2209      	movs	r2, #9
 800d730:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2203      	movs	r2, #3
 800d736:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d746:	2300      	movs	r3, #0
 800d748:	2200      	movs	r2, #0
 800d74a:	f000 fc73 	bl	800e034 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d74e:	7bbb      	ldrb	r3, [r7, #14]
 800d750:	2b05      	cmp	r3, #5
 800d752:	d110      	bne.n	800d776 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d754:	2303      	movs	r3, #3
 800d756:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2203      	movs	r2, #3
 800d75c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d76c:	2300      	movs	r3, #0
 800d76e:	2200      	movs	r2, #0
 800d770:	f000 fc60 	bl	800e034 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d774:	e171      	b.n	800da5a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d776:	7bbb      	ldrb	r3, [r7, #14]
 800d778:	2b04      	cmp	r3, #4
 800d77a:	f040 816e 	bne.w	800da5a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	220b      	movs	r2, #11
 800d782:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2203      	movs	r2, #3
 800d788:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d798:	2300      	movs	r3, #0
 800d79a:	2200      	movs	r2, #0
 800d79c:	f000 fc4a 	bl	800e034 <osMessageQueuePut>
      break;
 800d7a0:	e15b      	b.n	800da5a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6899      	ldr	r1, [r3, #8]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	899a      	ldrh	r2, [r3, #12]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	795b      	ldrb	r3, [r3, #5]
 800d7ae:	2001      	movs	r0, #1
 800d7b0:	9000      	str	r0, [sp, #0]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 f978 	bl	800daa8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2206      	movs	r2, #6
 800d7c8:	761a      	strb	r2, [r3, #24]
      break;
 800d7ca:	e14d      	b.n	800da68 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	795b      	ldrb	r3, [r3, #5]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f003 ff3e 	bl	8011654 <USBH_LL_GetURBState>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d7dc:	7bbb      	ldrb	r3, [r7, #14]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d111      	bne.n	800d806 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2207      	movs	r2, #7
 800d7e6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2203      	movs	r2, #3
 800d7ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	2200      	movs	r2, #0
 800d800:	f000 fc18 	bl	800e034 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d804:	e12b      	b.n	800da5e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d806:	7bbb      	ldrb	r3, [r7, #14]
 800d808:	2b05      	cmp	r3, #5
 800d80a:	d113      	bne.n	800d834 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	220c      	movs	r2, #12
 800d810:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d812:	2303      	movs	r3, #3
 800d814:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2203      	movs	r2, #3
 800d81a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d82a:	2300      	movs	r3, #0
 800d82c:	2200      	movs	r2, #0
 800d82e:	f000 fc01 	bl	800e034 <osMessageQueuePut>
      break;
 800d832:	e114      	b.n	800da5e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d834:	7bbb      	ldrb	r3, [r7, #14]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d111      	bne.n	800d85e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2205      	movs	r2, #5
 800d83e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2203      	movs	r2, #3
 800d844:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d854:	2300      	movs	r3, #0
 800d856:	2200      	movs	r2, #0
 800d858:	f000 fbec 	bl	800e034 <osMessageQueuePut>
      break;
 800d85c:	e0ff      	b.n	800da5e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d85e:	7bbb      	ldrb	r3, [r7, #14]
 800d860:	2b04      	cmp	r3, #4
 800d862:	f040 80fc 	bne.w	800da5e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	220b      	movs	r2, #11
 800d86a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d86c:	2302      	movs	r3, #2
 800d86e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2203      	movs	r2, #3
 800d874:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d884:	2300      	movs	r3, #0
 800d886:	2200      	movs	r2, #0
 800d888:	f000 fbd4 	bl	800e034 <osMessageQueuePut>
      break;
 800d88c:	e0e7      	b.n	800da5e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	791b      	ldrb	r3, [r3, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	2100      	movs	r1, #0
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 f92b 	bl	800daf2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2208      	movs	r2, #8
 800d8ac:	761a      	strb	r2, [r3, #24]

      break;
 800d8ae:	e0db      	b.n	800da68 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	791b      	ldrb	r3, [r3, #4]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f003 fecc 	bl	8011654 <USBH_LL_GetURBState>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d8c0:	7bbb      	ldrb	r3, [r7, #14]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d113      	bne.n	800d8ee <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	220d      	movs	r2, #13
 800d8ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2203      	movs	r2, #3
 800d8d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f000 fba4 	bl	800e034 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d8ec:	e0b9      	b.n	800da62 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800d8ee:	7bbb      	ldrb	r3, [r7, #14]
 800d8f0:	2b04      	cmp	r3, #4
 800d8f2:	d111      	bne.n	800d918 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	220b      	movs	r2, #11
 800d8f8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d90e:	2300      	movs	r3, #0
 800d910:	2200      	movs	r2, #0
 800d912:	f000 fb8f 	bl	800e034 <osMessageQueuePut>
      break;
 800d916:	e0a4      	b.n	800da62 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	2b05      	cmp	r3, #5
 800d91c:	f040 80a1 	bne.w	800da62 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800d920:	2303      	movs	r3, #3
 800d922:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2203      	movs	r2, #3
 800d928:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d938:	2300      	movs	r3, #0
 800d93a:	2200      	movs	r2, #0
 800d93c:	f000 fb7a 	bl	800e034 <osMessageQueuePut>
      break;
 800d940:	e08f      	b.n	800da62 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	795b      	ldrb	r3, [r3, #5]
 800d946:	2201      	movs	r2, #1
 800d948:	9200      	str	r2, [sp, #0]
 800d94a:	2200      	movs	r2, #0
 800d94c:	2100      	movs	r1, #0
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f8aa 	bl	800daa8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	220a      	movs	r2, #10
 800d964:	761a      	strb	r2, [r3, #24]
      break;
 800d966:	e07f      	b.n	800da68 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	795b      	ldrb	r3, [r3, #5]
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f003 fe70 	bl	8011654 <USBH_LL_GetURBState>
 800d974:	4603      	mov	r3, r0
 800d976:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d978:	7bbb      	ldrb	r3, [r7, #14]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d113      	bne.n	800d9a6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	220d      	movs	r2, #13
 800d986:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2203      	movs	r2, #3
 800d98c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d99c:	2300      	movs	r3, #0
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f000 fb48 	bl	800e034 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d9a4:	e05f      	b.n	800da66 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d111      	bne.n	800d9d0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2209      	movs	r2, #9
 800d9b0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2203      	movs	r2, #3
 800d9b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f000 fb33 	bl	800e034 <osMessageQueuePut>
      break;
 800d9ce:	e04a      	b.n	800da66 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
 800d9d2:	2b04      	cmp	r3, #4
 800d9d4:	d147      	bne.n	800da66 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	220b      	movs	r2, #11
 800d9da:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2203      	movs	r2, #3
 800d9e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f000 fb1e 	bl	800e034 <osMessageQueuePut>
      break;
 800d9f8:	e035      	b.n	800da66 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	7e5b      	ldrb	r3, [r3, #25]
 800d9fe:	3301      	adds	r3, #1
 800da00:	b2da      	uxtb	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	765a      	strb	r2, [r3, #25]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	7e5b      	ldrb	r3, [r3, #25]
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d806      	bhi.n	800da1c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800da1a:	e025      	b.n	800da68 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800da22:	2106      	movs	r1, #6
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	795b      	ldrb	r3, [r3, #5]
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f90d 	bl	800dc54 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	791b      	ldrb	r3, [r3, #4]
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f907 	bl	800dc54 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800da4c:	2302      	movs	r3, #2
 800da4e:	73fb      	strb	r3, [r7, #15]
      break;
 800da50:	e00a      	b.n	800da68 <USBH_HandleControl+0x484>

    default:
      break;
 800da52:	bf00      	nop
 800da54:	e008      	b.n	800da68 <USBH_HandleControl+0x484>
      break;
 800da56:	bf00      	nop
 800da58:	e006      	b.n	800da68 <USBH_HandleControl+0x484>
      break;
 800da5a:	bf00      	nop
 800da5c:	e004      	b.n	800da68 <USBH_HandleControl+0x484>
      break;
 800da5e:	bf00      	nop
 800da60:	e002      	b.n	800da68 <USBH_HandleControl+0x484>
      break;
 800da62:	bf00      	nop
 800da64:	e000      	b.n	800da68 <USBH_HandleControl+0x484>
      break;
 800da66:	bf00      	nop
  }

  return status;
 800da68:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop

0800da74 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b088      	sub	sp, #32
 800da78:	af04      	add	r7, sp, #16
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	4613      	mov	r3, r2
 800da80:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800da82:	79f9      	ldrb	r1, [r7, #7]
 800da84:	2300      	movs	r3, #0
 800da86:	9303      	str	r3, [sp, #12]
 800da88:	2308      	movs	r3, #8
 800da8a:	9302      	str	r3, [sp, #8]
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	9301      	str	r3, [sp, #4]
 800da90:	2300      	movs	r3, #0
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	2300      	movs	r3, #0
 800da96:	2200      	movs	r2, #0
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f003 fdaa 	bl	80115f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b088      	sub	sp, #32
 800daac:	af04      	add	r7, sp, #16
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	4611      	mov	r1, r2
 800dab4:	461a      	mov	r2, r3
 800dab6:	460b      	mov	r3, r1
 800dab8:	80fb      	strh	r3, [r7, #6]
 800daba:	4613      	mov	r3, r2
 800dabc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dac8:	2300      	movs	r3, #0
 800daca:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dacc:	7979      	ldrb	r1, [r7, #5]
 800dace:	7e3b      	ldrb	r3, [r7, #24]
 800dad0:	9303      	str	r3, [sp, #12]
 800dad2:	88fb      	ldrh	r3, [r7, #6]
 800dad4:	9302      	str	r3, [sp, #8]
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	9301      	str	r3, [sp, #4]
 800dada:	2301      	movs	r3, #1
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	2300      	movs	r3, #0
 800dae0:	2200      	movs	r2, #0
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f003 fd85 	bl	80115f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b088      	sub	sp, #32
 800daf6:	af04      	add	r7, sp, #16
 800daf8:	60f8      	str	r0, [r7, #12]
 800dafa:	60b9      	str	r1, [r7, #8]
 800dafc:	4611      	mov	r1, r2
 800dafe:	461a      	mov	r2, r3
 800db00:	460b      	mov	r3, r1
 800db02:	80fb      	strh	r3, [r7, #6]
 800db04:	4613      	mov	r3, r2
 800db06:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800db08:	7979      	ldrb	r1, [r7, #5]
 800db0a:	2300      	movs	r3, #0
 800db0c:	9303      	str	r3, [sp, #12]
 800db0e:	88fb      	ldrh	r3, [r7, #6]
 800db10:	9302      	str	r3, [sp, #8]
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	9301      	str	r3, [sp, #4]
 800db16:	2301      	movs	r3, #1
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	2300      	movs	r3, #0
 800db1c:	2201      	movs	r2, #1
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f003 fd67 	bl	80115f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800db24:	2300      	movs	r3, #0

}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b088      	sub	sp, #32
 800db32:	af04      	add	r7, sp, #16
 800db34:	60f8      	str	r0, [r7, #12]
 800db36:	60b9      	str	r1, [r7, #8]
 800db38:	4611      	mov	r1, r2
 800db3a:	461a      	mov	r2, r3
 800db3c:	460b      	mov	r3, r1
 800db3e:	80fb      	strh	r3, [r7, #6]
 800db40:	4613      	mov	r3, r2
 800db42:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800db4e:	2300      	movs	r3, #0
 800db50:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800db52:	7979      	ldrb	r1, [r7, #5]
 800db54:	7e3b      	ldrb	r3, [r7, #24]
 800db56:	9303      	str	r3, [sp, #12]
 800db58:	88fb      	ldrh	r3, [r7, #6]
 800db5a:	9302      	str	r3, [sp, #8]
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	9301      	str	r3, [sp, #4]
 800db60:	2301      	movs	r3, #1
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	2302      	movs	r3, #2
 800db66:	2200      	movs	r2, #0
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f003 fd42 	bl	80115f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b088      	sub	sp, #32
 800db7c:	af04      	add	r7, sp, #16
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	4611      	mov	r1, r2
 800db84:	461a      	mov	r2, r3
 800db86:	460b      	mov	r3, r1
 800db88:	80fb      	strh	r3, [r7, #6]
 800db8a:	4613      	mov	r3, r2
 800db8c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800db8e:	7979      	ldrb	r1, [r7, #5]
 800db90:	2300      	movs	r3, #0
 800db92:	9303      	str	r3, [sp, #12]
 800db94:	88fb      	ldrh	r3, [r7, #6]
 800db96:	9302      	str	r3, [sp, #8]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	9301      	str	r3, [sp, #4]
 800db9c:	2301      	movs	r3, #1
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	2302      	movs	r3, #2
 800dba2:	2201      	movs	r2, #1
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f003 fd24 	bl	80115f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af04      	add	r7, sp, #16
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	4608      	mov	r0, r1
 800dbbe:	4611      	mov	r1, r2
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	70fb      	strb	r3, [r7, #3]
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	70bb      	strb	r3, [r7, #2]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dbce:	7878      	ldrb	r0, [r7, #1]
 800dbd0:	78ba      	ldrb	r2, [r7, #2]
 800dbd2:	78f9      	ldrb	r1, [r7, #3]
 800dbd4:	8b3b      	ldrh	r3, [r7, #24]
 800dbd6:	9302      	str	r3, [sp, #8]
 800dbd8:	7d3b      	ldrb	r3, [r7, #20]
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	7c3b      	ldrb	r3, [r7, #16]
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f003 fcb7 	bl	8011556 <USBH_LL_OpenPipe>

  return USBH_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3708      	adds	r7, #8
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800dbfe:	78fb      	ldrb	r3, [r7, #3]
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f003 fcd6 	bl	80115b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f836 	bl	800dc90 <USBH_GetFreePipe>
 800dc24:	4603      	mov	r3, r0
 800dc26:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dc28:	89fb      	ldrh	r3, [r7, #14]
 800dc2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d00a      	beq.n	800dc48 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800dc32:	78fa      	ldrb	r2, [r7, #3]
 800dc34:	89fb      	ldrh	r3, [r7, #14]
 800dc36:	f003 030f 	and.w	r3, r3, #15
 800dc3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	33e0      	adds	r3, #224	; 0xe0
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	440b      	add	r3, r1
 800dc46:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dc48:	89fb      	ldrh	r3, [r7, #14]
 800dc4a:	b2db      	uxtb	r3, r3
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800dc60:	78fb      	ldrb	r3, [r7, #3]
 800dc62:	2b0a      	cmp	r3, #10
 800dc64:	d80d      	bhi.n	800dc82 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dc66:	78fb      	ldrb	r3, [r7, #3]
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	33e0      	adds	r3, #224	; 0xe0
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	78fb      	ldrb	r3, [r7, #3]
 800dc74:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	33e0      	adds	r3, #224	; 0xe0
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	440b      	add	r3, r1
 800dc80:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73fb      	strb	r3, [r7, #15]
 800dca0:	e00f      	b.n	800dcc2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dca2:	7bfb      	ldrb	r3, [r7, #15]
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	33e0      	adds	r3, #224	; 0xe0
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4413      	add	r3, r2
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d102      	bne.n	800dcbc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	e007      	b.n	800dccc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	73fb      	strb	r3, [r7, #15]
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	2b0a      	cmp	r3, #10
 800dcc6:	d9ec      	bls.n	800dca2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800dcc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <__NVIC_SetPriority>:
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	4603      	mov	r3, r0
 800dce0:	6039      	str	r1, [r7, #0]
 800dce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	db0a      	blt.n	800dd02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	490c      	ldr	r1, [pc, #48]	; (800dd24 <__NVIC_SetPriority+0x4c>)
 800dcf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcf6:	0112      	lsls	r2, r2, #4
 800dcf8:	b2d2      	uxtb	r2, r2
 800dcfa:	440b      	add	r3, r1
 800dcfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dd00:	e00a      	b.n	800dd18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	4908      	ldr	r1, [pc, #32]	; (800dd28 <__NVIC_SetPriority+0x50>)
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	f003 030f 	and.w	r3, r3, #15
 800dd0e:	3b04      	subs	r3, #4
 800dd10:	0112      	lsls	r2, r2, #4
 800dd12:	b2d2      	uxtb	r2, r2
 800dd14:	440b      	add	r3, r1
 800dd16:	761a      	strb	r2, [r3, #24]
}
 800dd18:	bf00      	nop
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	e000e100 	.word	0xe000e100
 800dd28:	e000ed00 	.word	0xe000ed00

0800dd2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dd30:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <SysTick_Handler+0x1c>)
 800dd32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dd34:	f001 ff56 	bl	800fbe4 <xTaskGetSchedulerState>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d001      	beq.n	800dd42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dd3e:	f002 ffbb 	bl	8010cb8 <xPortSysTickHandler>
  }
}
 800dd42:	bf00      	nop
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	e000e010 	.word	0xe000e010

0800dd4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dd50:	2100      	movs	r1, #0
 800dd52:	f06f 0004 	mvn.w	r0, #4
 800dd56:	f7ff ffbf 	bl	800dcd8 <__NVIC_SetPriority>
#endif
}
 800dd5a:	bf00      	nop
 800dd5c:	bd80      	pop	{r7, pc}
	...

0800dd60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd66:	f3ef 8305 	mrs	r3, IPSR
 800dd6a:	603b      	str	r3, [r7, #0]
  return(result);
 800dd6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dd72:	f06f 0305 	mvn.w	r3, #5
 800dd76:	607b      	str	r3, [r7, #4]
 800dd78:	e00c      	b.n	800dd94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dd7a:	4b0a      	ldr	r3, [pc, #40]	; (800dda4 <osKernelInitialize+0x44>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d105      	bne.n	800dd8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dd82:	4b08      	ldr	r3, [pc, #32]	; (800dda4 <osKernelInitialize+0x44>)
 800dd84:	2201      	movs	r2, #1
 800dd86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	607b      	str	r3, [r7, #4]
 800dd8c:	e002      	b.n	800dd94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dd8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dd94:	687b      	ldr	r3, [r7, #4]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	20000144 	.word	0x20000144

0800dda8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddae:	f3ef 8305 	mrs	r3, IPSR
 800ddb2:	603b      	str	r3, [r7, #0]
  return(result);
 800ddb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d003      	beq.n	800ddc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ddba:	f06f 0305 	mvn.w	r3, #5
 800ddbe:	607b      	str	r3, [r7, #4]
 800ddc0:	e010      	b.n	800dde4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ddc2:	4b0b      	ldr	r3, [pc, #44]	; (800ddf0 <osKernelStart+0x48>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d109      	bne.n	800ddde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ddca:	f7ff ffbf 	bl	800dd4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ddce:	4b08      	ldr	r3, [pc, #32]	; (800ddf0 <osKernelStart+0x48>)
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ddd4:	f001 faaa 	bl	800f32c <vTaskStartScheduler>
      stat = osOK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	607b      	str	r3, [r7, #4]
 800dddc:	e002      	b.n	800dde4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ddde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dde2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dde4:	687b      	ldr	r3, [r7, #4]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3708      	adds	r7, #8
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	20000144 	.word	0x20000144

0800ddf4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08e      	sub	sp, #56	; 0x38
 800ddf8:	af04      	add	r7, sp, #16
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800de00:	2300      	movs	r3, #0
 800de02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de04:	f3ef 8305 	mrs	r3, IPSR
 800de08:	617b      	str	r3, [r7, #20]
  return(result);
 800de0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d17e      	bne.n	800df0e <osThreadNew+0x11a>
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d07b      	beq.n	800df0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800de16:	2380      	movs	r3, #128	; 0x80
 800de18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800de1a:	2318      	movs	r3, #24
 800de1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800de22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d045      	beq.n	800deba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <osThreadNew+0x48>
        name = attr->name;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d002      	beq.n	800de4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	699b      	ldr	r3, [r3, #24]
 800de48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d008      	beq.n	800de62 <osThreadNew+0x6e>
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	2b38      	cmp	r3, #56	; 0x38
 800de54:	d805      	bhi.n	800de62 <osThreadNew+0x6e>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d001      	beq.n	800de66 <osThreadNew+0x72>
        return (NULL);
 800de62:	2300      	movs	r3, #0
 800de64:	e054      	b.n	800df10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	695b      	ldr	r3, [r3, #20]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d003      	beq.n	800de76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	695b      	ldr	r3, [r3, #20]
 800de72:	089b      	lsrs	r3, r3, #2
 800de74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00e      	beq.n	800de9c <osThreadNew+0xa8>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	2bbb      	cmp	r3, #187	; 0xbb
 800de84:	d90a      	bls.n	800de9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d006      	beq.n	800de9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d002      	beq.n	800de9c <osThreadNew+0xa8>
        mem = 1;
 800de96:	2301      	movs	r3, #1
 800de98:	61bb      	str	r3, [r7, #24]
 800de9a:	e010      	b.n	800debe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10c      	bne.n	800debe <osThreadNew+0xca>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d108      	bne.n	800debe <osThreadNew+0xca>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d104      	bne.n	800debe <osThreadNew+0xca>
          mem = 0;
 800deb4:	2300      	movs	r3, #0
 800deb6:	61bb      	str	r3, [r7, #24]
 800deb8:	e001      	b.n	800debe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d110      	bne.n	800dee6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800decc:	9202      	str	r2, [sp, #8]
 800dece:	9301      	str	r3, [sp, #4]
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	6a3a      	ldr	r2, [r7, #32]
 800ded8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f001 f83a 	bl	800ef54 <xTaskCreateStatic>
 800dee0:	4603      	mov	r3, r0
 800dee2:	613b      	str	r3, [r7, #16]
 800dee4:	e013      	b.n	800df0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d110      	bne.n	800df0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800deec:	6a3b      	ldr	r3, [r7, #32]
 800deee:	b29a      	uxth	r2, r3
 800def0:	f107 0310 	add.w	r3, r7, #16
 800def4:	9301      	str	r3, [sp, #4]
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	9300      	str	r3, [sp, #0]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f001 f885 	bl	800f00e <xTaskCreate>
 800df04:	4603      	mov	r3, r0
 800df06:	2b01      	cmp	r3, #1
 800df08:	d001      	beq.n	800df0e <osThreadNew+0x11a>
            hTask = NULL;
 800df0a:	2300      	movs	r3, #0
 800df0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800df0e:	693b      	ldr	r3, [r7, #16]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3728      	adds	r7, #40	; 0x28
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df20:	f3ef 8305 	mrs	r3, IPSR
 800df24:	60bb      	str	r3, [r7, #8]
  return(result);
 800df26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d003      	beq.n	800df34 <osDelay+0x1c>
    stat = osErrorISR;
 800df2c:	f06f 0305 	mvn.w	r3, #5
 800df30:	60fb      	str	r3, [r7, #12]
 800df32:	e007      	b.n	800df44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800df34:	2300      	movs	r3, #0
 800df36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d002      	beq.n	800df44 <osDelay+0x2c>
      vTaskDelay(ticks);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f001 f9c0 	bl	800f2c4 <vTaskDelay>
    }
  }

  return (stat);
 800df44:	68fb      	ldr	r3, [r7, #12]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800df4e:	b580      	push	{r7, lr}
 800df50:	b08a      	sub	sp, #40	; 0x28
 800df52:	af02      	add	r7, sp, #8
 800df54:	60f8      	str	r0, [r7, #12]
 800df56:	60b9      	str	r1, [r7, #8]
 800df58:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800df5a:	2300      	movs	r3, #0
 800df5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df5e:	f3ef 8305 	mrs	r3, IPSR
 800df62:	613b      	str	r3, [r7, #16]
  return(result);
 800df64:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800df66:	2b00      	cmp	r3, #0
 800df68:	d15f      	bne.n	800e02a <osMessageQueueNew+0xdc>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d05c      	beq.n	800e02a <osMessageQueueNew+0xdc>
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d059      	beq.n	800e02a <osMessageQueueNew+0xdc>
    mem = -1;
 800df76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d029      	beq.n	800dfd6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d012      	beq.n	800dfb0 <osMessageQueueNew+0x62>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	2b4f      	cmp	r3, #79	; 0x4f
 800df90:	d90e      	bls.n	800dfb0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00a      	beq.n	800dfb0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	695a      	ldr	r2, [r3, #20]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	68b9      	ldr	r1, [r7, #8]
 800dfa2:	fb01 f303 	mul.w	r3, r1, r3
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d302      	bcc.n	800dfb0 <osMessageQueueNew+0x62>
        mem = 1;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	61bb      	str	r3, [r7, #24]
 800dfae:	e014      	b.n	800dfda <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d110      	bne.n	800dfda <osMessageQueueNew+0x8c>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10c      	bne.n	800dfda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d108      	bne.n	800dfda <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	695b      	ldr	r3, [r3, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d104      	bne.n	800dfda <osMessageQueueNew+0x8c>
          mem = 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	61bb      	str	r3, [r7, #24]
 800dfd4:	e001      	b.n	800dfda <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d10b      	bne.n	800dff8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	691a      	ldr	r2, [r3, #16]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	2100      	movs	r1, #0
 800dfea:	9100      	str	r1, [sp, #0]
 800dfec:	68b9      	ldr	r1, [r7, #8]
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f000 fa2e 	bl	800e450 <xQueueGenericCreateStatic>
 800dff4:	61f8      	str	r0, [r7, #28]
 800dff6:	e008      	b.n	800e00a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d105      	bne.n	800e00a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dffe:	2200      	movs	r2, #0
 800e000:	68b9      	ldr	r1, [r7, #8]
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f000 fa9c 	bl	800e540 <xQueueGenericCreate>
 800e008:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00c      	beq.n	800e02a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d003      	beq.n	800e01e <osMessageQueueNew+0xd0>
        name = attr->name;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	617b      	str	r3, [r7, #20]
 800e01c:	e001      	b.n	800e022 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e022:	6979      	ldr	r1, [r7, #20]
 800e024:	69f8      	ldr	r0, [r7, #28]
 800e026:	f000 ff37 	bl	800ee98 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e02a:	69fb      	ldr	r3, [r7, #28]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3720      	adds	r7, #32
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e034:	b580      	push	{r7, lr}
 800e036:	b088      	sub	sp, #32
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	603b      	str	r3, [r7, #0]
 800e040:	4613      	mov	r3, r2
 800e042:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e048:	2300      	movs	r3, #0
 800e04a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e04c:	f3ef 8305 	mrs	r3, IPSR
 800e050:	617b      	str	r3, [r7, #20]
  return(result);
 800e052:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e054:	2b00      	cmp	r3, #0
 800e056:	d028      	beq.n	800e0aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d005      	beq.n	800e06a <osMessageQueuePut+0x36>
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <osMessageQueuePut+0x36>
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d003      	beq.n	800e072 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e06a:	f06f 0303 	mvn.w	r3, #3
 800e06e:	61fb      	str	r3, [r7, #28]
 800e070:	e038      	b.n	800e0e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e072:	2300      	movs	r3, #0
 800e074:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e076:	f107 0210 	add.w	r2, r7, #16
 800e07a:	2300      	movs	r3, #0
 800e07c:	68b9      	ldr	r1, [r7, #8]
 800e07e:	69b8      	ldr	r0, [r7, #24]
 800e080:	f000 fbba 	bl	800e7f8 <xQueueGenericSendFromISR>
 800e084:	4603      	mov	r3, r0
 800e086:	2b01      	cmp	r3, #1
 800e088:	d003      	beq.n	800e092 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e08a:	f06f 0302 	mvn.w	r3, #2
 800e08e:	61fb      	str	r3, [r7, #28]
 800e090:	e028      	b.n	800e0e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d025      	beq.n	800e0e4 <osMessageQueuePut+0xb0>
 800e098:	4b15      	ldr	r3, [pc, #84]	; (800e0f0 <osMessageQueuePut+0xbc>)
 800e09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e09e:	601a      	str	r2, [r3, #0]
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	e01c      	b.n	800e0e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <osMessageQueuePut+0x82>
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d103      	bne.n	800e0be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e0b6:	f06f 0303 	mvn.w	r3, #3
 800e0ba:	61fb      	str	r3, [r7, #28]
 800e0bc:	e012      	b.n	800e0e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e0be:	2300      	movs	r3, #0
 800e0c0:	683a      	ldr	r2, [r7, #0]
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	69b8      	ldr	r0, [r7, #24]
 800e0c6:	f000 fa99 	bl	800e5fc <xQueueGenericSend>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d009      	beq.n	800e0e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d003      	beq.n	800e0de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e0d6:	f06f 0301 	mvn.w	r3, #1
 800e0da:	61fb      	str	r3, [r7, #28]
 800e0dc:	e002      	b.n	800e0e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e0de:	f06f 0302 	mvn.w	r3, #2
 800e0e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e0e4:	69fb      	ldr	r3, [r7, #28]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	e000ed04 	.word	0xe000ed04

0800e0f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b088      	sub	sp, #32
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e106:	2300      	movs	r3, #0
 800e108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e10a:	f3ef 8305 	mrs	r3, IPSR
 800e10e:	617b      	str	r3, [r7, #20]
  return(result);
 800e110:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e112:	2b00      	cmp	r3, #0
 800e114:	d028      	beq.n	800e168 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d005      	beq.n	800e128 <osMessageQueueGet+0x34>
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d002      	beq.n	800e128 <osMessageQueueGet+0x34>
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e128:	f06f 0303 	mvn.w	r3, #3
 800e12c:	61fb      	str	r3, [r7, #28]
 800e12e:	e037      	b.n	800e1a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e130:	2300      	movs	r3, #0
 800e132:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e134:	f107 0310 	add.w	r3, r7, #16
 800e138:	461a      	mov	r2, r3
 800e13a:	68b9      	ldr	r1, [r7, #8]
 800e13c:	69b8      	ldr	r0, [r7, #24]
 800e13e:	f000 fcd7 	bl	800eaf0 <xQueueReceiveFromISR>
 800e142:	4603      	mov	r3, r0
 800e144:	2b01      	cmp	r3, #1
 800e146:	d003      	beq.n	800e150 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e148:	f06f 0302 	mvn.w	r3, #2
 800e14c:	61fb      	str	r3, [r7, #28]
 800e14e:	e027      	b.n	800e1a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d024      	beq.n	800e1a0 <osMessageQueueGet+0xac>
 800e156:	4b15      	ldr	r3, [pc, #84]	; (800e1ac <osMessageQueueGet+0xb8>)
 800e158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	f3bf 8f4f 	dsb	sy
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	e01b      	b.n	800e1a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <osMessageQueueGet+0x80>
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d103      	bne.n	800e17c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e174:	f06f 0303 	mvn.w	r3, #3
 800e178:	61fb      	str	r3, [r7, #28]
 800e17a:	e011      	b.n	800e1a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e17c:	683a      	ldr	r2, [r7, #0]
 800e17e:	68b9      	ldr	r1, [r7, #8]
 800e180:	69b8      	ldr	r0, [r7, #24]
 800e182:	f000 fbd5 	bl	800e930 <xQueueReceive>
 800e186:	4603      	mov	r3, r0
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d009      	beq.n	800e1a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d003      	beq.n	800e19a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e192:	f06f 0301 	mvn.w	r3, #1
 800e196:	61fb      	str	r3, [r7, #28]
 800e198:	e002      	b.n	800e1a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e19a:	f06f 0302 	mvn.w	r3, #2
 800e19e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e1a0:	69fb      	ldr	r3, [r7, #28]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3720      	adds	r7, #32
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	e000ed04 	.word	0xe000ed04

0800e1b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e1b0:	b480      	push	{r7}
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4a07      	ldr	r2, [pc, #28]	; (800e1dc <vApplicationGetIdleTaskMemory+0x2c>)
 800e1c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	4a06      	ldr	r2, [pc, #24]	; (800e1e0 <vApplicationGetIdleTaskMemory+0x30>)
 800e1c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2280      	movs	r2, #128	; 0x80
 800e1cc:	601a      	str	r2, [r3, #0]
}
 800e1ce:	bf00      	nop
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	20000148 	.word	0x20000148
 800e1e0:	20000204 	.word	0x20000204

0800e1e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	4a07      	ldr	r2, [pc, #28]	; (800e210 <vApplicationGetTimerTaskMemory+0x2c>)
 800e1f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	4a06      	ldr	r2, [pc, #24]	; (800e214 <vApplicationGetTimerTaskMemory+0x30>)
 800e1fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e202:	601a      	str	r2, [r3, #0]
}
 800e204:	bf00      	nop
 800e206:	3714      	adds	r7, #20
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	20000404 	.word	0x20000404
 800e214:	200004c0 	.word	0x200004c0

0800e218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f103 0208 	add.w	r2, r3, #8
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f103 0208 	add.w	r2, r3, #8
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f103 0208 	add.w	r2, r3, #8
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e24c:	bf00      	nop
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e266:	bf00      	nop
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e272:	b480      	push	{r7}
 800e274:	b085      	sub	sp, #20
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	689a      	ldr	r2, [r3, #8]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	1c5a      	adds	r2, r3, #1
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	601a      	str	r2, [r3, #0]
}
 800e2ae:	bf00      	nop
 800e2b0:	3714      	adds	r7, #20
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr

0800e2ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2ba:	b480      	push	{r7}
 800e2bc:	b085      	sub	sp, #20
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2d0:	d103      	bne.n	800e2da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	e00c      	b.n	800e2f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	3308      	adds	r3, #8
 800e2de:	60fb      	str	r3, [r7, #12]
 800e2e0:	e002      	b.n	800e2e8 <vListInsert+0x2e>
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	60fb      	str	r3, [r7, #12]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	68ba      	ldr	r2, [r7, #8]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d2f6      	bcs.n	800e2e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	685a      	ldr	r2, [r3, #4]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	683a      	ldr	r2, [r7, #0]
 800e30e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	601a      	str	r2, [r3, #0]
}
 800e320:	bf00      	nop
 800e322:	3714      	adds	r7, #20
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	691b      	ldr	r3, [r3, #16]
 800e338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	6892      	ldr	r2, [r2, #8]
 800e342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	6852      	ldr	r2, [r2, #4]
 800e34c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	429a      	cmp	r2, r3
 800e356:	d103      	bne.n	800e360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	689a      	ldr	r2, [r3, #8]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	1e5a      	subs	r2, r3, #1
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d10a      	bne.n	800e3aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e3a6:	bf00      	nop
 800e3a8:	e7fe      	b.n	800e3a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e3aa:	f002 fbf3 	bl	8010b94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b6:	68f9      	ldr	r1, [r7, #12]
 800e3b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e3ba:	fb01 f303 	mul.w	r3, r1, r3
 800e3be:	441a      	add	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	68f9      	ldr	r1, [r7, #12]
 800e3de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e3e0:	fb01 f303 	mul.w	r3, r1, r3
 800e3e4:	441a      	add	r2, r3
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	22ff      	movs	r2, #255	; 0xff
 800e3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	22ff      	movs	r2, #255	; 0xff
 800e3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d114      	bne.n	800e42a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d01a      	beq.n	800e43e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3310      	adds	r3, #16
 800e40c:	4618      	mov	r0, r3
 800e40e:	f001 fa27 	bl	800f860 <xTaskRemoveFromEventList>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d012      	beq.n	800e43e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e418:	4b0c      	ldr	r3, [pc, #48]	; (800e44c <xQueueGenericReset+0xcc>)
 800e41a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	f3bf 8f6f 	isb	sy
 800e428:	e009      	b.n	800e43e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	3310      	adds	r3, #16
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fef2 	bl	800e218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3324      	adds	r3, #36	; 0x24
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff feed 	bl	800e218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e43e:	f002 fbd9 	bl	8010bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e442:	2301      	movs	r3, #1
}
 800e444:	4618      	mov	r0, r3
 800e446:	3710      	adds	r7, #16
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	e000ed04 	.word	0xe000ed04

0800e450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08e      	sub	sp, #56	; 0x38
 800e454:	af02      	add	r7, sp, #8
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10a      	bne.n	800e47a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10a      	bne.n	800e496 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e492:	bf00      	nop
 800e494:	e7fe      	b.n	800e494 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d002      	beq.n	800e4a2 <xQueueGenericCreateStatic+0x52>
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <xQueueGenericCreateStatic+0x56>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <xQueueGenericCreateStatic+0x58>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10a      	bne.n	800e4c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	623b      	str	r3, [r7, #32]
}
 800e4be:	bf00      	nop
 800e4c0:	e7fe      	b.n	800e4c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d102      	bne.n	800e4ce <xQueueGenericCreateStatic+0x7e>
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d101      	bne.n	800e4d2 <xQueueGenericCreateStatic+0x82>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e000      	b.n	800e4d4 <xQueueGenericCreateStatic+0x84>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10a      	bne.n	800e4ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	61fb      	str	r3, [r7, #28]
}
 800e4ea:	bf00      	nop
 800e4ec:	e7fe      	b.n	800e4ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e4ee:	2350      	movs	r3, #80	; 0x50
 800e4f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b50      	cmp	r3, #80	; 0x50
 800e4f6:	d00a      	beq.n	800e50e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fc:	f383 8811 	msr	BASEPRI, r3
 800e500:	f3bf 8f6f 	isb	sy
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	61bb      	str	r3, [r7, #24]
}
 800e50a:	bf00      	nop
 800e50c:	e7fe      	b.n	800e50c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e50e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00d      	beq.n	800e536 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	4613      	mov	r3, r2
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	68b9      	ldr	r1, [r7, #8]
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f000 f83f 	bl	800e5b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e538:	4618      	mov	r0, r3
 800e53a:	3730      	adds	r7, #48	; 0x30
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}

0800e540 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e540:	b580      	push	{r7, lr}
 800e542:	b08a      	sub	sp, #40	; 0x28
 800e544:	af02      	add	r7, sp, #8
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	4613      	mov	r3, r2
 800e54c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d10a      	bne.n	800e56a <xQueueGenericCreate+0x2a>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	613b      	str	r3, [r7, #16]
}
 800e566:	bf00      	nop
 800e568:	e7fe      	b.n	800e568 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	fb02 f303 	mul.w	r3, r2, r3
 800e572:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	3350      	adds	r3, #80	; 0x50
 800e578:	4618      	mov	r0, r3
 800e57a:	f002 fc2d 	bl	8010dd8 <pvPortMalloc>
 800e57e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d011      	beq.n	800e5aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	3350      	adds	r3, #80	; 0x50
 800e58e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	2200      	movs	r2, #0
 800e594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e598:	79fa      	ldrb	r2, [r7, #7]
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f000 f805 	bl	800e5b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e5aa:	69bb      	ldr	r3, [r7, #24]
	}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3720      	adds	r7, #32
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d103      	bne.n	800e5d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	69ba      	ldr	r2, [r7, #24]
 800e5cc:	601a      	str	r2, [r3, #0]
 800e5ce:	e002      	b.n	800e5d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e5e2:	2101      	movs	r1, #1
 800e5e4:	69b8      	ldr	r0, [r7, #24]
 800e5e6:	f7ff fecb 	bl	800e380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	78fa      	ldrb	r2, [r7, #3]
 800e5ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
	...

0800e5fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08e      	sub	sp, #56	; 0x38
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
 800e608:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e60a:	2300      	movs	r3, #0
 800e60c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xQueueGenericSend+0x32>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d103      	bne.n	800e63c <xQueueGenericSend+0x40>
 800e634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <xQueueGenericSend+0x44>
 800e63c:	2301      	movs	r3, #1
 800e63e:	e000      	b.n	800e642 <xQueueGenericSend+0x46>
 800e640:	2300      	movs	r3, #0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10a      	bne.n	800e65c <xQueueGenericSend+0x60>
	__asm volatile
 800e646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64a:	f383 8811 	msr	BASEPRI, r3
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e658:	bf00      	nop
 800e65a:	e7fe      	b.n	800e65a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d103      	bne.n	800e66a <xQueueGenericSend+0x6e>
 800e662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e666:	2b01      	cmp	r3, #1
 800e668:	d101      	bne.n	800e66e <xQueueGenericSend+0x72>
 800e66a:	2301      	movs	r3, #1
 800e66c:	e000      	b.n	800e670 <xQueueGenericSend+0x74>
 800e66e:	2300      	movs	r3, #0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10a      	bne.n	800e68a <xQueueGenericSend+0x8e>
	__asm volatile
 800e674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	623b      	str	r3, [r7, #32]
}
 800e686:	bf00      	nop
 800e688:	e7fe      	b.n	800e688 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e68a:	f001 faab 	bl	800fbe4 <xTaskGetSchedulerState>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	d102      	bne.n	800e69a <xQueueGenericSend+0x9e>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d101      	bne.n	800e69e <xQueueGenericSend+0xa2>
 800e69a:	2301      	movs	r3, #1
 800e69c:	e000      	b.n	800e6a0 <xQueueGenericSend+0xa4>
 800e69e:	2300      	movs	r3, #0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d10a      	bne.n	800e6ba <xQueueGenericSend+0xbe>
	__asm volatile
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	61fb      	str	r3, [r7, #28]
}
 800e6b6:	bf00      	nop
 800e6b8:	e7fe      	b.n	800e6b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6ba:	f002 fa6b 	bl	8010b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d302      	bcc.n	800e6d0 <xQueueGenericSend+0xd4>
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d129      	bne.n	800e724 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6d0:	683a      	ldr	r2, [r7, #0]
 800e6d2:	68b9      	ldr	r1, [r7, #8]
 800e6d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6d6:	f000 faa9 	bl	800ec2c <prvCopyDataToQueue>
 800e6da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d010      	beq.n	800e706 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e6:	3324      	adds	r3, #36	; 0x24
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f001 f8b9 	bl	800f860 <xTaskRemoveFromEventList>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d013      	beq.n	800e71c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e6f4:	4b3f      	ldr	r3, [pc, #252]	; (800e7f4 <xQueueGenericSend+0x1f8>)
 800e6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6fa:	601a      	str	r2, [r3, #0]
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	e00a      	b.n	800e71c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d007      	beq.n	800e71c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e70c:	4b39      	ldr	r3, [pc, #228]	; (800e7f4 <xQueueGenericSend+0x1f8>)
 800e70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e712:	601a      	str	r2, [r3, #0]
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e71c:	f002 fa6a 	bl	8010bf4 <vPortExitCritical>
				return pdPASS;
 800e720:	2301      	movs	r3, #1
 800e722:	e063      	b.n	800e7ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d103      	bne.n	800e732 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e72a:	f002 fa63 	bl	8010bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e72e:	2300      	movs	r3, #0
 800e730:	e05c      	b.n	800e7ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e734:	2b00      	cmp	r3, #0
 800e736:	d106      	bne.n	800e746 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e738:	f107 0314 	add.w	r3, r7, #20
 800e73c:	4618      	mov	r0, r3
 800e73e:	f001 f8f3 	bl	800f928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e742:	2301      	movs	r3, #1
 800e744:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e746:	f002 fa55 	bl	8010bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e74a:	f000 fe5f 	bl	800f40c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e74e:	f002 fa21 	bl	8010b94 <vPortEnterCritical>
 800e752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e758:	b25b      	sxtb	r3, r3
 800e75a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e75e:	d103      	bne.n	800e768 <xQueueGenericSend+0x16c>
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	2200      	movs	r2, #0
 800e764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e76e:	b25b      	sxtb	r3, r3
 800e770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e774:	d103      	bne.n	800e77e <xQueueGenericSend+0x182>
 800e776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e77e:	f002 fa39 	bl	8010bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e782:	1d3a      	adds	r2, r7, #4
 800e784:	f107 0314 	add.w	r3, r7, #20
 800e788:	4611      	mov	r1, r2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f001 f8e2 	bl	800f954 <xTaskCheckForTimeOut>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d124      	bne.n	800e7e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e798:	f000 fb40 	bl	800ee1c <prvIsQueueFull>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d018      	beq.n	800e7d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a4:	3310      	adds	r3, #16
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f001 f808 	bl	800f7c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e7b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7b2:	f000 facb 	bl	800ed4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e7b6:	f000 fe37 	bl	800f428 <xTaskResumeAll>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f47f af7c 	bne.w	800e6ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e7c2:	4b0c      	ldr	r3, [pc, #48]	; (800e7f4 <xQueueGenericSend+0x1f8>)
 800e7c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7c8:	601a      	str	r2, [r3, #0]
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	f3bf 8f6f 	isb	sy
 800e7d2:	e772      	b.n	800e6ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e7d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7d6:	f000 fab9 	bl	800ed4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7da:	f000 fe25 	bl	800f428 <xTaskResumeAll>
 800e7de:	e76c      	b.n	800e6ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e7e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7e2:	f000 fab3 	bl	800ed4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7e6:	f000 fe1f 	bl	800f428 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e7ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3738      	adds	r7, #56	; 0x38
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	e000ed04 	.word	0xe000ed04

0800e7f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b090      	sub	sp, #64	; 0x40
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	607a      	str	r2, [r7, #4]
 800e804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10a      	bne.n	800e826 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	f383 8811 	msr	BASEPRI, r3
 800e818:	f3bf 8f6f 	isb	sy
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e822:	bf00      	nop
 800e824:	e7fe      	b.n	800e824 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d103      	bne.n	800e834 <xQueueGenericSendFromISR+0x3c>
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <xQueueGenericSendFromISR+0x40>
 800e834:	2301      	movs	r3, #1
 800e836:	e000      	b.n	800e83a <xQueueGenericSendFromISR+0x42>
 800e838:	2300      	movs	r3, #0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10a      	bne.n	800e854 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e850:	bf00      	nop
 800e852:	e7fe      	b.n	800e852 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	2b02      	cmp	r3, #2
 800e858:	d103      	bne.n	800e862 <xQueueGenericSendFromISR+0x6a>
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d101      	bne.n	800e866 <xQueueGenericSendFromISR+0x6e>
 800e862:	2301      	movs	r3, #1
 800e864:	e000      	b.n	800e868 <xQueueGenericSendFromISR+0x70>
 800e866:	2300      	movs	r3, #0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10a      	bne.n	800e882 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	623b      	str	r3, [r7, #32]
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e882:	f002 fa69 	bl	8010d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e886:	f3ef 8211 	mrs	r2, BASEPRI
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	61fa      	str	r2, [r7, #28]
 800e89c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e89e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d302      	bcc.n	800e8b4 <xQueueGenericSendFromISR+0xbc>
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2b02      	cmp	r3, #2
 800e8b2:	d12f      	bne.n	800e914 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	68b9      	ldr	r1, [r7, #8]
 800e8c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8ca:	f000 f9af 	bl	800ec2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e8ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e8d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8d6:	d112      	bne.n	800e8fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d016      	beq.n	800e90e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e2:	3324      	adds	r3, #36	; 0x24
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f000 ffbb 	bl	800f860 <xTaskRemoveFromEventList>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00e      	beq.n	800e90e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00b      	beq.n	800e90e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	e007      	b.n	800e90e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e8fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e902:	3301      	adds	r3, #1
 800e904:	b2db      	uxtb	r3, r3
 800e906:	b25a      	sxtb	r2, r3
 800e908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e90e:	2301      	movs	r3, #1
 800e910:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e912:	e001      	b.n	800e918 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e914:	2300      	movs	r3, #0
 800e916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e91a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e922:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e926:	4618      	mov	r0, r3
 800e928:	3740      	adds	r7, #64	; 0x40
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
	...

0800e930 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b08c      	sub	sp, #48	; 0x30
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e93c:	2300      	movs	r3, #0
 800e93e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	2b00      	cmp	r3, #0
 800e948:	d10a      	bne.n	800e960 <xQueueReceive+0x30>
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	623b      	str	r3, [r7, #32]
}
 800e95c:	bf00      	nop
 800e95e:	e7fe      	b.n	800e95e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d103      	bne.n	800e96e <xQueueReceive+0x3e>
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <xQueueReceive+0x42>
 800e96e:	2301      	movs	r3, #1
 800e970:	e000      	b.n	800e974 <xQueueReceive+0x44>
 800e972:	2300      	movs	r3, #0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10a      	bne.n	800e98e <xQueueReceive+0x5e>
	__asm volatile
 800e978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97c:	f383 8811 	msr	BASEPRI, r3
 800e980:	f3bf 8f6f 	isb	sy
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	61fb      	str	r3, [r7, #28]
}
 800e98a:	bf00      	nop
 800e98c:	e7fe      	b.n	800e98c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e98e:	f001 f929 	bl	800fbe4 <xTaskGetSchedulerState>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d102      	bne.n	800e99e <xQueueReceive+0x6e>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d101      	bne.n	800e9a2 <xQueueReceive+0x72>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e000      	b.n	800e9a4 <xQueueReceive+0x74>
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d10a      	bne.n	800e9be <xQueueReceive+0x8e>
	__asm volatile
 800e9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ac:	f383 8811 	msr	BASEPRI, r3
 800e9b0:	f3bf 8f6f 	isb	sy
 800e9b4:	f3bf 8f4f 	dsb	sy
 800e9b8:	61bb      	str	r3, [r7, #24]
}
 800e9ba:	bf00      	nop
 800e9bc:	e7fe      	b.n	800e9bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9be:	f002 f8e9 	bl	8010b94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d01f      	beq.n	800ea0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9ce:	68b9      	ldr	r1, [r7, #8]
 800e9d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9d2:	f000 f995 	bl	800ed00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	691b      	ldr	r3, [r3, #16]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00f      	beq.n	800ea06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e8:	3310      	adds	r3, #16
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f000 ff38 	bl	800f860 <xTaskRemoveFromEventList>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d007      	beq.n	800ea06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9f6:	4b3d      	ldr	r3, [pc, #244]	; (800eaec <xQueueReceive+0x1bc>)
 800e9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9fc:	601a      	str	r2, [r3, #0]
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea06:	f002 f8f5 	bl	8010bf4 <vPortExitCritical>
				return pdPASS;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e069      	b.n	800eae2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d103      	bne.n	800ea1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea14:	f002 f8ee 	bl	8010bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	e062      	b.n	800eae2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d106      	bne.n	800ea30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea22:	f107 0310 	add.w	r3, r7, #16
 800ea26:	4618      	mov	r0, r3
 800ea28:	f000 ff7e 	bl	800f928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea30:	f002 f8e0 	bl	8010bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea34:	f000 fcea 	bl	800f40c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea38:	f002 f8ac 	bl	8010b94 <vPortEnterCritical>
 800ea3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea42:	b25b      	sxtb	r3, r3
 800ea44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea48:	d103      	bne.n	800ea52 <xQueueReceive+0x122>
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea58:	b25b      	sxtb	r3, r3
 800ea5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea5e:	d103      	bne.n	800ea68 <xQueueReceive+0x138>
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	2200      	movs	r2, #0
 800ea64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea68:	f002 f8c4 	bl	8010bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea6c:	1d3a      	adds	r2, r7, #4
 800ea6e:	f107 0310 	add.w	r3, r7, #16
 800ea72:	4611      	mov	r1, r2
 800ea74:	4618      	mov	r0, r3
 800ea76:	f000 ff6d 	bl	800f954 <xTaskCheckForTimeOut>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d123      	bne.n	800eac8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea82:	f000 f9b5 	bl	800edf0 <prvIsQueueEmpty>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d017      	beq.n	800eabc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8e:	3324      	adds	r3, #36	; 0x24
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	4611      	mov	r1, r2
 800ea94:	4618      	mov	r0, r3
 800ea96:	f000 fe93 	bl	800f7c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea9c:	f000 f956 	bl	800ed4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eaa0:	f000 fcc2 	bl	800f428 <xTaskResumeAll>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d189      	bne.n	800e9be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800eaaa:	4b10      	ldr	r3, [pc, #64]	; (800eaec <xQueueReceive+0x1bc>)
 800eaac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eab0:	601a      	str	r2, [r3, #0]
 800eab2:	f3bf 8f4f 	dsb	sy
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	e780      	b.n	800e9be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eabc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eabe:	f000 f945 	bl	800ed4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eac2:	f000 fcb1 	bl	800f428 <xTaskResumeAll>
 800eac6:	e77a      	b.n	800e9be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaca:	f000 f93f 	bl	800ed4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eace:	f000 fcab 	bl	800f428 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ead2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ead4:	f000 f98c 	bl	800edf0 <prvIsQueueEmpty>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f43f af6f 	beq.w	800e9be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eae0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3730      	adds	r7, #48	; 0x30
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	e000ed04 	.word	0xe000ed04

0800eaf0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b08e      	sub	sp, #56	; 0x38
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d10a      	bne.n	800eb1c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800eb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0a:	f383 8811 	msr	BASEPRI, r3
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	f3bf 8f4f 	dsb	sy
 800eb16:	623b      	str	r3, [r7, #32]
}
 800eb18:	bf00      	nop
 800eb1a:	e7fe      	b.n	800eb1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d103      	bne.n	800eb2a <xQueueReceiveFromISR+0x3a>
 800eb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d101      	bne.n	800eb2e <xQueueReceiveFromISR+0x3e>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e000      	b.n	800eb30 <xQueueReceiveFromISR+0x40>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10a      	bne.n	800eb4a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	61fb      	str	r3, [r7, #28]
}
 800eb46:	bf00      	nop
 800eb48:	e7fe      	b.n	800eb48 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb4a:	f002 f905 	bl	8010d58 <vPortValidateInterruptPriority>
	__asm volatile
 800eb4e:	f3ef 8211 	mrs	r2, BASEPRI
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	61ba      	str	r2, [r7, #24]
 800eb64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eb66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d02f      	beq.n	800ebd6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb80:	68b9      	ldr	r1, [r7, #8]
 800eb82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb84:	f000 f8bc 	bl	800ed00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8a:	1e5a      	subs	r2, r3, #1
 800eb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eb90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb98:	d112      	bne.n	800ebc0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	691b      	ldr	r3, [r3, #16]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d016      	beq.n	800ebd0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	3310      	adds	r3, #16
 800eba6:	4618      	mov	r0, r3
 800eba8:	f000 fe5a 	bl	800f860 <xTaskRemoveFromEventList>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00e      	beq.n	800ebd0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00b      	beq.n	800ebd0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	601a      	str	r2, [r3, #0]
 800ebbe:	e007      	b.n	800ebd0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ebc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	b25a      	sxtb	r2, r3
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	637b      	str	r3, [r7, #52]	; 0x34
 800ebd4:	e001      	b.n	800ebda <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	637b      	str	r3, [r7, #52]	; 0x34
 800ebda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	f383 8811 	msr	BASEPRI, r3
}
 800ebe4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3738      	adds	r7, #56	; 0x38
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d10a      	bne.n	800ec14 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ebfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec02:	f383 8811 	msr	BASEPRI, r3
 800ec06:	f3bf 8f6f 	isb	sy
 800ec0a:	f3bf 8f4f 	dsb	sy
 800ec0e:	60bb      	str	r3, [r7, #8]
}
 800ec10:	bf00      	nop
 800ec12:	e7fe      	b.n	800ec12 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ec14:	f001 ffbe 	bl	8010b94 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec1c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ec1e:	f001 ffe9 	bl	8010bf4 <vPortExitCritical>

	return uxReturn;
 800ec22:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10d      	bne.n	800ec66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d14d      	bne.n	800ecee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f000 ffe2 	bl	800fc20 <xTaskPriorityDisinherit>
 800ec5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2200      	movs	r2, #0
 800ec62:	609a      	str	r2, [r3, #8]
 800ec64:	e043      	b.n	800ecee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d119      	bne.n	800eca0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6858      	ldr	r0, [r3, #4]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec74:	461a      	mov	r2, r3
 800ec76:	68b9      	ldr	r1, [r7, #8]
 800ec78:	f002 fdd6 	bl	8011828 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec84:	441a      	add	r2, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	685a      	ldr	r2, [r3, #4]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d32b      	bcc.n	800ecee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	605a      	str	r2, [r3, #4]
 800ec9e:	e026      	b.n	800ecee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	68d8      	ldr	r0, [r3, #12]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca8:	461a      	mov	r2, r3
 800ecaa:	68b9      	ldr	r1, [r7, #8]
 800ecac:	f002 fdbc 	bl	8011828 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	68da      	ldr	r2, [r3, #12]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecb8:	425b      	negs	r3, r3
 800ecba:	441a      	add	r2, r3
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	68da      	ldr	r2, [r3, #12]
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d207      	bcs.n	800ecdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	689a      	ldr	r2, [r3, #8]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd4:	425b      	negs	r3, r3
 800ecd6:	441a      	add	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d105      	bne.n	800ecee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d002      	beq.n	800ecee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	3b01      	subs	r3, #1
 800ecec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ecf6:	697b      	ldr	r3, [r7, #20]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3718      	adds	r7, #24
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d018      	beq.n	800ed44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	68da      	ldr	r2, [r3, #12]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed1a:	441a      	add	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	68da      	ldr	r2, [r3, #12]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d303      	bcc.n	800ed34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	68d9      	ldr	r1, [r3, #12]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	6838      	ldr	r0, [r7, #0]
 800ed40:	f002 fd72 	bl	8011828 <memcpy>
	}
}
 800ed44:	bf00      	nop
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed54:	f001 ff1e 	bl	8010b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed60:	e011      	b.n	800ed86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d012      	beq.n	800ed90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3324      	adds	r3, #36	; 0x24
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 fd76 	bl	800f860 <xTaskRemoveFromEventList>
 800ed74:	4603      	mov	r3, r0
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d001      	beq.n	800ed7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ed7a:	f000 fe4d 	bl	800fa18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ed7e:	7bfb      	ldrb	r3, [r7, #15]
 800ed80:	3b01      	subs	r3, #1
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	dce9      	bgt.n	800ed62 <prvUnlockQueue+0x16>
 800ed8e:	e000      	b.n	800ed92 <prvUnlockQueue+0x46>
					break;
 800ed90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	22ff      	movs	r2, #255	; 0xff
 800ed96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ed9a:	f001 ff2b 	bl	8010bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ed9e:	f001 fef9 	bl	8010b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eda8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edaa:	e011      	b.n	800edd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d012      	beq.n	800edda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	3310      	adds	r3, #16
 800edb8:	4618      	mov	r0, r3
 800edba:	f000 fd51 	bl	800f860 <xTaskRemoveFromEventList>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800edc4:	f000 fe28 	bl	800fa18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800edc8:	7bbb      	ldrb	r3, [r7, #14]
 800edca:	3b01      	subs	r3, #1
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800edd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	dce9      	bgt.n	800edac <prvUnlockQueue+0x60>
 800edd8:	e000      	b.n	800eddc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800edda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	22ff      	movs	r2, #255	; 0xff
 800ede0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ede4:	f001 ff06 	bl	8010bf4 <vPortExitCritical>
}
 800ede8:	bf00      	nop
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800edf8:	f001 fecc 	bl	8010b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d102      	bne.n	800ee0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ee04:	2301      	movs	r3, #1
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	e001      	b.n	800ee0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee0e:	f001 fef1 	bl	8010bf4 <vPortExitCritical>

	return xReturn;
 800ee12:	68fb      	ldr	r3, [r7, #12]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee24:	f001 feb6 	bl	8010b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d102      	bne.n	800ee3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee34:	2301      	movs	r3, #1
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	e001      	b.n	800ee3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee3e:	f001 fed9 	bl	8010bf4 <vPortExitCritical>

	return xReturn;
 800ee42:	68fb      	ldr	r3, [r7, #12]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b087      	sub	sp, #28
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10a      	bne.n	800ee74 <xQueueIsQueueFullFromISR+0x28>
	__asm volatile
 800ee5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee62:	f383 8811 	msr	BASEPRI, r3
 800ee66:	f3bf 8f6f 	isb	sy
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	60fb      	str	r3, [r7, #12]
}
 800ee70:	bf00      	nop
 800ee72:	e7fe      	b.n	800ee72 <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d102      	bne.n	800ee86 <xQueueIsQueueFullFromISR+0x3a>
	{
		xReturn = pdTRUE;
 800ee80:	2301      	movs	r3, #1
 800ee82:	617b      	str	r3, [r7, #20]
 800ee84:	e001      	b.n	800ee8a <xQueueIsQueueFullFromISR+0x3e>
	}
	else
	{
		xReturn = pdFALSE;
 800ee86:	2300      	movs	r3, #0
 800ee88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ee8a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	371c      	adds	r7, #28
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ee98:	b480      	push	{r7}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eea2:	2300      	movs	r3, #0
 800eea4:	60fb      	str	r3, [r7, #12]
 800eea6:	e014      	b.n	800eed2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eea8:	4a0f      	ldr	r2, [pc, #60]	; (800eee8 <vQueueAddToRegistry+0x50>)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10b      	bne.n	800eecc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eeb4:	490c      	ldr	r1, [pc, #48]	; (800eee8 <vQueueAddToRegistry+0x50>)
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	683a      	ldr	r2, [r7, #0]
 800eeba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eebe:	4a0a      	ldr	r2, [pc, #40]	; (800eee8 <vQueueAddToRegistry+0x50>)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	4413      	add	r3, r2
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eeca:	e006      	b.n	800eeda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	3301      	adds	r3, #1
 800eed0:	60fb      	str	r3, [r7, #12]
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2b07      	cmp	r3, #7
 800eed6:	d9e7      	bls.n	800eea8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eed8:	bf00      	nop
 800eeda:	bf00      	nop
 800eedc:	3714      	adds	r7, #20
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	20005004 	.word	0x20005004

0800eeec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eefc:	f001 fe4a 	bl	8010b94 <vPortEnterCritical>
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef06:	b25b      	sxtb	r3, r3
 800ef08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef0c:	d103      	bne.n	800ef16 <vQueueWaitForMessageRestricted+0x2a>
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef1c:	b25b      	sxtb	r3, r3
 800ef1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef22:	d103      	bne.n	800ef2c <vQueueWaitForMessageRestricted+0x40>
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2200      	movs	r2, #0
 800ef28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef2c:	f001 fe62 	bl	8010bf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d106      	bne.n	800ef46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	3324      	adds	r3, #36	; 0x24
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	68b9      	ldr	r1, [r7, #8]
 800ef40:	4618      	mov	r0, r3
 800ef42:	f000 fc61 	bl	800f808 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ef46:	6978      	ldr	r0, [r7, #20]
 800ef48:	f7ff ff00 	bl	800ed4c <prvUnlockQueue>
	}
 800ef4c:	bf00      	nop
 800ef4e:	3718      	adds	r7, #24
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b08e      	sub	sp, #56	; 0x38
 800ef58:	af04      	add	r7, sp, #16
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ef62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10a      	bne.n	800ef7e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	623b      	str	r3, [r7, #32]
}
 800ef7a:	bf00      	nop
 800ef7c:	e7fe      	b.n	800ef7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ef7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d10a      	bne.n	800ef9a <xTaskCreateStatic+0x46>
	__asm volatile
 800ef84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef88:	f383 8811 	msr	BASEPRI, r3
 800ef8c:	f3bf 8f6f 	isb	sy
 800ef90:	f3bf 8f4f 	dsb	sy
 800ef94:	61fb      	str	r3, [r7, #28]
}
 800ef96:	bf00      	nop
 800ef98:	e7fe      	b.n	800ef98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ef9a:	23bc      	movs	r3, #188	; 0xbc
 800ef9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	2bbc      	cmp	r3, #188	; 0xbc
 800efa2:	d00a      	beq.n	800efba <xTaskCreateStatic+0x66>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	61bb      	str	r3, [r7, #24]
}
 800efb6:	bf00      	nop
 800efb8:	e7fe      	b.n	800efb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800efba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800efbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d01e      	beq.n	800f000 <xTaskCreateStatic+0xac>
 800efc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d01b      	beq.n	800f000 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800efc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800efd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd4:	2202      	movs	r2, #2
 800efd6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800efda:	2300      	movs	r3, #0
 800efdc:	9303      	str	r3, [sp, #12]
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	9302      	str	r3, [sp, #8]
 800efe2:	f107 0314 	add.w	r3, r7, #20
 800efe6:	9301      	str	r3, [sp, #4]
 800efe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	68b9      	ldr	r1, [r7, #8]
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f000 f850 	bl	800f098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800effa:	f000 f8f3 	bl	800f1e4 <prvAddNewTaskToReadyList>
 800effe:	e001      	b.n	800f004 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f000:	2300      	movs	r3, #0
 800f002:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f004:	697b      	ldr	r3, [r7, #20]
	}
 800f006:	4618      	mov	r0, r3
 800f008:	3728      	adds	r7, #40	; 0x28
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f00e:	b580      	push	{r7, lr}
 800f010:	b08c      	sub	sp, #48	; 0x30
 800f012:	af04      	add	r7, sp, #16
 800f014:	60f8      	str	r0, [r7, #12]
 800f016:	60b9      	str	r1, [r7, #8]
 800f018:	603b      	str	r3, [r7, #0]
 800f01a:	4613      	mov	r3, r2
 800f01c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f01e:	88fb      	ldrh	r3, [r7, #6]
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4618      	mov	r0, r3
 800f024:	f001 fed8 	bl	8010dd8 <pvPortMalloc>
 800f028:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00e      	beq.n	800f04e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f030:	20bc      	movs	r0, #188	; 0xbc
 800f032:	f001 fed1 	bl	8010dd8 <pvPortMalloc>
 800f036:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d003      	beq.n	800f046 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	697a      	ldr	r2, [r7, #20]
 800f042:	631a      	str	r2, [r3, #48]	; 0x30
 800f044:	e005      	b.n	800f052 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f046:	6978      	ldr	r0, [r7, #20]
 800f048:	f001 ff92 	bl	8010f70 <vPortFree>
 800f04c:	e001      	b.n	800f052 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f04e:	2300      	movs	r3, #0
 800f050:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f052:	69fb      	ldr	r3, [r7, #28]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d017      	beq.n	800f088 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f060:	88fa      	ldrh	r2, [r7, #6]
 800f062:	2300      	movs	r3, #0
 800f064:	9303      	str	r3, [sp, #12]
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	9302      	str	r3, [sp, #8]
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06c:	9301      	str	r3, [sp, #4]
 800f06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f070:	9300      	str	r3, [sp, #0]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	68b9      	ldr	r1, [r7, #8]
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f000 f80e 	bl	800f098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f07c:	69f8      	ldr	r0, [r7, #28]
 800f07e:	f000 f8b1 	bl	800f1e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f082:	2301      	movs	r3, #1
 800f084:	61bb      	str	r3, [r7, #24]
 800f086:	e002      	b.n	800f08e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f08c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f08e:	69bb      	ldr	r3, [r7, #24]
	}
 800f090:	4618      	mov	r0, r3
 800f092:	3720      	adds	r7, #32
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b088      	sub	sp, #32
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
 800f0a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	21a5      	movs	r1, #165	; 0xa5
 800f0b2:	f002 fbc7 	bl	8011844 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	f023 0307 	bic.w	r3, r3, #7
 800f0ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00a      	beq.n	800f0f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	617b      	str	r3, [r7, #20]
}
 800f0ec:	bf00      	nop
 800f0ee:	e7fe      	b.n	800f0ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d01f      	beq.n	800f136 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	61fb      	str	r3, [r7, #28]
 800f0fa:	e012      	b.n	800f122 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	4413      	add	r3, r2
 800f102:	7819      	ldrb	r1, [r3, #0]
 800f104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	4413      	add	r3, r2
 800f10a:	3334      	adds	r3, #52	; 0x34
 800f10c:	460a      	mov	r2, r1
 800f10e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	4413      	add	r3, r2
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d006      	beq.n	800f12a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	3301      	adds	r3, #1
 800f120:	61fb      	str	r3, [r7, #28]
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	2b0f      	cmp	r3, #15
 800f126:	d9e9      	bls.n	800f0fc <prvInitialiseNewTask+0x64>
 800f128:	e000      	b.n	800f12c <prvInitialiseNewTask+0x94>
			{
				break;
 800f12a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f134:	e003      	b.n	800f13e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	2200      	movs	r2, #0
 800f13a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	2b37      	cmp	r3, #55	; 0x37
 800f142:	d901      	bls.n	800f148 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f144:	2337      	movs	r3, #55	; 0x37
 800f146:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f14c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f152:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f156:	2200      	movs	r2, #0
 800f158:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	3304      	adds	r3, #4
 800f15e:	4618      	mov	r0, r3
 800f160:	f7ff f87a 	bl	800e258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f166:	3318      	adds	r3, #24
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff f875 	bl	800e258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f176:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f182:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f186:	2200      	movs	r2, #0
 800f188:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18e:	2200      	movs	r2, #0
 800f190:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	3354      	adds	r3, #84	; 0x54
 800f198:	2260      	movs	r2, #96	; 0x60
 800f19a:	2100      	movs	r1, #0
 800f19c:	4618      	mov	r0, r3
 800f19e:	f002 fb51 	bl	8011844 <memset>
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	4a0c      	ldr	r2, [pc, #48]	; (800f1d8 <prvInitialiseNewTask+0x140>)
 800f1a6:	659a      	str	r2, [r3, #88]	; 0x58
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	4a0c      	ldr	r2, [pc, #48]	; (800f1dc <prvInitialiseNewTask+0x144>)
 800f1ac:	65da      	str	r2, [r3, #92]	; 0x5c
 800f1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b0:	4a0b      	ldr	r2, [pc, #44]	; (800f1e0 <prvInitialiseNewTask+0x148>)
 800f1b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	68f9      	ldr	r1, [r7, #12]
 800f1b8:	69b8      	ldr	r0, [r7, #24]
 800f1ba:	f001 fbbf 	bl	801093c <pxPortInitialiseStack>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d002      	beq.n	800f1d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1d0:	bf00      	nop
 800f1d2:	3720      	adds	r7, #32
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	08014ca4 	.word	0x08014ca4
 800f1dc:	08014cc4 	.word	0x08014cc4
 800f1e0:	08014c84 	.word	0x08014c84

0800f1e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f1ec:	f001 fcd2 	bl	8010b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f1f0:	4b2d      	ldr	r3, [pc, #180]	; (800f2a8 <prvAddNewTaskToReadyList+0xc4>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	4a2c      	ldr	r2, [pc, #176]	; (800f2a8 <prvAddNewTaskToReadyList+0xc4>)
 800f1f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f1fa:	4b2c      	ldr	r3, [pc, #176]	; (800f2ac <prvAddNewTaskToReadyList+0xc8>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d109      	bne.n	800f216 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f202:	4a2a      	ldr	r2, [pc, #168]	; (800f2ac <prvAddNewTaskToReadyList+0xc8>)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f208:	4b27      	ldr	r3, [pc, #156]	; (800f2a8 <prvAddNewTaskToReadyList+0xc4>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d110      	bne.n	800f232 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f210:	f000 fc26 	bl	800fa60 <prvInitialiseTaskLists>
 800f214:	e00d      	b.n	800f232 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f216:	4b26      	ldr	r3, [pc, #152]	; (800f2b0 <prvAddNewTaskToReadyList+0xcc>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d109      	bne.n	800f232 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f21e:	4b23      	ldr	r3, [pc, #140]	; (800f2ac <prvAddNewTaskToReadyList+0xc8>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f228:	429a      	cmp	r2, r3
 800f22a:	d802      	bhi.n	800f232 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f22c:	4a1f      	ldr	r2, [pc, #124]	; (800f2ac <prvAddNewTaskToReadyList+0xc8>)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f232:	4b20      	ldr	r3, [pc, #128]	; (800f2b4 <prvAddNewTaskToReadyList+0xd0>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3301      	adds	r3, #1
 800f238:	4a1e      	ldr	r2, [pc, #120]	; (800f2b4 <prvAddNewTaskToReadyList+0xd0>)
 800f23a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f23c:	4b1d      	ldr	r3, [pc, #116]	; (800f2b4 <prvAddNewTaskToReadyList+0xd0>)
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f248:	4b1b      	ldr	r3, [pc, #108]	; (800f2b8 <prvAddNewTaskToReadyList+0xd4>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d903      	bls.n	800f258 <prvAddNewTaskToReadyList+0x74>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f254:	4a18      	ldr	r2, [pc, #96]	; (800f2b8 <prvAddNewTaskToReadyList+0xd4>)
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f25c:	4613      	mov	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4413      	add	r3, r2
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4a15      	ldr	r2, [pc, #84]	; (800f2bc <prvAddNewTaskToReadyList+0xd8>)
 800f266:	441a      	add	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	3304      	adds	r3, #4
 800f26c:	4619      	mov	r1, r3
 800f26e:	4610      	mov	r0, r2
 800f270:	f7fe ffff 	bl	800e272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f274:	f001 fcbe 	bl	8010bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f278:	4b0d      	ldr	r3, [pc, #52]	; (800f2b0 <prvAddNewTaskToReadyList+0xcc>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00e      	beq.n	800f29e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f280:	4b0a      	ldr	r3, [pc, #40]	; (800f2ac <prvAddNewTaskToReadyList+0xc8>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d207      	bcs.n	800f29e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f28e:	4b0c      	ldr	r3, [pc, #48]	; (800f2c0 <prvAddNewTaskToReadyList+0xdc>)
 800f290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f294:	601a      	str	r2, [r3, #0]
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f29e:	bf00      	nop
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	20000d94 	.word	0x20000d94
 800f2ac:	200008c0 	.word	0x200008c0
 800f2b0:	20000da0 	.word	0x20000da0
 800f2b4:	20000db0 	.word	0x20000db0
 800f2b8:	20000d9c 	.word	0x20000d9c
 800f2bc:	200008c4 	.word	0x200008c4
 800f2c0:	e000ed04 	.word	0xe000ed04

0800f2c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d017      	beq.n	800f306 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f2d6:	4b13      	ldr	r3, [pc, #76]	; (800f324 <vTaskDelay+0x60>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00a      	beq.n	800f2f4 <vTaskDelay+0x30>
	__asm volatile
 800f2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	60bb      	str	r3, [r7, #8]
}
 800f2f0:	bf00      	nop
 800f2f2:	e7fe      	b.n	800f2f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f2f4:	f000 f88a 	bl	800f40c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 ff00 	bl	8010100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f300:	f000 f892 	bl	800f428 <xTaskResumeAll>
 800f304:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d107      	bne.n	800f31c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f30c:	4b06      	ldr	r3, [pc, #24]	; (800f328 <vTaskDelay+0x64>)
 800f30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f312:	601a      	str	r2, [r3, #0]
 800f314:	f3bf 8f4f 	dsb	sy
 800f318:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f31c:	bf00      	nop
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	20000dbc 	.word	0x20000dbc
 800f328:	e000ed04 	.word	0xe000ed04

0800f32c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b08a      	sub	sp, #40	; 0x28
 800f330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f332:	2300      	movs	r3, #0
 800f334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f33a:	463a      	mov	r2, r7
 800f33c:	1d39      	adds	r1, r7, #4
 800f33e:	f107 0308 	add.w	r3, r7, #8
 800f342:	4618      	mov	r0, r3
 800f344:	f7fe ff34 	bl	800e1b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f348:	6839      	ldr	r1, [r7, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	9202      	str	r2, [sp, #8]
 800f350:	9301      	str	r3, [sp, #4]
 800f352:	2300      	movs	r3, #0
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	2300      	movs	r3, #0
 800f358:	460a      	mov	r2, r1
 800f35a:	4924      	ldr	r1, [pc, #144]	; (800f3ec <vTaskStartScheduler+0xc0>)
 800f35c:	4824      	ldr	r0, [pc, #144]	; (800f3f0 <vTaskStartScheduler+0xc4>)
 800f35e:	f7ff fdf9 	bl	800ef54 <xTaskCreateStatic>
 800f362:	4603      	mov	r3, r0
 800f364:	4a23      	ldr	r2, [pc, #140]	; (800f3f4 <vTaskStartScheduler+0xc8>)
 800f366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f368:	4b22      	ldr	r3, [pc, #136]	; (800f3f4 <vTaskStartScheduler+0xc8>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d002      	beq.n	800f376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f370:	2301      	movs	r3, #1
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	e001      	b.n	800f37a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f376:	2300      	movs	r3, #0
 800f378:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d102      	bne.n	800f386 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f380:	f000 ff12 	bl	80101a8 <xTimerCreateTimerTask>
 800f384:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d11b      	bne.n	800f3c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800f38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f390:	f383 8811 	msr	BASEPRI, r3
 800f394:	f3bf 8f6f 	isb	sy
 800f398:	f3bf 8f4f 	dsb	sy
 800f39c:	613b      	str	r3, [r7, #16]
}
 800f39e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f3a0:	4b15      	ldr	r3, [pc, #84]	; (800f3f8 <vTaskStartScheduler+0xcc>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	3354      	adds	r3, #84	; 0x54
 800f3a6:	4a15      	ldr	r2, [pc, #84]	; (800f3fc <vTaskStartScheduler+0xd0>)
 800f3a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f3aa:	4b15      	ldr	r3, [pc, #84]	; (800f400 <vTaskStartScheduler+0xd4>)
 800f3ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f3b2:	4b14      	ldr	r3, [pc, #80]	; (800f404 <vTaskStartScheduler+0xd8>)
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f3b8:	4b13      	ldr	r3, [pc, #76]	; (800f408 <vTaskStartScheduler+0xdc>)
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f3be:	f001 fb47 	bl	8010a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f3c2:	e00e      	b.n	800f3e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3ca:	d10a      	bne.n	800f3e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800f3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d0:	f383 8811 	msr	BASEPRI, r3
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	f3bf 8f4f 	dsb	sy
 800f3dc:	60fb      	str	r3, [r7, #12]
}
 800f3de:	bf00      	nop
 800f3e0:	e7fe      	b.n	800f3e0 <vTaskStartScheduler+0xb4>
}
 800f3e2:	bf00      	nop
 800f3e4:	3718      	adds	r7, #24
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	080126c0 	.word	0x080126c0
 800f3f0:	0800fa31 	.word	0x0800fa31
 800f3f4:	20000db8 	.word	0x20000db8
 800f3f8:	200008c0 	.word	0x200008c0
 800f3fc:	20000044 	.word	0x20000044
 800f400:	20000db4 	.word	0x20000db4
 800f404:	20000da0 	.word	0x20000da0
 800f408:	20000d98 	.word	0x20000d98

0800f40c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f40c:	b480      	push	{r7}
 800f40e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f410:	4b04      	ldr	r3, [pc, #16]	; (800f424 <vTaskSuspendAll+0x18>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	3301      	adds	r3, #1
 800f416:	4a03      	ldr	r2, [pc, #12]	; (800f424 <vTaskSuspendAll+0x18>)
 800f418:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f41a:	bf00      	nop
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr
 800f424:	20000dbc 	.word	0x20000dbc

0800f428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f42e:	2300      	movs	r3, #0
 800f430:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f432:	2300      	movs	r3, #0
 800f434:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f436:	4b42      	ldr	r3, [pc, #264]	; (800f540 <xTaskResumeAll+0x118>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d10a      	bne.n	800f454 <xTaskResumeAll+0x2c>
	__asm volatile
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	f383 8811 	msr	BASEPRI, r3
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	603b      	str	r3, [r7, #0]
}
 800f450:	bf00      	nop
 800f452:	e7fe      	b.n	800f452 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f454:	f001 fb9e 	bl	8010b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f458:	4b39      	ldr	r3, [pc, #228]	; (800f540 <xTaskResumeAll+0x118>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3b01      	subs	r3, #1
 800f45e:	4a38      	ldr	r2, [pc, #224]	; (800f540 <xTaskResumeAll+0x118>)
 800f460:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f462:	4b37      	ldr	r3, [pc, #220]	; (800f540 <xTaskResumeAll+0x118>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d162      	bne.n	800f530 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f46a:	4b36      	ldr	r3, [pc, #216]	; (800f544 <xTaskResumeAll+0x11c>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d05e      	beq.n	800f530 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f472:	e02f      	b.n	800f4d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f474:	4b34      	ldr	r3, [pc, #208]	; (800f548 <xTaskResumeAll+0x120>)
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	3318      	adds	r3, #24
 800f480:	4618      	mov	r0, r3
 800f482:	f7fe ff53 	bl	800e32c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	3304      	adds	r3, #4
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fe ff4e 	bl	800e32c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f494:	4b2d      	ldr	r3, [pc, #180]	; (800f54c <xTaskResumeAll+0x124>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d903      	bls.n	800f4a4 <xTaskResumeAll+0x7c>
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	4a2a      	ldr	r2, [pc, #168]	; (800f54c <xTaskResumeAll+0x124>)
 800f4a2:	6013      	str	r3, [r2, #0]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4413      	add	r3, r2
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	4a27      	ldr	r2, [pc, #156]	; (800f550 <xTaskResumeAll+0x128>)
 800f4b2:	441a      	add	r2, r3
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	f7fe fed9 	bl	800e272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4c4:	4b23      	ldr	r3, [pc, #140]	; (800f554 <xTaskResumeAll+0x12c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d302      	bcc.n	800f4d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f4ce:	4b22      	ldr	r3, [pc, #136]	; (800f558 <xTaskResumeAll+0x130>)
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4d4:	4b1c      	ldr	r3, [pc, #112]	; (800f548 <xTaskResumeAll+0x120>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1cb      	bne.n	800f474 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d001      	beq.n	800f4e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f4e2:	f000 fb5f 	bl	800fba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f4e6:	4b1d      	ldr	r3, [pc, #116]	; (800f55c <xTaskResumeAll+0x134>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d010      	beq.n	800f514 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f4f2:	f000 f847 	bl	800f584 <xTaskIncrementTick>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d002      	beq.n	800f502 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f4fc:	4b16      	ldr	r3, [pc, #88]	; (800f558 <xTaskResumeAll+0x130>)
 800f4fe:	2201      	movs	r2, #1
 800f500:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	3b01      	subs	r3, #1
 800f506:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d1f1      	bne.n	800f4f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f50e:	4b13      	ldr	r3, [pc, #76]	; (800f55c <xTaskResumeAll+0x134>)
 800f510:	2200      	movs	r2, #0
 800f512:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f514:	4b10      	ldr	r3, [pc, #64]	; (800f558 <xTaskResumeAll+0x130>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d009      	beq.n	800f530 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f51c:	2301      	movs	r3, #1
 800f51e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f520:	4b0f      	ldr	r3, [pc, #60]	; (800f560 <xTaskResumeAll+0x138>)
 800f522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f526:	601a      	str	r2, [r3, #0]
 800f528:	f3bf 8f4f 	dsb	sy
 800f52c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f530:	f001 fb60 	bl	8010bf4 <vPortExitCritical>

	return xAlreadyYielded;
 800f534:	68bb      	ldr	r3, [r7, #8]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3710      	adds	r7, #16
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	20000dbc 	.word	0x20000dbc
 800f544:	20000d94 	.word	0x20000d94
 800f548:	20000d54 	.word	0x20000d54
 800f54c:	20000d9c 	.word	0x20000d9c
 800f550:	200008c4 	.word	0x200008c4
 800f554:	200008c0 	.word	0x200008c0
 800f558:	20000da8 	.word	0x20000da8
 800f55c:	20000da4 	.word	0x20000da4
 800f560:	e000ed04 	.word	0xe000ed04

0800f564 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f56a:	4b05      	ldr	r3, [pc, #20]	; (800f580 <xTaskGetTickCount+0x1c>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f570:	687b      	ldr	r3, [r7, #4]
}
 800f572:	4618      	mov	r0, r3
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	20000d98 	.word	0x20000d98

0800f584 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f58a:	2300      	movs	r3, #0
 800f58c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f58e:	4b4f      	ldr	r3, [pc, #316]	; (800f6cc <xTaskIncrementTick+0x148>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	f040 808f 	bne.w	800f6b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f598:	4b4d      	ldr	r3, [pc, #308]	; (800f6d0 <xTaskIncrementTick+0x14c>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	3301      	adds	r3, #1
 800f59e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f5a0:	4a4b      	ldr	r2, [pc, #300]	; (800f6d0 <xTaskIncrementTick+0x14c>)
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d120      	bne.n	800f5ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f5ac:	4b49      	ldr	r3, [pc, #292]	; (800f6d4 <xTaskIncrementTick+0x150>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00a      	beq.n	800f5cc <xTaskIncrementTick+0x48>
	__asm volatile
 800f5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	603b      	str	r3, [r7, #0]
}
 800f5c8:	bf00      	nop
 800f5ca:	e7fe      	b.n	800f5ca <xTaskIncrementTick+0x46>
 800f5cc:	4b41      	ldr	r3, [pc, #260]	; (800f6d4 <xTaskIncrementTick+0x150>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	60fb      	str	r3, [r7, #12]
 800f5d2:	4b41      	ldr	r3, [pc, #260]	; (800f6d8 <xTaskIncrementTick+0x154>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a3f      	ldr	r2, [pc, #252]	; (800f6d4 <xTaskIncrementTick+0x150>)
 800f5d8:	6013      	str	r3, [r2, #0]
 800f5da:	4a3f      	ldr	r2, [pc, #252]	; (800f6d8 <xTaskIncrementTick+0x154>)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6013      	str	r3, [r2, #0]
 800f5e0:	4b3e      	ldr	r3, [pc, #248]	; (800f6dc <xTaskIncrementTick+0x158>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	4a3d      	ldr	r2, [pc, #244]	; (800f6dc <xTaskIncrementTick+0x158>)
 800f5e8:	6013      	str	r3, [r2, #0]
 800f5ea:	f000 fadb 	bl	800fba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f5ee:	4b3c      	ldr	r3, [pc, #240]	; (800f6e0 <xTaskIncrementTick+0x15c>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	693a      	ldr	r2, [r7, #16]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d349      	bcc.n	800f68c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5f8:	4b36      	ldr	r3, [pc, #216]	; (800f6d4 <xTaskIncrementTick+0x150>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d104      	bne.n	800f60c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f602:	4b37      	ldr	r3, [pc, #220]	; (800f6e0 <xTaskIncrementTick+0x15c>)
 800f604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f608:	601a      	str	r2, [r3, #0]
					break;
 800f60a:	e03f      	b.n	800f68c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f60c:	4b31      	ldr	r3, [pc, #196]	; (800f6d4 <xTaskIncrementTick+0x150>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f61c:	693a      	ldr	r2, [r7, #16]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	429a      	cmp	r2, r3
 800f622:	d203      	bcs.n	800f62c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f624:	4a2e      	ldr	r2, [pc, #184]	; (800f6e0 <xTaskIncrementTick+0x15c>)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f62a:	e02f      	b.n	800f68c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	3304      	adds	r3, #4
 800f630:	4618      	mov	r0, r3
 800f632:	f7fe fe7b 	bl	800e32c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d004      	beq.n	800f648 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	3318      	adds	r3, #24
 800f642:	4618      	mov	r0, r3
 800f644:	f7fe fe72 	bl	800e32c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f64c:	4b25      	ldr	r3, [pc, #148]	; (800f6e4 <xTaskIncrementTick+0x160>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	429a      	cmp	r2, r3
 800f652:	d903      	bls.n	800f65c <xTaskIncrementTick+0xd8>
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f658:	4a22      	ldr	r2, [pc, #136]	; (800f6e4 <xTaskIncrementTick+0x160>)
 800f65a:	6013      	str	r3, [r2, #0]
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f660:	4613      	mov	r3, r2
 800f662:	009b      	lsls	r3, r3, #2
 800f664:	4413      	add	r3, r2
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	4a1f      	ldr	r2, [pc, #124]	; (800f6e8 <xTaskIncrementTick+0x164>)
 800f66a:	441a      	add	r2, r3
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	3304      	adds	r3, #4
 800f670:	4619      	mov	r1, r3
 800f672:	4610      	mov	r0, r2
 800f674:	f7fe fdfd 	bl	800e272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f67c:	4b1b      	ldr	r3, [pc, #108]	; (800f6ec <xTaskIncrementTick+0x168>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f682:	429a      	cmp	r2, r3
 800f684:	d3b8      	bcc.n	800f5f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f686:	2301      	movs	r3, #1
 800f688:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f68a:	e7b5      	b.n	800f5f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f68c:	4b17      	ldr	r3, [pc, #92]	; (800f6ec <xTaskIncrementTick+0x168>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f692:	4915      	ldr	r1, [pc, #84]	; (800f6e8 <xTaskIncrementTick+0x164>)
 800f694:	4613      	mov	r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	4413      	add	r3, r2
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	440b      	add	r3, r1
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d901      	bls.n	800f6a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f6a8:	4b11      	ldr	r3, [pc, #68]	; (800f6f0 <xTaskIncrementTick+0x16c>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d007      	beq.n	800f6c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	617b      	str	r3, [r7, #20]
 800f6b4:	e004      	b.n	800f6c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f6b6:	4b0f      	ldr	r3, [pc, #60]	; (800f6f4 <xTaskIncrementTick+0x170>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	4a0d      	ldr	r2, [pc, #52]	; (800f6f4 <xTaskIncrementTick+0x170>)
 800f6be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f6c0:	697b      	ldr	r3, [r7, #20]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3718      	adds	r7, #24
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	20000dbc 	.word	0x20000dbc
 800f6d0:	20000d98 	.word	0x20000d98
 800f6d4:	20000d4c 	.word	0x20000d4c
 800f6d8:	20000d50 	.word	0x20000d50
 800f6dc:	20000dac 	.word	0x20000dac
 800f6e0:	20000db4 	.word	0x20000db4
 800f6e4:	20000d9c 	.word	0x20000d9c
 800f6e8:	200008c4 	.word	0x200008c4
 800f6ec:	200008c0 	.word	0x200008c0
 800f6f0:	20000da8 	.word	0x20000da8
 800f6f4:	20000da4 	.word	0x20000da4

0800f6f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f6fe:	4b2a      	ldr	r3, [pc, #168]	; (800f7a8 <vTaskSwitchContext+0xb0>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d003      	beq.n	800f70e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f706:	4b29      	ldr	r3, [pc, #164]	; (800f7ac <vTaskSwitchContext+0xb4>)
 800f708:	2201      	movs	r2, #1
 800f70a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f70c:	e046      	b.n	800f79c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f70e:	4b27      	ldr	r3, [pc, #156]	; (800f7ac <vTaskSwitchContext+0xb4>)
 800f710:	2200      	movs	r2, #0
 800f712:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f714:	4b26      	ldr	r3, [pc, #152]	; (800f7b0 <vTaskSwitchContext+0xb8>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	e010      	b.n	800f73e <vTaskSwitchContext+0x46>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10a      	bne.n	800f738 <vTaskSwitchContext+0x40>
	__asm volatile
 800f722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f726:	f383 8811 	msr	BASEPRI, r3
 800f72a:	f3bf 8f6f 	isb	sy
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	607b      	str	r3, [r7, #4]
}
 800f734:	bf00      	nop
 800f736:	e7fe      	b.n	800f736 <vTaskSwitchContext+0x3e>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	3b01      	subs	r3, #1
 800f73c:	60fb      	str	r3, [r7, #12]
 800f73e:	491d      	ldr	r1, [pc, #116]	; (800f7b4 <vTaskSwitchContext+0xbc>)
 800f740:	68fa      	ldr	r2, [r7, #12]
 800f742:	4613      	mov	r3, r2
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	4413      	add	r3, r2
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	440b      	add	r3, r1
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d0e4      	beq.n	800f71c <vTaskSwitchContext+0x24>
 800f752:	68fa      	ldr	r2, [r7, #12]
 800f754:	4613      	mov	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4413      	add	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4a15      	ldr	r2, [pc, #84]	; (800f7b4 <vTaskSwitchContext+0xbc>)
 800f75e:	4413      	add	r3, r2
 800f760:	60bb      	str	r3, [r7, #8]
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	685a      	ldr	r2, [r3, #4]
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	605a      	str	r2, [r3, #4]
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	685a      	ldr	r2, [r3, #4]
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	3308      	adds	r3, #8
 800f774:	429a      	cmp	r2, r3
 800f776:	d104      	bne.n	800f782 <vTaskSwitchContext+0x8a>
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	685a      	ldr	r2, [r3, #4]
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	605a      	str	r2, [r3, #4]
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	4a0b      	ldr	r2, [pc, #44]	; (800f7b8 <vTaskSwitchContext+0xc0>)
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	4a08      	ldr	r2, [pc, #32]	; (800f7b0 <vTaskSwitchContext+0xb8>)
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f792:	4b09      	ldr	r3, [pc, #36]	; (800f7b8 <vTaskSwitchContext+0xc0>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	3354      	adds	r3, #84	; 0x54
 800f798:	4a08      	ldr	r2, [pc, #32]	; (800f7bc <vTaskSwitchContext+0xc4>)
 800f79a:	6013      	str	r3, [r2, #0]
}
 800f79c:	bf00      	nop
 800f79e:	3714      	adds	r7, #20
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr
 800f7a8:	20000dbc 	.word	0x20000dbc
 800f7ac:	20000da8 	.word	0x20000da8
 800f7b0:	20000d9c 	.word	0x20000d9c
 800f7b4:	200008c4 	.word	0x200008c4
 800f7b8:	200008c0 	.word	0x200008c0
 800f7bc:	20000044 	.word	0x20000044

0800f7c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d10a      	bne.n	800f7e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	60fb      	str	r3, [r7, #12]
}
 800f7e2:	bf00      	nop
 800f7e4:	e7fe      	b.n	800f7e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7e6:	4b07      	ldr	r3, [pc, #28]	; (800f804 <vTaskPlaceOnEventList+0x44>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3318      	adds	r3, #24
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f7fe fd63 	bl	800e2ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f7f4:	2101      	movs	r1, #1
 800f7f6:	6838      	ldr	r0, [r7, #0]
 800f7f8:	f000 fc82 	bl	8010100 <prvAddCurrentTaskToDelayedList>
}
 800f7fc:	bf00      	nop
 800f7fe:	3710      	adds	r7, #16
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}
 800f804:	200008c0 	.word	0x200008c0

0800f808 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b086      	sub	sp, #24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d10a      	bne.n	800f830 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f81e:	f383 8811 	msr	BASEPRI, r3
 800f822:	f3bf 8f6f 	isb	sy
 800f826:	f3bf 8f4f 	dsb	sy
 800f82a:	617b      	str	r3, [r7, #20]
}
 800f82c:	bf00      	nop
 800f82e:	e7fe      	b.n	800f82e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f830:	4b0a      	ldr	r3, [pc, #40]	; (800f85c <vTaskPlaceOnEventListRestricted+0x54>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	3318      	adds	r3, #24
 800f836:	4619      	mov	r1, r3
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f7fe fd1a 	bl	800e272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f848:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f84a:	6879      	ldr	r1, [r7, #4]
 800f84c:	68b8      	ldr	r0, [r7, #8]
 800f84e:	f000 fc57 	bl	8010100 <prvAddCurrentTaskToDelayedList>
	}
 800f852:	bf00      	nop
 800f854:	3718      	adds	r7, #24
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	200008c0 	.word	0x200008c0

0800f860 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d10a      	bne.n	800f88c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87a:	f383 8811 	msr	BASEPRI, r3
 800f87e:	f3bf 8f6f 	isb	sy
 800f882:	f3bf 8f4f 	dsb	sy
 800f886:	60fb      	str	r3, [r7, #12]
}
 800f888:	bf00      	nop
 800f88a:	e7fe      	b.n	800f88a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	3318      	adds	r3, #24
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe fd4b 	bl	800e32c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f896:	4b1e      	ldr	r3, [pc, #120]	; (800f910 <xTaskRemoveFromEventList+0xb0>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d11d      	bne.n	800f8da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	3304      	adds	r3, #4
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fe fd42 	bl	800e32c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ac:	4b19      	ldr	r3, [pc, #100]	; (800f914 <xTaskRemoveFromEventList+0xb4>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d903      	bls.n	800f8bc <xTaskRemoveFromEventList+0x5c>
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b8:	4a16      	ldr	r2, [pc, #88]	; (800f914 <xTaskRemoveFromEventList+0xb4>)
 800f8ba:	6013      	str	r3, [r2, #0]
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	4413      	add	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4a13      	ldr	r2, [pc, #76]	; (800f918 <xTaskRemoveFromEventList+0xb8>)
 800f8ca:	441a      	add	r2, r3
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	3304      	adds	r3, #4
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	4610      	mov	r0, r2
 800f8d4:	f7fe fccd 	bl	800e272 <vListInsertEnd>
 800f8d8:	e005      	b.n	800f8e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	3318      	adds	r3, #24
 800f8de:	4619      	mov	r1, r3
 800f8e0:	480e      	ldr	r0, [pc, #56]	; (800f91c <xTaskRemoveFromEventList+0xbc>)
 800f8e2:	f7fe fcc6 	bl	800e272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ea:	4b0d      	ldr	r3, [pc, #52]	; (800f920 <xTaskRemoveFromEventList+0xc0>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d905      	bls.n	800f900 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f8f8:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <xTaskRemoveFromEventList+0xc4>)
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	601a      	str	r2, [r3, #0]
 800f8fe:	e001      	b.n	800f904 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f900:	2300      	movs	r3, #0
 800f902:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f904:	697b      	ldr	r3, [r7, #20]
}
 800f906:	4618      	mov	r0, r3
 800f908:	3718      	adds	r7, #24
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	20000dbc 	.word	0x20000dbc
 800f914:	20000d9c 	.word	0x20000d9c
 800f918:	200008c4 	.word	0x200008c4
 800f91c:	20000d54 	.word	0x20000d54
 800f920:	200008c0 	.word	0x200008c0
 800f924:	20000da8 	.word	0x20000da8

0800f928 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f930:	4b06      	ldr	r3, [pc, #24]	; (800f94c <vTaskInternalSetTimeOutState+0x24>)
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f938:	4b05      	ldr	r3, [pc, #20]	; (800f950 <vTaskInternalSetTimeOutState+0x28>)
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	605a      	str	r2, [r3, #4]
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	20000dac 	.word	0x20000dac
 800f950:	20000d98 	.word	0x20000d98

0800f954 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b088      	sub	sp, #32
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d10a      	bne.n	800f97a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f968:	f383 8811 	msr	BASEPRI, r3
 800f96c:	f3bf 8f6f 	isb	sy
 800f970:	f3bf 8f4f 	dsb	sy
 800f974:	613b      	str	r3, [r7, #16]
}
 800f976:	bf00      	nop
 800f978:	e7fe      	b.n	800f978 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d10a      	bne.n	800f996 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	60fb      	str	r3, [r7, #12]
}
 800f992:	bf00      	nop
 800f994:	e7fe      	b.n	800f994 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f996:	f001 f8fd 	bl	8010b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f99a:	4b1d      	ldr	r3, [pc, #116]	; (800fa10 <xTaskCheckForTimeOut+0xbc>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	69ba      	ldr	r2, [r7, #24]
 800f9a6:	1ad3      	subs	r3, r2, r3
 800f9a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9b2:	d102      	bne.n	800f9ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	61fb      	str	r3, [r7, #28]
 800f9b8:	e023      	b.n	800fa02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	4b15      	ldr	r3, [pc, #84]	; (800fa14 <xTaskCheckForTimeOut+0xc0>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d007      	beq.n	800f9d6 <xTaskCheckForTimeOut+0x82>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	69ba      	ldr	r2, [r7, #24]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d302      	bcc.n	800f9d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	61fb      	str	r3, [r7, #28]
 800f9d4:	e015      	b.n	800fa02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	697a      	ldr	r2, [r7, #20]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d20b      	bcs.n	800f9f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	1ad2      	subs	r2, r2, r3
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f7ff ff9b 	bl	800f928 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	61fb      	str	r3, [r7, #28]
 800f9f6:	e004      	b.n	800fa02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa02:	f001 f8f7 	bl	8010bf4 <vPortExitCritical>

	return xReturn;
 800fa06:	69fb      	ldr	r3, [r7, #28]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3720      	adds	r7, #32
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	20000d98 	.word	0x20000d98
 800fa14:	20000dac 	.word	0x20000dac

0800fa18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa18:	b480      	push	{r7}
 800fa1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa1c:	4b03      	ldr	r3, [pc, #12]	; (800fa2c <vTaskMissedYield+0x14>)
 800fa1e:	2201      	movs	r2, #1
 800fa20:	601a      	str	r2, [r3, #0]
}
 800fa22:	bf00      	nop
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	20000da8 	.word	0x20000da8

0800fa30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa38:	f000 f852 	bl	800fae0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa3c:	4b06      	ldr	r3, [pc, #24]	; (800fa58 <prvIdleTask+0x28>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d9f9      	bls.n	800fa38 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fa44:	4b05      	ldr	r3, [pc, #20]	; (800fa5c <prvIdleTask+0x2c>)
 800fa46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa4a:	601a      	str	r2, [r3, #0]
 800fa4c:	f3bf 8f4f 	dsb	sy
 800fa50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fa54:	e7f0      	b.n	800fa38 <prvIdleTask+0x8>
 800fa56:	bf00      	nop
 800fa58:	200008c4 	.word	0x200008c4
 800fa5c:	e000ed04 	.word	0xe000ed04

0800fa60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa66:	2300      	movs	r3, #0
 800fa68:	607b      	str	r3, [r7, #4]
 800fa6a:	e00c      	b.n	800fa86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fa6c:	687a      	ldr	r2, [r7, #4]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	4a12      	ldr	r2, [pc, #72]	; (800fac0 <prvInitialiseTaskLists+0x60>)
 800fa78:	4413      	add	r3, r2
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fe fbcc 	bl	800e218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3301      	adds	r3, #1
 800fa84:	607b      	str	r3, [r7, #4]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b37      	cmp	r3, #55	; 0x37
 800fa8a:	d9ef      	bls.n	800fa6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fa8c:	480d      	ldr	r0, [pc, #52]	; (800fac4 <prvInitialiseTaskLists+0x64>)
 800fa8e:	f7fe fbc3 	bl	800e218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fa92:	480d      	ldr	r0, [pc, #52]	; (800fac8 <prvInitialiseTaskLists+0x68>)
 800fa94:	f7fe fbc0 	bl	800e218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fa98:	480c      	ldr	r0, [pc, #48]	; (800facc <prvInitialiseTaskLists+0x6c>)
 800fa9a:	f7fe fbbd 	bl	800e218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fa9e:	480c      	ldr	r0, [pc, #48]	; (800fad0 <prvInitialiseTaskLists+0x70>)
 800faa0:	f7fe fbba 	bl	800e218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800faa4:	480b      	ldr	r0, [pc, #44]	; (800fad4 <prvInitialiseTaskLists+0x74>)
 800faa6:	f7fe fbb7 	bl	800e218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800faaa:	4b0b      	ldr	r3, [pc, #44]	; (800fad8 <prvInitialiseTaskLists+0x78>)
 800faac:	4a05      	ldr	r2, [pc, #20]	; (800fac4 <prvInitialiseTaskLists+0x64>)
 800faae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fab0:	4b0a      	ldr	r3, [pc, #40]	; (800fadc <prvInitialiseTaskLists+0x7c>)
 800fab2:	4a05      	ldr	r2, [pc, #20]	; (800fac8 <prvInitialiseTaskLists+0x68>)
 800fab4:	601a      	str	r2, [r3, #0]
}
 800fab6:	bf00      	nop
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	200008c4 	.word	0x200008c4
 800fac4:	20000d24 	.word	0x20000d24
 800fac8:	20000d38 	.word	0x20000d38
 800facc:	20000d54 	.word	0x20000d54
 800fad0:	20000d68 	.word	0x20000d68
 800fad4:	20000d80 	.word	0x20000d80
 800fad8:	20000d4c 	.word	0x20000d4c
 800fadc:	20000d50 	.word	0x20000d50

0800fae0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fae6:	e019      	b.n	800fb1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fae8:	f001 f854 	bl	8010b94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faec:	4b10      	ldr	r3, [pc, #64]	; (800fb30 <prvCheckTasksWaitingTermination+0x50>)
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	3304      	adds	r3, #4
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fe fc17 	bl	800e32c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fafe:	4b0d      	ldr	r3, [pc, #52]	; (800fb34 <prvCheckTasksWaitingTermination+0x54>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	3b01      	subs	r3, #1
 800fb04:	4a0b      	ldr	r2, [pc, #44]	; (800fb34 <prvCheckTasksWaitingTermination+0x54>)
 800fb06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb08:	4b0b      	ldr	r3, [pc, #44]	; (800fb38 <prvCheckTasksWaitingTermination+0x58>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	4a0a      	ldr	r2, [pc, #40]	; (800fb38 <prvCheckTasksWaitingTermination+0x58>)
 800fb10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb12:	f001 f86f 	bl	8010bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f810 	bl	800fb3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb1c:	4b06      	ldr	r3, [pc, #24]	; (800fb38 <prvCheckTasksWaitingTermination+0x58>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1e1      	bne.n	800fae8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb24:	bf00      	nop
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	20000d68 	.word	0x20000d68
 800fb34:	20000d94 	.word	0x20000d94
 800fb38:	20000d7c 	.word	0x20000d7c

0800fb3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	3354      	adds	r3, #84	; 0x54
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f001 ff3b 	bl	80119c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d108      	bne.n	800fb6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f001 fa07 	bl	8010f70 <vPortFree>
				vPortFree( pxTCB );
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f001 fa04 	bl	8010f70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fb68:	e018      	b.n	800fb9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d103      	bne.n	800fb7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f001 f9fb 	bl	8010f70 <vPortFree>
	}
 800fb7a:	e00f      	b.n	800fb9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fb82:	2b02      	cmp	r3, #2
 800fb84:	d00a      	beq.n	800fb9c <prvDeleteTCB+0x60>
	__asm volatile
 800fb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8a:	f383 8811 	msr	BASEPRI, r3
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	60fb      	str	r3, [r7, #12]
}
 800fb98:	bf00      	nop
 800fb9a:	e7fe      	b.n	800fb9a <prvDeleteTCB+0x5e>
	}
 800fb9c:	bf00      	nop
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbaa:	4b0c      	ldr	r3, [pc, #48]	; (800fbdc <prvResetNextTaskUnblockTime+0x38>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d104      	bne.n	800fbbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fbb4:	4b0a      	ldr	r3, [pc, #40]	; (800fbe0 <prvResetNextTaskUnblockTime+0x3c>)
 800fbb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fbbc:	e008      	b.n	800fbd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbbe:	4b07      	ldr	r3, [pc, #28]	; (800fbdc <prvResetNextTaskUnblockTime+0x38>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	4a04      	ldr	r2, [pc, #16]	; (800fbe0 <prvResetNextTaskUnblockTime+0x3c>)
 800fbce:	6013      	str	r3, [r2, #0]
}
 800fbd0:	bf00      	nop
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr
 800fbdc:	20000d4c 	.word	0x20000d4c
 800fbe0:	20000db4 	.word	0x20000db4

0800fbe4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b083      	sub	sp, #12
 800fbe8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fbea:	4b0b      	ldr	r3, [pc, #44]	; (800fc18 <xTaskGetSchedulerState+0x34>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d102      	bne.n	800fbf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	607b      	str	r3, [r7, #4]
 800fbf6:	e008      	b.n	800fc0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbf8:	4b08      	ldr	r3, [pc, #32]	; (800fc1c <xTaskGetSchedulerState+0x38>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d102      	bne.n	800fc06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc00:	2302      	movs	r3, #2
 800fc02:	607b      	str	r3, [r7, #4]
 800fc04:	e001      	b.n	800fc0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc06:	2300      	movs	r3, #0
 800fc08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc0a:	687b      	ldr	r3, [r7, #4]
	}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	20000da0 	.word	0x20000da0
 800fc1c:	20000dbc 	.word	0x20000dbc

0800fc20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b086      	sub	sp, #24
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d056      	beq.n	800fce4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fc36:	4b2e      	ldr	r3, [pc, #184]	; (800fcf0 <xTaskPriorityDisinherit+0xd0>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	693a      	ldr	r2, [r7, #16]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d00a      	beq.n	800fc56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	f383 8811 	msr	BASEPRI, r3
 800fc48:	f3bf 8f6f 	isb	sy
 800fc4c:	f3bf 8f4f 	dsb	sy
 800fc50:	60fb      	str	r3, [r7, #12]
}
 800fc52:	bf00      	nop
 800fc54:	e7fe      	b.n	800fc54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d10a      	bne.n	800fc74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	60bb      	str	r3, [r7, #8]
}
 800fc70:	bf00      	nop
 800fc72:	e7fe      	b.n	800fc72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc78:	1e5a      	subs	r2, r3, #1
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d02c      	beq.n	800fce4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d128      	bne.n	800fce4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	3304      	adds	r3, #4
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7fe fb48 	bl	800e32c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb4:	4b0f      	ldr	r3, [pc, #60]	; (800fcf4 <xTaskPriorityDisinherit+0xd4>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d903      	bls.n	800fcc4 <xTaskPriorityDisinherit+0xa4>
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc0:	4a0c      	ldr	r2, [pc, #48]	; (800fcf4 <xTaskPriorityDisinherit+0xd4>)
 800fcc2:	6013      	str	r3, [r2, #0]
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc8:	4613      	mov	r3, r2
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	4413      	add	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	4a09      	ldr	r2, [pc, #36]	; (800fcf8 <xTaskPriorityDisinherit+0xd8>)
 800fcd2:	441a      	add	r2, r3
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	4619      	mov	r1, r3
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f7fe fac9 	bl	800e272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fce0:	2301      	movs	r3, #1
 800fce2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fce4:	697b      	ldr	r3, [r7, #20]
	}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3718      	adds	r7, #24
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	200008c0 	.word	0x200008c0
 800fcf4:	20000d9c 	.word	0x20000d9c
 800fcf8:	200008c4 	.word	0x200008c4

0800fcfc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b086      	sub	sp, #24
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
 800fd08:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800fd0a:	f000 ff43 	bl	8010b94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fd0e:	4b29      	ldr	r3, [pc, #164]	; (800fdb4 <xTaskNotifyWait+0xb8>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	2b02      	cmp	r3, #2
 800fd1a:	d01c      	beq.n	800fd56 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fd1c:	4b25      	ldr	r3, [pc, #148]	; (800fdb4 <xTaskNotifyWait+0xb8>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	43d2      	mvns	r2, r2
 800fd28:	400a      	ands	r2, r1
 800fd2a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fd2e:	4b21      	ldr	r3, [pc, #132]	; (800fdb4 <xTaskNotifyWait+0xb8>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2201      	movs	r2, #1
 800fd34:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00b      	beq.n	800fd56 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd3e:	2101      	movs	r1, #1
 800fd40:	6838      	ldr	r0, [r7, #0]
 800fd42:	f000 f9dd 	bl	8010100 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fd46:	4b1c      	ldr	r3, [pc, #112]	; (800fdb8 <xTaskNotifyWait+0xbc>)
 800fd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd4c:	601a      	str	r2, [r3, #0]
 800fd4e:	f3bf 8f4f 	dsb	sy
 800fd52:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fd56:	f000 ff4d 	bl	8010bf4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fd5a:	f000 ff1b 	bl	8010b94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d005      	beq.n	800fd70 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800fd64:	4b13      	ldr	r3, [pc, #76]	; (800fdb4 <xTaskNotifyWait+0xb8>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fd70:	4b10      	ldr	r3, [pc, #64]	; (800fdb4 <xTaskNotifyWait+0xb8>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	d002      	beq.n	800fd84 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	617b      	str	r3, [r7, #20]
 800fd82:	e00a      	b.n	800fd9a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fd84:	4b0b      	ldr	r3, [pc, #44]	; (800fdb4 <xTaskNotifyWait+0xb8>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	43d2      	mvns	r2, r2
 800fd90:	400a      	ands	r2, r1
 800fd92:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800fd96:	2301      	movs	r3, #1
 800fd98:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd9a:	4b06      	ldr	r3, [pc, #24]	; (800fdb4 <xTaskNotifyWait+0xb8>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800fda4:	f000 ff26 	bl	8010bf4 <vPortExitCritical>

		return xReturn;
 800fda8:	697b      	ldr	r3, [r7, #20]
	}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3718      	adds	r7, #24
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	200008c0 	.word	0x200008c0
 800fdb8:	e000ed04 	.word	0xe000ed04

0800fdbc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b08a      	sub	sp, #40	; 0x28
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	603b      	str	r3, [r7, #0]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d10a      	bne.n	800fdec <xTaskGenericNotify+0x30>
	__asm volatile
 800fdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdda:	f383 8811 	msr	BASEPRI, r3
 800fdde:	f3bf 8f6f 	isb	sy
 800fde2:	f3bf 8f4f 	dsb	sy
 800fde6:	61bb      	str	r3, [r7, #24]
}
 800fde8:	bf00      	nop
 800fdea:	e7fe      	b.n	800fdea <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800fdf0:	f000 fed0 	bl	8010b94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d004      	beq.n	800fe04 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fe04:	6a3b      	ldr	r3, [r7, #32]
 800fe06:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800fe0a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fe0c:	6a3b      	ldr	r3, [r7, #32]
 800fe0e:	2202      	movs	r2, #2
 800fe10:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800fe14:	79fb      	ldrb	r3, [r7, #7]
 800fe16:	2b04      	cmp	r3, #4
 800fe18:	d82d      	bhi.n	800fe76 <xTaskGenericNotify+0xba>
 800fe1a:	a201      	add	r2, pc, #4	; (adr r2, 800fe20 <xTaskGenericNotify+0x64>)
 800fe1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe20:	0800fe99 	.word	0x0800fe99
 800fe24:	0800fe35 	.word	0x0800fe35
 800fe28:	0800fe47 	.word	0x0800fe47
 800fe2c:	0800fe57 	.word	0x0800fe57
 800fe30:	0800fe61 	.word	0x0800fe61
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fe34:	6a3b      	ldr	r3, [r7, #32]
 800fe36:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	431a      	orrs	r2, r3
 800fe3e:	6a3b      	ldr	r3, [r7, #32]
 800fe40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fe44:	e02b      	b.n	800fe9e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fe46:	6a3b      	ldr	r3, [r7, #32]
 800fe48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fe4c:	1c5a      	adds	r2, r3, #1
 800fe4e:	6a3b      	ldr	r3, [r7, #32]
 800fe50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fe54:	e023      	b.n	800fe9e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fe56:	6a3b      	ldr	r3, [r7, #32]
 800fe58:	68ba      	ldr	r2, [r7, #8]
 800fe5a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fe5e:	e01e      	b.n	800fe9e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fe60:	7ffb      	ldrb	r3, [r7, #31]
 800fe62:	2b02      	cmp	r3, #2
 800fe64:	d004      	beq.n	800fe70 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	68ba      	ldr	r2, [r7, #8]
 800fe6a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fe6e:	e016      	b.n	800fe9e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800fe70:	2300      	movs	r3, #0
 800fe72:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800fe74:	e013      	b.n	800fe9e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fe76:	6a3b      	ldr	r3, [r7, #32]
 800fe78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fe7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe80:	d00c      	beq.n	800fe9c <xTaskGenericNotify+0xe0>
	__asm volatile
 800fe82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe86:	f383 8811 	msr	BASEPRI, r3
 800fe8a:	f3bf 8f6f 	isb	sy
 800fe8e:	f3bf 8f4f 	dsb	sy
 800fe92:	617b      	str	r3, [r7, #20]
}
 800fe94:	bf00      	nop
 800fe96:	e7fe      	b.n	800fe96 <xTaskGenericNotify+0xda>
					break;
 800fe98:	bf00      	nop
 800fe9a:	e000      	b.n	800fe9e <xTaskGenericNotify+0xe2>

					break;
 800fe9c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fe9e:	7ffb      	ldrb	r3, [r7, #31]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d13a      	bne.n	800ff1a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fea4:	6a3b      	ldr	r3, [r7, #32]
 800fea6:	3304      	adds	r3, #4
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7fe fa3f 	bl	800e32c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800feae:	6a3b      	ldr	r3, [r7, #32]
 800feb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb2:	4b1d      	ldr	r3, [pc, #116]	; (800ff28 <xTaskGenericNotify+0x16c>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d903      	bls.n	800fec2 <xTaskGenericNotify+0x106>
 800feba:	6a3b      	ldr	r3, [r7, #32]
 800febc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800febe:	4a1a      	ldr	r2, [pc, #104]	; (800ff28 <xTaskGenericNotify+0x16c>)
 800fec0:	6013      	str	r3, [r2, #0]
 800fec2:	6a3b      	ldr	r3, [r7, #32]
 800fec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec6:	4613      	mov	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	4413      	add	r3, r2
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	4a17      	ldr	r2, [pc, #92]	; (800ff2c <xTaskGenericNotify+0x170>)
 800fed0:	441a      	add	r2, r3
 800fed2:	6a3b      	ldr	r3, [r7, #32]
 800fed4:	3304      	adds	r3, #4
 800fed6:	4619      	mov	r1, r3
 800fed8:	4610      	mov	r0, r2
 800feda:	f7fe f9ca 	bl	800e272 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fede:	6a3b      	ldr	r3, [r7, #32]
 800fee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00a      	beq.n	800fefc <xTaskGenericNotify+0x140>
	__asm volatile
 800fee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feea:	f383 8811 	msr	BASEPRI, r3
 800feee:	f3bf 8f6f 	isb	sy
 800fef2:	f3bf 8f4f 	dsb	sy
 800fef6:	613b      	str	r3, [r7, #16]
}
 800fef8:	bf00      	nop
 800fefa:	e7fe      	b.n	800fefa <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fefc:	6a3b      	ldr	r3, [r7, #32]
 800fefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff00:	4b0b      	ldr	r3, [pc, #44]	; (800ff30 <xTaskGenericNotify+0x174>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d907      	bls.n	800ff1a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ff0a:	4b0a      	ldr	r3, [pc, #40]	; (800ff34 <xTaskGenericNotify+0x178>)
 800ff0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff10:	601a      	str	r2, [r3, #0]
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ff1a:	f000 fe6b 	bl	8010bf4 <vPortExitCritical>

		return xReturn;
 800ff1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3728      	adds	r7, #40	; 0x28
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20000d9c 	.word	0x20000d9c
 800ff2c:	200008c4 	.word	0x200008c4
 800ff30:	200008c0 	.word	0x200008c0
 800ff34:	e000ed04 	.word	0xe000ed04

0800ff38 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b08e      	sub	sp, #56	; 0x38
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	603b      	str	r3, [r7, #0]
 800ff44:	4613      	mov	r3, r2
 800ff46:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d10a      	bne.n	800ff68 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ff52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff56:	f383 8811 	msr	BASEPRI, r3
 800ff5a:	f3bf 8f6f 	isb	sy
 800ff5e:	f3bf 8f4f 	dsb	sy
 800ff62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ff64:	bf00      	nop
 800ff66:	e7fe      	b.n	800ff66 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff68:	f000 fef6 	bl	8010d58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ff70:	f3ef 8211 	mrs	r2, BASEPRI
 800ff74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff78:	f383 8811 	msr	BASEPRI, r3
 800ff7c:	f3bf 8f6f 	isb	sy
 800ff80:	f3bf 8f4f 	dsb	sy
 800ff84:	623a      	str	r2, [r7, #32]
 800ff86:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ff88:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d004      	beq.n	800ff9c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ff92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff94:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ffa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ffa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa8:	2202      	movs	r2, #2
 800ffaa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800ffae:	79fb      	ldrb	r3, [r7, #7]
 800ffb0:	2b04      	cmp	r3, #4
 800ffb2:	d82f      	bhi.n	8010014 <xTaskGenericNotifyFromISR+0xdc>
 800ffb4:	a201      	add	r2, pc, #4	; (adr r2, 800ffbc <xTaskGenericNotifyFromISR+0x84>)
 800ffb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffba:	bf00      	nop
 800ffbc:	08010037 	.word	0x08010037
 800ffc0:	0800ffd1 	.word	0x0800ffd1
 800ffc4:	0800ffe3 	.word	0x0800ffe3
 800ffc8:	0800fff3 	.word	0x0800fff3
 800ffcc:	0800fffd 	.word	0x0800fffd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ffd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	431a      	orrs	r2, r3
 800ffda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffdc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800ffe0:	e02c      	b.n	801003c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ffe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ffe8:	1c5a      	adds	r2, r3, #1
 800ffea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fff0:	e024      	b.n	801003c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800fffa:	e01f      	b.n	801003c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010000:	2b02      	cmp	r3, #2
 8010002:	d004      	beq.n	801000e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801000c:	e016      	b.n	801003c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 801000e:	2300      	movs	r3, #0
 8010010:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8010012:	e013      	b.n	801003c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8010014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010016:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801001a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801001e:	d00c      	beq.n	801003a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8010020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	61bb      	str	r3, [r7, #24]
}
 8010032:	bf00      	nop
 8010034:	e7fe      	b.n	8010034 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8010036:	bf00      	nop
 8010038:	e000      	b.n	801003c <xTaskGenericNotifyFromISR+0x104>
					break;
 801003a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801003c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010040:	2b01      	cmp	r3, #1
 8010042:	d146      	bne.n	80100d2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00a      	beq.n	8010062 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 801004c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010050:	f383 8811 	msr	BASEPRI, r3
 8010054:	f3bf 8f6f 	isb	sy
 8010058:	f3bf 8f4f 	dsb	sy
 801005c:	617b      	str	r3, [r7, #20]
}
 801005e:	bf00      	nop
 8010060:	e7fe      	b.n	8010060 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010062:	4b21      	ldr	r3, [pc, #132]	; (80100e8 <xTaskGenericNotifyFromISR+0x1b0>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d11d      	bne.n	80100a6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801006a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006c:	3304      	adds	r3, #4
 801006e:	4618      	mov	r0, r3
 8010070:	f7fe f95c 	bl	800e32c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010078:	4b1c      	ldr	r3, [pc, #112]	; (80100ec <xTaskGenericNotifyFromISR+0x1b4>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	429a      	cmp	r2, r3
 801007e:	d903      	bls.n	8010088 <xTaskGenericNotifyFromISR+0x150>
 8010080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010084:	4a19      	ldr	r2, [pc, #100]	; (80100ec <xTaskGenericNotifyFromISR+0x1b4>)
 8010086:	6013      	str	r3, [r2, #0]
 8010088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801008c:	4613      	mov	r3, r2
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	4413      	add	r3, r2
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	4a16      	ldr	r2, [pc, #88]	; (80100f0 <xTaskGenericNotifyFromISR+0x1b8>)
 8010096:	441a      	add	r2, r3
 8010098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009a:	3304      	adds	r3, #4
 801009c:	4619      	mov	r1, r3
 801009e:	4610      	mov	r0, r2
 80100a0:	f7fe f8e7 	bl	800e272 <vListInsertEnd>
 80100a4:	e005      	b.n	80100b2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80100a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a8:	3318      	adds	r3, #24
 80100aa:	4619      	mov	r1, r3
 80100ac:	4811      	ldr	r0, [pc, #68]	; (80100f4 <xTaskGenericNotifyFromISR+0x1bc>)
 80100ae:	f7fe f8e0 	bl	800e272 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80100b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b6:	4b10      	ldr	r3, [pc, #64]	; (80100f8 <xTaskGenericNotifyFromISR+0x1c0>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100bc:	429a      	cmp	r2, r3
 80100be:	d908      	bls.n	80100d2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80100c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d002      	beq.n	80100cc <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80100c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c8:	2201      	movs	r2, #1
 80100ca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80100cc:	4b0b      	ldr	r3, [pc, #44]	; (80100fc <xTaskGenericNotifyFromISR+0x1c4>)
 80100ce:	2201      	movs	r2, #1
 80100d0:	601a      	str	r2, [r3, #0]
 80100d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	f383 8811 	msr	BASEPRI, r3
}
 80100dc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80100de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3738      	adds	r7, #56	; 0x38
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	20000dbc 	.word	0x20000dbc
 80100ec:	20000d9c 	.word	0x20000d9c
 80100f0:	200008c4 	.word	0x200008c4
 80100f4:	20000d54 	.word	0x20000d54
 80100f8:	200008c0 	.word	0x200008c0
 80100fc:	20000da8 	.word	0x20000da8

08010100 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801010a:	4b21      	ldr	r3, [pc, #132]	; (8010190 <prvAddCurrentTaskToDelayedList+0x90>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010110:	4b20      	ldr	r3, [pc, #128]	; (8010194 <prvAddCurrentTaskToDelayedList+0x94>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	3304      	adds	r3, #4
 8010116:	4618      	mov	r0, r3
 8010118:	f7fe f908 	bl	800e32c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010122:	d10a      	bne.n	801013a <prvAddCurrentTaskToDelayedList+0x3a>
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d007      	beq.n	801013a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801012a:	4b1a      	ldr	r3, [pc, #104]	; (8010194 <prvAddCurrentTaskToDelayedList+0x94>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	3304      	adds	r3, #4
 8010130:	4619      	mov	r1, r3
 8010132:	4819      	ldr	r0, [pc, #100]	; (8010198 <prvAddCurrentTaskToDelayedList+0x98>)
 8010134:	f7fe f89d 	bl	800e272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010138:	e026      	b.n	8010188 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4413      	add	r3, r2
 8010140:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010142:	4b14      	ldr	r3, [pc, #80]	; (8010194 <prvAddCurrentTaskToDelayedList+0x94>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68ba      	ldr	r2, [r7, #8]
 8010148:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801014a:	68ba      	ldr	r2, [r7, #8]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	429a      	cmp	r2, r3
 8010150:	d209      	bcs.n	8010166 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010152:	4b12      	ldr	r3, [pc, #72]	; (801019c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	4b0f      	ldr	r3, [pc, #60]	; (8010194 <prvAddCurrentTaskToDelayedList+0x94>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3304      	adds	r3, #4
 801015c:	4619      	mov	r1, r3
 801015e:	4610      	mov	r0, r2
 8010160:	f7fe f8ab 	bl	800e2ba <vListInsert>
}
 8010164:	e010      	b.n	8010188 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010166:	4b0e      	ldr	r3, [pc, #56]	; (80101a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	4b0a      	ldr	r3, [pc, #40]	; (8010194 <prvAddCurrentTaskToDelayedList+0x94>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	3304      	adds	r3, #4
 8010170:	4619      	mov	r1, r3
 8010172:	4610      	mov	r0, r2
 8010174:	f7fe f8a1 	bl	800e2ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010178:	4b0a      	ldr	r3, [pc, #40]	; (80101a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	68ba      	ldr	r2, [r7, #8]
 801017e:	429a      	cmp	r2, r3
 8010180:	d202      	bcs.n	8010188 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010182:	4a08      	ldr	r2, [pc, #32]	; (80101a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	6013      	str	r3, [r2, #0]
}
 8010188:	bf00      	nop
 801018a:	3710      	adds	r7, #16
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	20000d98 	.word	0x20000d98
 8010194:	200008c0 	.word	0x200008c0
 8010198:	20000d80 	.word	0x20000d80
 801019c:	20000d50 	.word	0x20000d50
 80101a0:	20000d4c 	.word	0x20000d4c
 80101a4:	20000db4 	.word	0x20000db4

080101a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b08a      	sub	sp, #40	; 0x28
 80101ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80101ae:	2300      	movs	r3, #0
 80101b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80101b2:	f000 fb63 	bl	801087c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80101b6:	4b1c      	ldr	r3, [pc, #112]	; (8010228 <xTimerCreateTimerTask+0x80>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d021      	beq.n	8010202 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80101be:	2300      	movs	r3, #0
 80101c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80101c2:	2300      	movs	r3, #0
 80101c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80101c6:	1d3a      	adds	r2, r7, #4
 80101c8:	f107 0108 	add.w	r1, r7, #8
 80101cc:	f107 030c 	add.w	r3, r7, #12
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe f807 	bl	800e1e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80101d6:	6879      	ldr	r1, [r7, #4]
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	9202      	str	r2, [sp, #8]
 80101de:	9301      	str	r3, [sp, #4]
 80101e0:	2302      	movs	r3, #2
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	2300      	movs	r3, #0
 80101e6:	460a      	mov	r2, r1
 80101e8:	4910      	ldr	r1, [pc, #64]	; (801022c <xTimerCreateTimerTask+0x84>)
 80101ea:	4811      	ldr	r0, [pc, #68]	; (8010230 <xTimerCreateTimerTask+0x88>)
 80101ec:	f7fe feb2 	bl	800ef54 <xTaskCreateStatic>
 80101f0:	4603      	mov	r3, r0
 80101f2:	4a10      	ldr	r2, [pc, #64]	; (8010234 <xTimerCreateTimerTask+0x8c>)
 80101f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80101f6:	4b0f      	ldr	r3, [pc, #60]	; (8010234 <xTimerCreateTimerTask+0x8c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d001      	beq.n	8010202 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80101fe:	2301      	movs	r3, #1
 8010200:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10a      	bne.n	801021e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020c:	f383 8811 	msr	BASEPRI, r3
 8010210:	f3bf 8f6f 	isb	sy
 8010214:	f3bf 8f4f 	dsb	sy
 8010218:	613b      	str	r3, [r7, #16]
}
 801021a:	bf00      	nop
 801021c:	e7fe      	b.n	801021c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801021e:	697b      	ldr	r3, [r7, #20]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3718      	adds	r7, #24
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	20000df0 	.word	0x20000df0
 801022c:	080126c8 	.word	0x080126c8
 8010230:	08010425 	.word	0x08010425
 8010234:	20000df4 	.word	0x20000df4

08010238 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010238:	b580      	push	{r7, lr}
 801023a:	b088      	sub	sp, #32
 801023c:	af02      	add	r7, sp, #8
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	607a      	str	r2, [r7, #4]
 8010244:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010246:	202c      	movs	r0, #44	; 0x2c
 8010248:	f000 fdc6 	bl	8010dd8 <pvPortMalloc>
 801024c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00d      	beq.n	8010270 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	2200      	movs	r2, #0
 8010258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	6a3b      	ldr	r3, [r7, #32]
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	68b9      	ldr	r1, [r7, #8]
 801026a:	68f8      	ldr	r0, [r7, #12]
 801026c:	f000 f805 	bl	801027a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010270:	697b      	ldr	r3, [r7, #20]
	}
 8010272:	4618      	mov	r0, r3
 8010274:	3718      	adds	r7, #24
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b086      	sub	sp, #24
 801027e:	af00      	add	r7, sp, #0
 8010280:	60f8      	str	r0, [r7, #12]
 8010282:	60b9      	str	r1, [r7, #8]
 8010284:	607a      	str	r2, [r7, #4]
 8010286:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d10a      	bne.n	80102a4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	617b      	str	r3, [r7, #20]
}
 80102a0:	bf00      	nop
 80102a2:	e7fe      	b.n	80102a2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80102a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d01e      	beq.n	80102e8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80102aa:	f000 fae7 	bl	801087c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80102b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80102ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102bc:	683a      	ldr	r2, [r7, #0]
 80102be:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80102c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c2:	6a3a      	ldr	r2, [r7, #32]
 80102c4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80102c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c8:	3304      	adds	r3, #4
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fd ffc4 	bl	800e258 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d008      	beq.n	80102e8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80102d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102dc:	f043 0304 	orr.w	r3, r3, #4
 80102e0:	b2da      	uxtb	r2, r3
 80102e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80102e8:	bf00      	nop
 80102ea:	3718      	adds	r7, #24
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b08a      	sub	sp, #40	; 0x28
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	607a      	str	r2, [r7, #4]
 80102fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80102fe:	2300      	movs	r3, #0
 8010300:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d10a      	bne.n	801031e <xTimerGenericCommand+0x2e>
	__asm volatile
 8010308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030c:	f383 8811 	msr	BASEPRI, r3
 8010310:	f3bf 8f6f 	isb	sy
 8010314:	f3bf 8f4f 	dsb	sy
 8010318:	623b      	str	r3, [r7, #32]
}
 801031a:	bf00      	nop
 801031c:	e7fe      	b.n	801031c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801031e:	4b1a      	ldr	r3, [pc, #104]	; (8010388 <xTimerGenericCommand+0x98>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d02a      	beq.n	801037c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	2b05      	cmp	r3, #5
 8010336:	dc18      	bgt.n	801036a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010338:	f7ff fc54 	bl	800fbe4 <xTaskGetSchedulerState>
 801033c:	4603      	mov	r3, r0
 801033e:	2b02      	cmp	r3, #2
 8010340:	d109      	bne.n	8010356 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010342:	4b11      	ldr	r3, [pc, #68]	; (8010388 <xTimerGenericCommand+0x98>)
 8010344:	6818      	ldr	r0, [r3, #0]
 8010346:	f107 0110 	add.w	r1, r7, #16
 801034a:	2300      	movs	r3, #0
 801034c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801034e:	f7fe f955 	bl	800e5fc <xQueueGenericSend>
 8010352:	6278      	str	r0, [r7, #36]	; 0x24
 8010354:	e012      	b.n	801037c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010356:	4b0c      	ldr	r3, [pc, #48]	; (8010388 <xTimerGenericCommand+0x98>)
 8010358:	6818      	ldr	r0, [r3, #0]
 801035a:	f107 0110 	add.w	r1, r7, #16
 801035e:	2300      	movs	r3, #0
 8010360:	2200      	movs	r2, #0
 8010362:	f7fe f94b 	bl	800e5fc <xQueueGenericSend>
 8010366:	6278      	str	r0, [r7, #36]	; 0x24
 8010368:	e008      	b.n	801037c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801036a:	4b07      	ldr	r3, [pc, #28]	; (8010388 <xTimerGenericCommand+0x98>)
 801036c:	6818      	ldr	r0, [r3, #0]
 801036e:	f107 0110 	add.w	r1, r7, #16
 8010372:	2300      	movs	r3, #0
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	f7fe fa3f 	bl	800e7f8 <xQueueGenericSendFromISR>
 801037a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801037e:	4618      	mov	r0, r3
 8010380:	3728      	adds	r7, #40	; 0x28
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	20000df0 	.word	0x20000df0

0801038c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b088      	sub	sp, #32
 8010390:	af02      	add	r7, sp, #8
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010396:	4b22      	ldr	r3, [pc, #136]	; (8010420 <prvProcessExpiredTimer+0x94>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	68db      	ldr	r3, [r3, #12]
 801039e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	3304      	adds	r3, #4
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fd ffc1 	bl	800e32c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103b0:	f003 0304 	and.w	r3, r3, #4
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d022      	beq.n	80103fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	699a      	ldr	r2, [r3, #24]
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	18d1      	adds	r1, r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	6978      	ldr	r0, [r7, #20]
 80103c6:	f000 f8d1 	bl	801056c <prvInsertTimerInActiveList>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d01f      	beq.n	8010410 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103d0:	2300      	movs	r3, #0
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	2300      	movs	r3, #0
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	2100      	movs	r1, #0
 80103da:	6978      	ldr	r0, [r7, #20]
 80103dc:	f7ff ff88 	bl	80102f0 <xTimerGenericCommand>
 80103e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d113      	bne.n	8010410 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80103e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ec:	f383 8811 	msr	BASEPRI, r3
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	f3bf 8f4f 	dsb	sy
 80103f8:	60fb      	str	r3, [r7, #12]
}
 80103fa:	bf00      	nop
 80103fc:	e7fe      	b.n	80103fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010404:	f023 0301 	bic.w	r3, r3, #1
 8010408:	b2da      	uxtb	r2, r3
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	6a1b      	ldr	r3, [r3, #32]
 8010414:	6978      	ldr	r0, [r7, #20]
 8010416:	4798      	blx	r3
}
 8010418:	bf00      	nop
 801041a:	3718      	adds	r7, #24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	20000de8 	.word	0x20000de8

08010424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801042c:	f107 0308 	add.w	r3, r7, #8
 8010430:	4618      	mov	r0, r3
 8010432:	f000 f857 	bl	80104e4 <prvGetNextExpireTime>
 8010436:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	4619      	mov	r1, r3
 801043c:	68f8      	ldr	r0, [r7, #12]
 801043e:	f000 f803 	bl	8010448 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010442:	f000 f8d5 	bl	80105f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010446:	e7f1      	b.n	801042c <prvTimerTask+0x8>

08010448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010452:	f7fe ffdb 	bl	800f40c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010456:	f107 0308 	add.w	r3, r7, #8
 801045a:	4618      	mov	r0, r3
 801045c:	f000 f866 	bl	801052c <prvSampleTimeNow>
 8010460:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d130      	bne.n	80104ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d10a      	bne.n	8010484 <prvProcessTimerOrBlockTask+0x3c>
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	429a      	cmp	r2, r3
 8010474:	d806      	bhi.n	8010484 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010476:	f7fe ffd7 	bl	800f428 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801047a:	68f9      	ldr	r1, [r7, #12]
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff ff85 	bl	801038c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010482:	e024      	b.n	80104ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d008      	beq.n	801049c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801048a:	4b13      	ldr	r3, [pc, #76]	; (80104d8 <prvProcessTimerOrBlockTask+0x90>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <prvProcessTimerOrBlockTask+0x50>
 8010494:	2301      	movs	r3, #1
 8010496:	e000      	b.n	801049a <prvProcessTimerOrBlockTask+0x52>
 8010498:	2300      	movs	r3, #0
 801049a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801049c:	4b0f      	ldr	r3, [pc, #60]	; (80104dc <prvProcessTimerOrBlockTask+0x94>)
 801049e:	6818      	ldr	r0, [r3, #0]
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	683a      	ldr	r2, [r7, #0]
 80104a8:	4619      	mov	r1, r3
 80104aa:	f7fe fd1f 	bl	800eeec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80104ae:	f7fe ffbb 	bl	800f428 <xTaskResumeAll>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d10a      	bne.n	80104ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80104b8:	4b09      	ldr	r3, [pc, #36]	; (80104e0 <prvProcessTimerOrBlockTask+0x98>)
 80104ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104be:	601a      	str	r2, [r3, #0]
 80104c0:	f3bf 8f4f 	dsb	sy
 80104c4:	f3bf 8f6f 	isb	sy
}
 80104c8:	e001      	b.n	80104ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80104ca:	f7fe ffad 	bl	800f428 <xTaskResumeAll>
}
 80104ce:	bf00      	nop
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	20000dec 	.word	0x20000dec
 80104dc:	20000df0 	.word	0x20000df0
 80104e0:	e000ed04 	.word	0xe000ed04

080104e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104ec:	4b0e      	ldr	r3, [pc, #56]	; (8010528 <prvGetNextExpireTime+0x44>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d101      	bne.n	80104fa <prvGetNextExpireTime+0x16>
 80104f6:	2201      	movs	r2, #1
 80104f8:	e000      	b.n	80104fc <prvGetNextExpireTime+0x18>
 80104fa:	2200      	movs	r2, #0
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d105      	bne.n	8010514 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010508:	4b07      	ldr	r3, [pc, #28]	; (8010528 <prvGetNextExpireTime+0x44>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	60fb      	str	r3, [r7, #12]
 8010512:	e001      	b.n	8010518 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010514:	2300      	movs	r3, #0
 8010516:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010518:	68fb      	ldr	r3, [r7, #12]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3714      	adds	r7, #20
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
 8010526:	bf00      	nop
 8010528:	20000de8 	.word	0x20000de8

0801052c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010534:	f7ff f816 	bl	800f564 <xTaskGetTickCount>
 8010538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801053a:	4b0b      	ldr	r3, [pc, #44]	; (8010568 <prvSampleTimeNow+0x3c>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	68fa      	ldr	r2, [r7, #12]
 8010540:	429a      	cmp	r2, r3
 8010542:	d205      	bcs.n	8010550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010544:	f000 f936 	bl	80107b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	601a      	str	r2, [r3, #0]
 801054e:	e002      	b.n	8010556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2200      	movs	r2, #0
 8010554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010556:	4a04      	ldr	r2, [pc, #16]	; (8010568 <prvSampleTimeNow+0x3c>)
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801055c:	68fb      	ldr	r3, [r7, #12]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	20000df8 	.word	0x20000df8

0801056c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b086      	sub	sp, #24
 8010570:	af00      	add	r7, sp, #0
 8010572:	60f8      	str	r0, [r7, #12]
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	607a      	str	r2, [r7, #4]
 8010578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801057a:	2300      	movs	r3, #0
 801057c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	68ba      	ldr	r2, [r7, #8]
 8010582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	68fa      	ldr	r2, [r7, #12]
 8010588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	429a      	cmp	r2, r3
 8010590:	d812      	bhi.n	80105b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	1ad2      	subs	r2, r2, r3
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	699b      	ldr	r3, [r3, #24]
 801059c:	429a      	cmp	r2, r3
 801059e:	d302      	bcc.n	80105a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80105a0:	2301      	movs	r3, #1
 80105a2:	617b      	str	r3, [r7, #20]
 80105a4:	e01b      	b.n	80105de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80105a6:	4b10      	ldr	r3, [pc, #64]	; (80105e8 <prvInsertTimerInActiveList+0x7c>)
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	3304      	adds	r3, #4
 80105ae:	4619      	mov	r1, r3
 80105b0:	4610      	mov	r0, r2
 80105b2:	f7fd fe82 	bl	800e2ba <vListInsert>
 80105b6:	e012      	b.n	80105de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d206      	bcs.n	80105ce <prvInsertTimerInActiveList+0x62>
 80105c0:	68ba      	ldr	r2, [r7, #8]
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d302      	bcc.n	80105ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80105c8:	2301      	movs	r3, #1
 80105ca:	617b      	str	r3, [r7, #20]
 80105cc:	e007      	b.n	80105de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105ce:	4b07      	ldr	r3, [pc, #28]	; (80105ec <prvInsertTimerInActiveList+0x80>)
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	3304      	adds	r3, #4
 80105d6:	4619      	mov	r1, r3
 80105d8:	4610      	mov	r0, r2
 80105da:	f7fd fe6e 	bl	800e2ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80105de:	697b      	ldr	r3, [r7, #20]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3718      	adds	r7, #24
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	20000dec 	.word	0x20000dec
 80105ec:	20000de8 	.word	0x20000de8

080105f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b08e      	sub	sp, #56	; 0x38
 80105f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80105f6:	e0ca      	b.n	801078e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	da18      	bge.n	8010630 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80105fe:	1d3b      	adds	r3, r7, #4
 8010600:	3304      	adds	r3, #4
 8010602:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010606:	2b00      	cmp	r3, #0
 8010608:	d10a      	bne.n	8010620 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060e:	f383 8811 	msr	BASEPRI, r3
 8010612:	f3bf 8f6f 	isb	sy
 8010616:	f3bf 8f4f 	dsb	sy
 801061a:	61fb      	str	r3, [r7, #28]
}
 801061c:	bf00      	nop
 801061e:	e7fe      	b.n	801061e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010626:	6850      	ldr	r0, [r2, #4]
 8010628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801062a:	6892      	ldr	r2, [r2, #8]
 801062c:	4611      	mov	r1, r2
 801062e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	f2c0 80aa 	blt.w	801078c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063e:	695b      	ldr	r3, [r3, #20]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d004      	beq.n	801064e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010646:	3304      	adds	r3, #4
 8010648:	4618      	mov	r0, r3
 801064a:	f7fd fe6f 	bl	800e32c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801064e:	463b      	mov	r3, r7
 8010650:	4618      	mov	r0, r3
 8010652:	f7ff ff6b 	bl	801052c <prvSampleTimeNow>
 8010656:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b09      	cmp	r3, #9
 801065c:	f200 8097 	bhi.w	801078e <prvProcessReceivedCommands+0x19e>
 8010660:	a201      	add	r2, pc, #4	; (adr r2, 8010668 <prvProcessReceivedCommands+0x78>)
 8010662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010666:	bf00      	nop
 8010668:	08010691 	.word	0x08010691
 801066c:	08010691 	.word	0x08010691
 8010670:	08010691 	.word	0x08010691
 8010674:	08010705 	.word	0x08010705
 8010678:	08010719 	.word	0x08010719
 801067c:	08010763 	.word	0x08010763
 8010680:	08010691 	.word	0x08010691
 8010684:	08010691 	.word	0x08010691
 8010688:	08010705 	.word	0x08010705
 801068c:	08010719 	.word	0x08010719
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010696:	f043 0301 	orr.w	r3, r3, #1
 801069a:	b2da      	uxtb	r2, r3
 801069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80106a2:	68ba      	ldr	r2, [r7, #8]
 80106a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a6:	699b      	ldr	r3, [r3, #24]
 80106a8:	18d1      	adds	r1, r2, r3
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106b0:	f7ff ff5c 	bl	801056c <prvInsertTimerInActiveList>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d069      	beq.n	801078e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106bc:	6a1b      	ldr	r3, [r3, #32]
 80106be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106c8:	f003 0304 	and.w	r3, r3, #4
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d05e      	beq.n	801078e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80106d0:	68ba      	ldr	r2, [r7, #8]
 80106d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	441a      	add	r2, r3
 80106d8:	2300      	movs	r3, #0
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	2300      	movs	r3, #0
 80106de:	2100      	movs	r1, #0
 80106e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106e2:	f7ff fe05 	bl	80102f0 <xTimerGenericCommand>
 80106e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80106e8:	6a3b      	ldr	r3, [r7, #32]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d14f      	bne.n	801078e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80106ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	61bb      	str	r3, [r7, #24]
}
 8010700:	bf00      	nop
 8010702:	e7fe      	b.n	8010702 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801070a:	f023 0301 	bic.w	r3, r3, #1
 801070e:	b2da      	uxtb	r2, r3
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010716:	e03a      	b.n	801078e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801071e:	f043 0301 	orr.w	r3, r3, #1
 8010722:	b2da      	uxtb	r2, r3
 8010724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010732:	699b      	ldr	r3, [r3, #24]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d10a      	bne.n	801074e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073c:	f383 8811 	msr	BASEPRI, r3
 8010740:	f3bf 8f6f 	isb	sy
 8010744:	f3bf 8f4f 	dsb	sy
 8010748:	617b      	str	r3, [r7, #20]
}
 801074a:	bf00      	nop
 801074c:	e7fe      	b.n	801074c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010750:	699a      	ldr	r2, [r3, #24]
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	18d1      	adds	r1, r2, r3
 8010756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801075a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801075c:	f7ff ff06 	bl	801056c <prvInsertTimerInActiveList>
					break;
 8010760:	e015      	b.n	801078e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010768:	f003 0302 	and.w	r3, r3, #2
 801076c:	2b00      	cmp	r3, #0
 801076e:	d103      	bne.n	8010778 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010772:	f000 fbfd 	bl	8010f70 <vPortFree>
 8010776:	e00a      	b.n	801078e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801077e:	f023 0301 	bic.w	r3, r3, #1
 8010782:	b2da      	uxtb	r2, r3
 8010784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801078a:	e000      	b.n	801078e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801078c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801078e:	4b08      	ldr	r3, [pc, #32]	; (80107b0 <prvProcessReceivedCommands+0x1c0>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	1d39      	adds	r1, r7, #4
 8010794:	2200      	movs	r2, #0
 8010796:	4618      	mov	r0, r3
 8010798:	f7fe f8ca 	bl	800e930 <xQueueReceive>
 801079c:	4603      	mov	r3, r0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f47f af2a 	bne.w	80105f8 <prvProcessReceivedCommands+0x8>
	}
}
 80107a4:	bf00      	nop
 80107a6:	bf00      	nop
 80107a8:	3730      	adds	r7, #48	; 0x30
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	20000df0 	.word	0x20000df0

080107b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b088      	sub	sp, #32
 80107b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80107ba:	e048      	b.n	801084e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80107bc:	4b2d      	ldr	r3, [pc, #180]	; (8010874 <prvSwitchTimerLists+0xc0>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107c6:	4b2b      	ldr	r3, [pc, #172]	; (8010874 <prvSwitchTimerLists+0xc0>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	3304      	adds	r3, #4
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7fd fda9 	bl	800e32c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6a1b      	ldr	r3, [r3, #32]
 80107de:	68f8      	ldr	r0, [r7, #12]
 80107e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107e8:	f003 0304 	and.w	r3, r3, #4
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d02e      	beq.n	801084e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	699b      	ldr	r3, [r3, #24]
 80107f4:	693a      	ldr	r2, [r7, #16]
 80107f6:	4413      	add	r3, r2
 80107f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80107fa:	68ba      	ldr	r2, [r7, #8]
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d90e      	bls.n	8010820 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	68ba      	ldr	r2, [r7, #8]
 8010806:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	68fa      	ldr	r2, [r7, #12]
 801080c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801080e:	4b19      	ldr	r3, [pc, #100]	; (8010874 <prvSwitchTimerLists+0xc0>)
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	3304      	adds	r3, #4
 8010816:	4619      	mov	r1, r3
 8010818:	4610      	mov	r0, r2
 801081a:	f7fd fd4e 	bl	800e2ba <vListInsert>
 801081e:	e016      	b.n	801084e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010820:	2300      	movs	r3, #0
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	2300      	movs	r3, #0
 8010826:	693a      	ldr	r2, [r7, #16]
 8010828:	2100      	movs	r1, #0
 801082a:	68f8      	ldr	r0, [r7, #12]
 801082c:	f7ff fd60 	bl	80102f0 <xTimerGenericCommand>
 8010830:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d10a      	bne.n	801084e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801083c:	f383 8811 	msr	BASEPRI, r3
 8010840:	f3bf 8f6f 	isb	sy
 8010844:	f3bf 8f4f 	dsb	sy
 8010848:	603b      	str	r3, [r7, #0]
}
 801084a:	bf00      	nop
 801084c:	e7fe      	b.n	801084c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801084e:	4b09      	ldr	r3, [pc, #36]	; (8010874 <prvSwitchTimerLists+0xc0>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1b1      	bne.n	80107bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010858:	4b06      	ldr	r3, [pc, #24]	; (8010874 <prvSwitchTimerLists+0xc0>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801085e:	4b06      	ldr	r3, [pc, #24]	; (8010878 <prvSwitchTimerLists+0xc4>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	4a04      	ldr	r2, [pc, #16]	; (8010874 <prvSwitchTimerLists+0xc0>)
 8010864:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010866:	4a04      	ldr	r2, [pc, #16]	; (8010878 <prvSwitchTimerLists+0xc4>)
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	6013      	str	r3, [r2, #0]
}
 801086c:	bf00      	nop
 801086e:	3718      	adds	r7, #24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	20000de8 	.word	0x20000de8
 8010878:	20000dec 	.word	0x20000dec

0801087c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010882:	f000 f987 	bl	8010b94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010886:	4b15      	ldr	r3, [pc, #84]	; (80108dc <prvCheckForValidListAndQueue+0x60>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d120      	bne.n	80108d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801088e:	4814      	ldr	r0, [pc, #80]	; (80108e0 <prvCheckForValidListAndQueue+0x64>)
 8010890:	f7fd fcc2 	bl	800e218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010894:	4813      	ldr	r0, [pc, #76]	; (80108e4 <prvCheckForValidListAndQueue+0x68>)
 8010896:	f7fd fcbf 	bl	800e218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801089a:	4b13      	ldr	r3, [pc, #76]	; (80108e8 <prvCheckForValidListAndQueue+0x6c>)
 801089c:	4a10      	ldr	r2, [pc, #64]	; (80108e0 <prvCheckForValidListAndQueue+0x64>)
 801089e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80108a0:	4b12      	ldr	r3, [pc, #72]	; (80108ec <prvCheckForValidListAndQueue+0x70>)
 80108a2:	4a10      	ldr	r2, [pc, #64]	; (80108e4 <prvCheckForValidListAndQueue+0x68>)
 80108a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80108a6:	2300      	movs	r3, #0
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	4b11      	ldr	r3, [pc, #68]	; (80108f0 <prvCheckForValidListAndQueue+0x74>)
 80108ac:	4a11      	ldr	r2, [pc, #68]	; (80108f4 <prvCheckForValidListAndQueue+0x78>)
 80108ae:	2110      	movs	r1, #16
 80108b0:	200a      	movs	r0, #10
 80108b2:	f7fd fdcd 	bl	800e450 <xQueueGenericCreateStatic>
 80108b6:	4603      	mov	r3, r0
 80108b8:	4a08      	ldr	r2, [pc, #32]	; (80108dc <prvCheckForValidListAndQueue+0x60>)
 80108ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80108bc:	4b07      	ldr	r3, [pc, #28]	; (80108dc <prvCheckForValidListAndQueue+0x60>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d005      	beq.n	80108d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80108c4:	4b05      	ldr	r3, [pc, #20]	; (80108dc <prvCheckForValidListAndQueue+0x60>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	490b      	ldr	r1, [pc, #44]	; (80108f8 <prvCheckForValidListAndQueue+0x7c>)
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fe fae4 	bl	800ee98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80108d0:	f000 f990 	bl	8010bf4 <vPortExitCritical>
}
 80108d4:	bf00      	nop
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	20000df0 	.word	0x20000df0
 80108e0:	20000dc0 	.word	0x20000dc0
 80108e4:	20000dd4 	.word	0x20000dd4
 80108e8:	20000de8 	.word	0x20000de8
 80108ec:	20000dec 	.word	0x20000dec
 80108f0:	20000e9c 	.word	0x20000e9c
 80108f4:	20000dfc 	.word	0x20000dfc
 80108f8:	080126d0 	.word	0x080126d0

080108fc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b086      	sub	sp, #24
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d10a      	bne.n	8010924 <pvTimerGetTimerID+0x28>
	__asm volatile
 801090e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010912:	f383 8811 	msr	BASEPRI, r3
 8010916:	f3bf 8f6f 	isb	sy
 801091a:	f3bf 8f4f 	dsb	sy
 801091e:	60fb      	str	r3, [r7, #12]
}
 8010920:	bf00      	nop
 8010922:	e7fe      	b.n	8010922 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8010924:	f000 f936 	bl	8010b94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	69db      	ldr	r3, [r3, #28]
 801092c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801092e:	f000 f961 	bl	8010bf4 <vPortExitCritical>

	return pvReturn;
 8010932:	693b      	ldr	r3, [r7, #16]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3718      	adds	r7, #24
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801093c:	b480      	push	{r7}
 801093e:	b085      	sub	sp, #20
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	3b04      	subs	r3, #4
 801094c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	3b04      	subs	r3, #4
 801095a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	f023 0201 	bic.w	r2, r3, #1
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	3b04      	subs	r3, #4
 801096a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801096c:	4a0c      	ldr	r2, [pc, #48]	; (80109a0 <pxPortInitialiseStack+0x64>)
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	3b14      	subs	r3, #20
 8010976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	3b04      	subs	r3, #4
 8010982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f06f 0202 	mvn.w	r2, #2
 801098a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	3b20      	subs	r3, #32
 8010990:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010992:	68fb      	ldr	r3, [r7, #12]
}
 8010994:	4618      	mov	r0, r3
 8010996:	3714      	adds	r7, #20
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr
 80109a0:	080109a5 	.word	0x080109a5

080109a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80109ae:	4b12      	ldr	r3, [pc, #72]	; (80109f8 <prvTaskExitError+0x54>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109b6:	d00a      	beq.n	80109ce <prvTaskExitError+0x2a>
	__asm volatile
 80109b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	60fb      	str	r3, [r7, #12]
}
 80109ca:	bf00      	nop
 80109cc:	e7fe      	b.n	80109cc <prvTaskExitError+0x28>
	__asm volatile
 80109ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d2:	f383 8811 	msr	BASEPRI, r3
 80109d6:	f3bf 8f6f 	isb	sy
 80109da:	f3bf 8f4f 	dsb	sy
 80109de:	60bb      	str	r3, [r7, #8]
}
 80109e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80109e2:	bf00      	nop
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d0fc      	beq.n	80109e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80109ea:	bf00      	nop
 80109ec:	bf00      	nop
 80109ee:	3714      	adds	r7, #20
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr
 80109f8:	20000040 	.word	0x20000040
 80109fc:	00000000 	.word	0x00000000

08010a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a00:	4b07      	ldr	r3, [pc, #28]	; (8010a20 <pxCurrentTCBConst2>)
 8010a02:	6819      	ldr	r1, [r3, #0]
 8010a04:	6808      	ldr	r0, [r1, #0]
 8010a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0a:	f380 8809 	msr	PSP, r0
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f04f 0000 	mov.w	r0, #0
 8010a16:	f380 8811 	msr	BASEPRI, r0
 8010a1a:	4770      	bx	lr
 8010a1c:	f3af 8000 	nop.w

08010a20 <pxCurrentTCBConst2>:
 8010a20:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a24:	bf00      	nop
 8010a26:	bf00      	nop

08010a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a28:	4808      	ldr	r0, [pc, #32]	; (8010a4c <prvPortStartFirstTask+0x24>)
 8010a2a:	6800      	ldr	r0, [r0, #0]
 8010a2c:	6800      	ldr	r0, [r0, #0]
 8010a2e:	f380 8808 	msr	MSP, r0
 8010a32:	f04f 0000 	mov.w	r0, #0
 8010a36:	f380 8814 	msr	CONTROL, r0
 8010a3a:	b662      	cpsie	i
 8010a3c:	b661      	cpsie	f
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	f3bf 8f6f 	isb	sy
 8010a46:	df00      	svc	0
 8010a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a4a:	bf00      	nop
 8010a4c:	e000ed08 	.word	0xe000ed08

08010a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b086      	sub	sp, #24
 8010a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010a56:	4b46      	ldr	r3, [pc, #280]	; (8010b70 <xPortStartScheduler+0x120>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4a46      	ldr	r2, [pc, #280]	; (8010b74 <xPortStartScheduler+0x124>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d10a      	bne.n	8010a76 <xPortStartScheduler+0x26>
	__asm volatile
 8010a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a64:	f383 8811 	msr	BASEPRI, r3
 8010a68:	f3bf 8f6f 	isb	sy
 8010a6c:	f3bf 8f4f 	dsb	sy
 8010a70:	613b      	str	r3, [r7, #16]
}
 8010a72:	bf00      	nop
 8010a74:	e7fe      	b.n	8010a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010a76:	4b3e      	ldr	r3, [pc, #248]	; (8010b70 <xPortStartScheduler+0x120>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a3f      	ldr	r2, [pc, #252]	; (8010b78 <xPortStartScheduler+0x128>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d10a      	bne.n	8010a96 <xPortStartScheduler+0x46>
	__asm volatile
 8010a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a84:	f383 8811 	msr	BASEPRI, r3
 8010a88:	f3bf 8f6f 	isb	sy
 8010a8c:	f3bf 8f4f 	dsb	sy
 8010a90:	60fb      	str	r3, [r7, #12]
}
 8010a92:	bf00      	nop
 8010a94:	e7fe      	b.n	8010a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010a96:	4b39      	ldr	r3, [pc, #228]	; (8010b7c <xPortStartScheduler+0x12c>)
 8010a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	b2db      	uxtb	r3, r3
 8010aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	22ff      	movs	r2, #255	; 0xff
 8010aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ab0:	78fb      	ldrb	r3, [r7, #3]
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	4b31      	ldr	r3, [pc, #196]	; (8010b80 <xPortStartScheduler+0x130>)
 8010abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010abe:	4b31      	ldr	r3, [pc, #196]	; (8010b84 <xPortStartScheduler+0x134>)
 8010ac0:	2207      	movs	r2, #7
 8010ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ac4:	e009      	b.n	8010ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010ac6:	4b2f      	ldr	r3, [pc, #188]	; (8010b84 <xPortStartScheduler+0x134>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	3b01      	subs	r3, #1
 8010acc:	4a2d      	ldr	r2, [pc, #180]	; (8010b84 <xPortStartScheduler+0x134>)
 8010ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ad0:	78fb      	ldrb	r3, [r7, #3]
 8010ad2:	b2db      	uxtb	r3, r3
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ada:	78fb      	ldrb	r3, [r7, #3]
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ae2:	2b80      	cmp	r3, #128	; 0x80
 8010ae4:	d0ef      	beq.n	8010ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ae6:	4b27      	ldr	r3, [pc, #156]	; (8010b84 <xPortStartScheduler+0x134>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f1c3 0307 	rsb	r3, r3, #7
 8010aee:	2b04      	cmp	r3, #4
 8010af0:	d00a      	beq.n	8010b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8010af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af6:	f383 8811 	msr	BASEPRI, r3
 8010afa:	f3bf 8f6f 	isb	sy
 8010afe:	f3bf 8f4f 	dsb	sy
 8010b02:	60bb      	str	r3, [r7, #8]
}
 8010b04:	bf00      	nop
 8010b06:	e7fe      	b.n	8010b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b08:	4b1e      	ldr	r3, [pc, #120]	; (8010b84 <xPortStartScheduler+0x134>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	021b      	lsls	r3, r3, #8
 8010b0e:	4a1d      	ldr	r2, [pc, #116]	; (8010b84 <xPortStartScheduler+0x134>)
 8010b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b12:	4b1c      	ldr	r3, [pc, #112]	; (8010b84 <xPortStartScheduler+0x134>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010b1a:	4a1a      	ldr	r2, [pc, #104]	; (8010b84 <xPortStartScheduler+0x134>)
 8010b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	b2da      	uxtb	r2, r3
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b26:	4b18      	ldr	r3, [pc, #96]	; (8010b88 <xPortStartScheduler+0x138>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4a17      	ldr	r2, [pc, #92]	; (8010b88 <xPortStartScheduler+0x138>)
 8010b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b32:	4b15      	ldr	r3, [pc, #84]	; (8010b88 <xPortStartScheduler+0x138>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	4a14      	ldr	r2, [pc, #80]	; (8010b88 <xPortStartScheduler+0x138>)
 8010b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b3e:	f000 f8dd 	bl	8010cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b42:	4b12      	ldr	r3, [pc, #72]	; (8010b8c <xPortStartScheduler+0x13c>)
 8010b44:	2200      	movs	r2, #0
 8010b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b48:	f000 f8fc 	bl	8010d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b4c:	4b10      	ldr	r3, [pc, #64]	; (8010b90 <xPortStartScheduler+0x140>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a0f      	ldr	r2, [pc, #60]	; (8010b90 <xPortStartScheduler+0x140>)
 8010b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b58:	f7ff ff66 	bl	8010a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b5c:	f7fe fdcc 	bl	800f6f8 <vTaskSwitchContext>
	prvTaskExitError();
 8010b60:	f7ff ff20 	bl	80109a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b64:	2300      	movs	r3, #0
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3718      	adds	r7, #24
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	e000ed00 	.word	0xe000ed00
 8010b74:	410fc271 	.word	0x410fc271
 8010b78:	410fc270 	.word	0x410fc270
 8010b7c:	e000e400 	.word	0xe000e400
 8010b80:	20000eec 	.word	0x20000eec
 8010b84:	20000ef0 	.word	0x20000ef0
 8010b88:	e000ed20 	.word	0xe000ed20
 8010b8c:	20000040 	.word	0x20000040
 8010b90:	e000ef34 	.word	0xe000ef34

08010b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
	__asm volatile
 8010b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9e:	f383 8811 	msr	BASEPRI, r3
 8010ba2:	f3bf 8f6f 	isb	sy
 8010ba6:	f3bf 8f4f 	dsb	sy
 8010baa:	607b      	str	r3, [r7, #4]
}
 8010bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010bae:	4b0f      	ldr	r3, [pc, #60]	; (8010bec <vPortEnterCritical+0x58>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	4a0d      	ldr	r2, [pc, #52]	; (8010bec <vPortEnterCritical+0x58>)
 8010bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010bb8:	4b0c      	ldr	r3, [pc, #48]	; (8010bec <vPortEnterCritical+0x58>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d10f      	bne.n	8010be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010bc0:	4b0b      	ldr	r3, [pc, #44]	; (8010bf0 <vPortEnterCritical+0x5c>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d00a      	beq.n	8010be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bce:	f383 8811 	msr	BASEPRI, r3
 8010bd2:	f3bf 8f6f 	isb	sy
 8010bd6:	f3bf 8f4f 	dsb	sy
 8010bda:	603b      	str	r3, [r7, #0]
}
 8010bdc:	bf00      	nop
 8010bde:	e7fe      	b.n	8010bde <vPortEnterCritical+0x4a>
	}
}
 8010be0:	bf00      	nop
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr
 8010bec:	20000040 	.word	0x20000040
 8010bf0:	e000ed04 	.word	0xe000ed04

08010bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010bfa:	4b12      	ldr	r3, [pc, #72]	; (8010c44 <vPortExitCritical+0x50>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d10a      	bne.n	8010c18 <vPortExitCritical+0x24>
	__asm volatile
 8010c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c06:	f383 8811 	msr	BASEPRI, r3
 8010c0a:	f3bf 8f6f 	isb	sy
 8010c0e:	f3bf 8f4f 	dsb	sy
 8010c12:	607b      	str	r3, [r7, #4]
}
 8010c14:	bf00      	nop
 8010c16:	e7fe      	b.n	8010c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010c18:	4b0a      	ldr	r3, [pc, #40]	; (8010c44 <vPortExitCritical+0x50>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	4a09      	ldr	r2, [pc, #36]	; (8010c44 <vPortExitCritical+0x50>)
 8010c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c22:	4b08      	ldr	r3, [pc, #32]	; (8010c44 <vPortExitCritical+0x50>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d105      	bne.n	8010c36 <vPortExitCritical+0x42>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	f383 8811 	msr	BASEPRI, r3
}
 8010c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c36:	bf00      	nop
 8010c38:	370c      	adds	r7, #12
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop
 8010c44:	20000040 	.word	0x20000040
	...

08010c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c50:	f3ef 8009 	mrs	r0, PSP
 8010c54:	f3bf 8f6f 	isb	sy
 8010c58:	4b15      	ldr	r3, [pc, #84]	; (8010cb0 <pxCurrentTCBConst>)
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	f01e 0f10 	tst.w	lr, #16
 8010c60:	bf08      	it	eq
 8010c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6a:	6010      	str	r0, [r2, #0]
 8010c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c74:	f380 8811 	msr	BASEPRI, r0
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	f3bf 8f6f 	isb	sy
 8010c80:	f7fe fd3a 	bl	800f6f8 <vTaskSwitchContext>
 8010c84:	f04f 0000 	mov.w	r0, #0
 8010c88:	f380 8811 	msr	BASEPRI, r0
 8010c8c:	bc09      	pop	{r0, r3}
 8010c8e:	6819      	ldr	r1, [r3, #0]
 8010c90:	6808      	ldr	r0, [r1, #0]
 8010c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c96:	f01e 0f10 	tst.w	lr, #16
 8010c9a:	bf08      	it	eq
 8010c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ca0:	f380 8809 	msr	PSP, r0
 8010ca4:	f3bf 8f6f 	isb	sy
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	f3af 8000 	nop.w

08010cb0 <pxCurrentTCBConst>:
 8010cb0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010cb4:	bf00      	nop
 8010cb6:	bf00      	nop

08010cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8010cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc2:	f383 8811 	msr	BASEPRI, r3
 8010cc6:	f3bf 8f6f 	isb	sy
 8010cca:	f3bf 8f4f 	dsb	sy
 8010cce:	607b      	str	r3, [r7, #4]
}
 8010cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010cd2:	f7fe fc57 	bl	800f584 <xTaskIncrementTick>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d003      	beq.n	8010ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010cdc:	4b06      	ldr	r3, [pc, #24]	; (8010cf8 <xPortSysTickHandler+0x40>)
 8010cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ce2:	601a      	str	r2, [r3, #0]
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	f383 8811 	msr	BASEPRI, r3
}
 8010cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010cf0:	bf00      	nop
 8010cf2:	3708      	adds	r7, #8
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	e000ed04 	.word	0xe000ed04

08010cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d00:	4b0b      	ldr	r3, [pc, #44]	; (8010d30 <vPortSetupTimerInterrupt+0x34>)
 8010d02:	2200      	movs	r2, #0
 8010d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d06:	4b0b      	ldr	r3, [pc, #44]	; (8010d34 <vPortSetupTimerInterrupt+0x38>)
 8010d08:	2200      	movs	r2, #0
 8010d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d0c:	4b0a      	ldr	r3, [pc, #40]	; (8010d38 <vPortSetupTimerInterrupt+0x3c>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	4a0a      	ldr	r2, [pc, #40]	; (8010d3c <vPortSetupTimerInterrupt+0x40>)
 8010d12:	fba2 2303 	umull	r2, r3, r2, r3
 8010d16:	099b      	lsrs	r3, r3, #6
 8010d18:	4a09      	ldr	r2, [pc, #36]	; (8010d40 <vPortSetupTimerInterrupt+0x44>)
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d1e:	4b04      	ldr	r3, [pc, #16]	; (8010d30 <vPortSetupTimerInterrupt+0x34>)
 8010d20:	2207      	movs	r2, #7
 8010d22:	601a      	str	r2, [r3, #0]
}
 8010d24:	bf00      	nop
 8010d26:	46bd      	mov	sp, r7
 8010d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	e000e010 	.word	0xe000e010
 8010d34:	e000e018 	.word	0xe000e018
 8010d38:	20000014 	.word	0x20000014
 8010d3c:	10624dd3 	.word	0x10624dd3
 8010d40:	e000e014 	.word	0xe000e014

08010d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010d54 <vPortEnableVFP+0x10>
 8010d48:	6801      	ldr	r1, [r0, #0]
 8010d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010d4e:	6001      	str	r1, [r0, #0]
 8010d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d52:	bf00      	nop
 8010d54:	e000ed88 	.word	0xe000ed88

08010d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d58:	b480      	push	{r7}
 8010d5a:	b085      	sub	sp, #20
 8010d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d5e:	f3ef 8305 	mrs	r3, IPSR
 8010d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2b0f      	cmp	r3, #15
 8010d68:	d914      	bls.n	8010d94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d6a:	4a17      	ldr	r2, [pc, #92]	; (8010dc8 <vPortValidateInterruptPriority+0x70>)
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	4413      	add	r3, r2
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d74:	4b15      	ldr	r3, [pc, #84]	; (8010dcc <vPortValidateInterruptPriority+0x74>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	7afa      	ldrb	r2, [r7, #11]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d20a      	bcs.n	8010d94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d82:	f383 8811 	msr	BASEPRI, r3
 8010d86:	f3bf 8f6f 	isb	sy
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	607b      	str	r3, [r7, #4]
}
 8010d90:	bf00      	nop
 8010d92:	e7fe      	b.n	8010d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d94:	4b0e      	ldr	r3, [pc, #56]	; (8010dd0 <vPortValidateInterruptPriority+0x78>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010d9c:	4b0d      	ldr	r3, [pc, #52]	; (8010dd4 <vPortValidateInterruptPriority+0x7c>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d90a      	bls.n	8010dba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	603b      	str	r3, [r7, #0]
}
 8010db6:	bf00      	nop
 8010db8:	e7fe      	b.n	8010db8 <vPortValidateInterruptPriority+0x60>
	}
 8010dba:	bf00      	nop
 8010dbc:	3714      	adds	r7, #20
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	e000e3f0 	.word	0xe000e3f0
 8010dcc:	20000eec 	.word	0x20000eec
 8010dd0:	e000ed0c 	.word	0xe000ed0c
 8010dd4:	20000ef0 	.word	0x20000ef0

08010dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b08a      	sub	sp, #40	; 0x28
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010de0:	2300      	movs	r3, #0
 8010de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010de4:	f7fe fb12 	bl	800f40c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010de8:	4b5b      	ldr	r3, [pc, #364]	; (8010f58 <pvPortMalloc+0x180>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d101      	bne.n	8010df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010df0:	f000 f920 	bl	8011034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010df4:	4b59      	ldr	r3, [pc, #356]	; (8010f5c <pvPortMalloc+0x184>)
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4013      	ands	r3, r2
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f040 8093 	bne.w	8010f28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d01d      	beq.n	8010e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010e08:	2208      	movs	r2, #8
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f003 0307 	and.w	r3, r3, #7
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d014      	beq.n	8010e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f023 0307 	bic.w	r3, r3, #7
 8010e20:	3308      	adds	r3, #8
 8010e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f003 0307 	and.w	r3, r3, #7
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00a      	beq.n	8010e44 <pvPortMalloc+0x6c>
	__asm volatile
 8010e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e32:	f383 8811 	msr	BASEPRI, r3
 8010e36:	f3bf 8f6f 	isb	sy
 8010e3a:	f3bf 8f4f 	dsb	sy
 8010e3e:	617b      	str	r3, [r7, #20]
}
 8010e40:	bf00      	nop
 8010e42:	e7fe      	b.n	8010e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d06e      	beq.n	8010f28 <pvPortMalloc+0x150>
 8010e4a:	4b45      	ldr	r3, [pc, #276]	; (8010f60 <pvPortMalloc+0x188>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d869      	bhi.n	8010f28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e54:	4b43      	ldr	r3, [pc, #268]	; (8010f64 <pvPortMalloc+0x18c>)
 8010e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e58:	4b42      	ldr	r3, [pc, #264]	; (8010f64 <pvPortMalloc+0x18c>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e5e:	e004      	b.n	8010e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d903      	bls.n	8010e7c <pvPortMalloc+0xa4>
 8010e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d1f1      	bne.n	8010e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e7c:	4b36      	ldr	r3, [pc, #216]	; (8010f58 <pvPortMalloc+0x180>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d050      	beq.n	8010f28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e86:	6a3b      	ldr	r3, [r7, #32]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2208      	movs	r2, #8
 8010e8c:	4413      	add	r3, r2
 8010e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	6a3b      	ldr	r3, [r7, #32]
 8010e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	685a      	ldr	r2, [r3, #4]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	1ad2      	subs	r2, r2, r3
 8010ea0:	2308      	movs	r3, #8
 8010ea2:	005b      	lsls	r3, r3, #1
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d91f      	bls.n	8010ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	4413      	add	r3, r2
 8010eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	f003 0307 	and.w	r3, r3, #7
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00a      	beq.n	8010ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8010eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ebe:	f383 8811 	msr	BASEPRI, r3
 8010ec2:	f3bf 8f6f 	isb	sy
 8010ec6:	f3bf 8f4f 	dsb	sy
 8010eca:	613b      	str	r3, [r7, #16]
}
 8010ecc:	bf00      	nop
 8010ece:	e7fe      	b.n	8010ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed2:	685a      	ldr	r2, [r3, #4]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	1ad2      	subs	r2, r2, r3
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010ee2:	69b8      	ldr	r0, [r7, #24]
 8010ee4:	f000 f908 	bl	80110f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010ee8:	4b1d      	ldr	r3, [pc, #116]	; (8010f60 <pvPortMalloc+0x188>)
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	4a1b      	ldr	r2, [pc, #108]	; (8010f60 <pvPortMalloc+0x188>)
 8010ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010ef6:	4b1a      	ldr	r3, [pc, #104]	; (8010f60 <pvPortMalloc+0x188>)
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	4b1b      	ldr	r3, [pc, #108]	; (8010f68 <pvPortMalloc+0x190>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d203      	bcs.n	8010f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f02:	4b17      	ldr	r3, [pc, #92]	; (8010f60 <pvPortMalloc+0x188>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	4a18      	ldr	r2, [pc, #96]	; (8010f68 <pvPortMalloc+0x190>)
 8010f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	685a      	ldr	r2, [r3, #4]
 8010f0e:	4b13      	ldr	r3, [pc, #76]	; (8010f5c <pvPortMalloc+0x184>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	431a      	orrs	r2, r3
 8010f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010f1e:	4b13      	ldr	r3, [pc, #76]	; (8010f6c <pvPortMalloc+0x194>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	3301      	adds	r3, #1
 8010f24:	4a11      	ldr	r2, [pc, #68]	; (8010f6c <pvPortMalloc+0x194>)
 8010f26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f28:	f7fe fa7e 	bl	800f428 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	f003 0307 	and.w	r3, r3, #7
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d00a      	beq.n	8010f4c <pvPortMalloc+0x174>
	__asm volatile
 8010f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3a:	f383 8811 	msr	BASEPRI, r3
 8010f3e:	f3bf 8f6f 	isb	sy
 8010f42:	f3bf 8f4f 	dsb	sy
 8010f46:	60fb      	str	r3, [r7, #12]
}
 8010f48:	bf00      	nop
 8010f4a:	e7fe      	b.n	8010f4a <pvPortMalloc+0x172>
	return pvReturn;
 8010f4c:	69fb      	ldr	r3, [r7, #28]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3728      	adds	r7, #40	; 0x28
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	20004afc 	.word	0x20004afc
 8010f5c:	20004b10 	.word	0x20004b10
 8010f60:	20004b00 	.word	0x20004b00
 8010f64:	20004af4 	.word	0x20004af4
 8010f68:	20004b04 	.word	0x20004b04
 8010f6c:	20004b08 	.word	0x20004b08

08010f70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b086      	sub	sp, #24
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d04d      	beq.n	801101e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010f82:	2308      	movs	r3, #8
 8010f84:	425b      	negs	r3, r3
 8010f86:	697a      	ldr	r2, [r7, #20]
 8010f88:	4413      	add	r3, r2
 8010f8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	685a      	ldr	r2, [r3, #4]
 8010f94:	4b24      	ldr	r3, [pc, #144]	; (8011028 <vPortFree+0xb8>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4013      	ands	r3, r2
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d10a      	bne.n	8010fb4 <vPortFree+0x44>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	60fb      	str	r3, [r7, #12]
}
 8010fb0:	bf00      	nop
 8010fb2:	e7fe      	b.n	8010fb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d00a      	beq.n	8010fd2 <vPortFree+0x62>
	__asm volatile
 8010fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc0:	f383 8811 	msr	BASEPRI, r3
 8010fc4:	f3bf 8f6f 	isb	sy
 8010fc8:	f3bf 8f4f 	dsb	sy
 8010fcc:	60bb      	str	r3, [r7, #8]
}
 8010fce:	bf00      	nop
 8010fd0:	e7fe      	b.n	8010fd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	685a      	ldr	r2, [r3, #4]
 8010fd6:	4b14      	ldr	r3, [pc, #80]	; (8011028 <vPortFree+0xb8>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4013      	ands	r3, r2
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d01e      	beq.n	801101e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d11a      	bne.n	801101e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	685a      	ldr	r2, [r3, #4]
 8010fec:	4b0e      	ldr	r3, [pc, #56]	; (8011028 <vPortFree+0xb8>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	43db      	mvns	r3, r3
 8010ff2:	401a      	ands	r2, r3
 8010ff4:	693b      	ldr	r3, [r7, #16]
 8010ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ff8:	f7fe fa08 	bl	800f40c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	685a      	ldr	r2, [r3, #4]
 8011000:	4b0a      	ldr	r3, [pc, #40]	; (801102c <vPortFree+0xbc>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4413      	add	r3, r2
 8011006:	4a09      	ldr	r2, [pc, #36]	; (801102c <vPortFree+0xbc>)
 8011008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801100a:	6938      	ldr	r0, [r7, #16]
 801100c:	f000 f874 	bl	80110f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011010:	4b07      	ldr	r3, [pc, #28]	; (8011030 <vPortFree+0xc0>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	3301      	adds	r3, #1
 8011016:	4a06      	ldr	r2, [pc, #24]	; (8011030 <vPortFree+0xc0>)
 8011018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801101a:	f7fe fa05 	bl	800f428 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801101e:	bf00      	nop
 8011020:	3718      	adds	r7, #24
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	20004b10 	.word	0x20004b10
 801102c:	20004b00 	.word	0x20004b00
 8011030:	20004b0c 	.word	0x20004b0c

08011034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011034:	b480      	push	{r7}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801103a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801103e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011040:	4b27      	ldr	r3, [pc, #156]	; (80110e0 <prvHeapInit+0xac>)
 8011042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f003 0307 	and.w	r3, r3, #7
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00c      	beq.n	8011068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	3307      	adds	r3, #7
 8011052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f023 0307 	bic.w	r3, r3, #7
 801105a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801105c:	68ba      	ldr	r2, [r7, #8]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	4a1f      	ldr	r2, [pc, #124]	; (80110e0 <prvHeapInit+0xac>)
 8011064:	4413      	add	r3, r2
 8011066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801106c:	4a1d      	ldr	r2, [pc, #116]	; (80110e4 <prvHeapInit+0xb0>)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011072:	4b1c      	ldr	r3, [pc, #112]	; (80110e4 <prvHeapInit+0xb0>)
 8011074:	2200      	movs	r2, #0
 8011076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	68ba      	ldr	r2, [r7, #8]
 801107c:	4413      	add	r3, r2
 801107e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011080:	2208      	movs	r2, #8
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	1a9b      	subs	r3, r3, r2
 8011086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f023 0307 	bic.w	r3, r3, #7
 801108e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	4a15      	ldr	r2, [pc, #84]	; (80110e8 <prvHeapInit+0xb4>)
 8011094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011096:	4b14      	ldr	r3, [pc, #80]	; (80110e8 <prvHeapInit+0xb4>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2200      	movs	r2, #0
 801109c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801109e:	4b12      	ldr	r3, [pc, #72]	; (80110e8 <prvHeapInit+0xb4>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	2200      	movs	r2, #0
 80110a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	68fa      	ldr	r2, [r7, #12]
 80110ae:	1ad2      	subs	r2, r2, r3
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110b4:	4b0c      	ldr	r3, [pc, #48]	; (80110e8 <prvHeapInit+0xb4>)
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	4a0a      	ldr	r2, [pc, #40]	; (80110ec <prvHeapInit+0xb8>)
 80110c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	4a09      	ldr	r2, [pc, #36]	; (80110f0 <prvHeapInit+0xbc>)
 80110ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110cc:	4b09      	ldr	r3, [pc, #36]	; (80110f4 <prvHeapInit+0xc0>)
 80110ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80110d2:	601a      	str	r2, [r3, #0]
}
 80110d4:	bf00      	nop
 80110d6:	3714      	adds	r7, #20
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	20000ef4 	.word	0x20000ef4
 80110e4:	20004af4 	.word	0x20004af4
 80110e8:	20004afc 	.word	0x20004afc
 80110ec:	20004b04 	.word	0x20004b04
 80110f0:	20004b00 	.word	0x20004b00
 80110f4:	20004b10 	.word	0x20004b10

080110f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80110f8:	b480      	push	{r7}
 80110fa:	b085      	sub	sp, #20
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011100:	4b28      	ldr	r3, [pc, #160]	; (80111a4 <prvInsertBlockIntoFreeList+0xac>)
 8011102:	60fb      	str	r3, [r7, #12]
 8011104:	e002      	b.n	801110c <prvInsertBlockIntoFreeList+0x14>
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	60fb      	str	r3, [r7, #12]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	429a      	cmp	r2, r3
 8011114:	d8f7      	bhi.n	8011106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	68ba      	ldr	r2, [r7, #8]
 8011120:	4413      	add	r3, r2
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	429a      	cmp	r2, r3
 8011126:	d108      	bne.n	801113a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	685a      	ldr	r2, [r3, #4]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	441a      	add	r2, r3
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	68ba      	ldr	r2, [r7, #8]
 8011144:	441a      	add	r2, r3
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	429a      	cmp	r2, r3
 801114c:	d118      	bne.n	8011180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	4b15      	ldr	r3, [pc, #84]	; (80111a8 <prvInsertBlockIntoFreeList+0xb0>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	429a      	cmp	r2, r3
 8011158:	d00d      	beq.n	8011176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	685a      	ldr	r2, [r3, #4]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	441a      	add	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	601a      	str	r2, [r3, #0]
 8011174:	e008      	b.n	8011188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011176:	4b0c      	ldr	r3, [pc, #48]	; (80111a8 <prvInsertBlockIntoFreeList+0xb0>)
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	601a      	str	r2, [r3, #0]
 801117e:	e003      	b.n	8011188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011188:	68fa      	ldr	r2, [r7, #12]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	429a      	cmp	r2, r3
 801118e:	d002      	beq.n	8011196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011196:	bf00      	nop
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	20004af4 	.word	0x20004af4
 80111a8:	20004afc 	.word	0x20004afc

080111ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80111b0:	2201      	movs	r2, #1
 80111b2:	490e      	ldr	r1, [pc, #56]	; (80111ec <MX_USB_HOST_Init+0x40>)
 80111b4:	480e      	ldr	r0, [pc, #56]	; (80111f0 <MX_USB_HOST_Init+0x44>)
 80111b6:	f7fb f807 	bl	800c1c8 <USBH_Init>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80111c0:	f7f1 ffe2 	bl	8003188 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80111c4:	490b      	ldr	r1, [pc, #44]	; (80111f4 <MX_USB_HOST_Init+0x48>)
 80111c6:	480a      	ldr	r0, [pc, #40]	; (80111f0 <MX_USB_HOST_Init+0x44>)
 80111c8:	f7fb f8ae 	bl	800c328 <USBH_RegisterClass>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d001      	beq.n	80111d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80111d2:	f7f1 ffd9 	bl	8003188 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80111d6:	4806      	ldr	r0, [pc, #24]	; (80111f0 <MX_USB_HOST_Init+0x44>)
 80111d8:	f7fb f932 	bl	800c440 <USBH_Start>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80111e2:	f7f1 ffd1 	bl	8003188 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80111e6:	bf00      	nop
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	080111f9 	.word	0x080111f9
 80111f0:	20005044 	.word	0x20005044
 80111f4:	20000020 	.word	0x20000020

080111f8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	460b      	mov	r3, r1
 8011202:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011204:	78fb      	ldrb	r3, [r7, #3]
 8011206:	3b01      	subs	r3, #1
 8011208:	2b04      	cmp	r3, #4
 801120a:	d819      	bhi.n	8011240 <USBH_UserProcess+0x48>
 801120c:	a201      	add	r2, pc, #4	; (adr r2, 8011214 <USBH_UserProcess+0x1c>)
 801120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011212:	bf00      	nop
 8011214:	08011241 	.word	0x08011241
 8011218:	08011231 	.word	0x08011231
 801121c:	08011241 	.word	0x08011241
 8011220:	08011239 	.word	0x08011239
 8011224:	08011229 	.word	0x08011229
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011228:	4b09      	ldr	r3, [pc, #36]	; (8011250 <USBH_UserProcess+0x58>)
 801122a:	2203      	movs	r2, #3
 801122c:	701a      	strb	r2, [r3, #0]
  break;
 801122e:	e008      	b.n	8011242 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011230:	4b07      	ldr	r3, [pc, #28]	; (8011250 <USBH_UserProcess+0x58>)
 8011232:	2202      	movs	r2, #2
 8011234:	701a      	strb	r2, [r3, #0]
  break;
 8011236:	e004      	b.n	8011242 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011238:	4b05      	ldr	r3, [pc, #20]	; (8011250 <USBH_UserProcess+0x58>)
 801123a:	2201      	movs	r2, #1
 801123c:	701a      	strb	r2, [r3, #0]
  break;
 801123e:	e000      	b.n	8011242 <USBH_UserProcess+0x4a>

  default:
  break;
 8011240:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011242:	bf00      	nop
 8011244:	370c      	adds	r7, #12
 8011246:	46bd      	mov	sp, r7
 8011248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124c:	4770      	bx	lr
 801124e:	bf00      	nop
 8011250:	20004b14 	.word	0x20004b14

08011254 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b08a      	sub	sp, #40	; 0x28
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801125c:	f107 0314 	add.w	r3, r7, #20
 8011260:	2200      	movs	r2, #0
 8011262:	601a      	str	r2, [r3, #0]
 8011264:	605a      	str	r2, [r3, #4]
 8011266:	609a      	str	r2, [r3, #8]
 8011268:	60da      	str	r2, [r3, #12]
 801126a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011274:	d147      	bne.n	8011306 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011276:	2300      	movs	r3, #0
 8011278:	613b      	str	r3, [r7, #16]
 801127a:	4b25      	ldr	r3, [pc, #148]	; (8011310 <HAL_HCD_MspInit+0xbc>)
 801127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801127e:	4a24      	ldr	r2, [pc, #144]	; (8011310 <HAL_HCD_MspInit+0xbc>)
 8011280:	f043 0301 	orr.w	r3, r3, #1
 8011284:	6313      	str	r3, [r2, #48]	; 0x30
 8011286:	4b22      	ldr	r3, [pc, #136]	; (8011310 <HAL_HCD_MspInit+0xbc>)
 8011288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	613b      	str	r3, [r7, #16]
 8011290:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8011292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011298:	2300      	movs	r3, #0
 801129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801129c:	2300      	movs	r3, #0
 801129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80112a0:	f107 0314 	add.w	r3, r7, #20
 80112a4:	4619      	mov	r1, r3
 80112a6:	481b      	ldr	r0, [pc, #108]	; (8011314 <HAL_HCD_MspInit+0xc0>)
 80112a8:	f7f3 f90a 	bl	80044c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80112ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80112b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80112b2:	2302      	movs	r3, #2
 80112b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112b6:	2300      	movs	r3, #0
 80112b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112ba:	2300      	movs	r3, #0
 80112bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80112be:	230a      	movs	r3, #10
 80112c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80112c2:	f107 0314 	add.w	r3, r7, #20
 80112c6:	4619      	mov	r1, r3
 80112c8:	4812      	ldr	r0, [pc, #72]	; (8011314 <HAL_HCD_MspInit+0xc0>)
 80112ca:	f7f3 f8f9 	bl	80044c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80112ce:	4b10      	ldr	r3, [pc, #64]	; (8011310 <HAL_HCD_MspInit+0xbc>)
 80112d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d2:	4a0f      	ldr	r2, [pc, #60]	; (8011310 <HAL_HCD_MspInit+0xbc>)
 80112d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112d8:	6353      	str	r3, [r2, #52]	; 0x34
 80112da:	2300      	movs	r3, #0
 80112dc:	60fb      	str	r3, [r7, #12]
 80112de:	4b0c      	ldr	r3, [pc, #48]	; (8011310 <HAL_HCD_MspInit+0xbc>)
 80112e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112e2:	4a0b      	ldr	r2, [pc, #44]	; (8011310 <HAL_HCD_MspInit+0xbc>)
 80112e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80112e8:	6453      	str	r3, [r2, #68]	; 0x44
 80112ea:	4b09      	ldr	r3, [pc, #36]	; (8011310 <HAL_HCD_MspInit+0xbc>)
 80112ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112f2:	60fb      	str	r3, [r7, #12]
 80112f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80112f6:	2200      	movs	r2, #0
 80112f8:	2105      	movs	r1, #5
 80112fa:	2043      	movs	r0, #67	; 0x43
 80112fc:	f7f3 f824 	bl	8004348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011300:	2043      	movs	r0, #67	; 0x43
 8011302:	f7f3 f83d 	bl	8004380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011306:	bf00      	nop
 8011308:	3728      	adds	r7, #40	; 0x28
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	40023800 	.word	0x40023800
 8011314:	40020000 	.word	0x40020000

08011318 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011326:	4618      	mov	r0, r3
 8011328:	f7fb fd37 	bl	800cd9a <USBH_LL_IncTimer>
}
 801132c:	bf00      	nop
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011342:	4618      	mov	r0, r3
 8011344:	f7fb fd7b 	bl	800ce3e <USBH_LL_Connect>
}
 8011348:	bf00      	nop
 801134a:	3708      	adds	r7, #8
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801135e:	4618      	mov	r0, r3
 8011360:	f7fb fd90 	bl	800ce84 <USBH_LL_Disconnect>
}
 8011364:	bf00      	nop
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
 8011378:	4613      	mov	r3, r2
 801137a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011382:	4618      	mov	r0, r3
 8011384:	f7fb fdc7 	bl	800cf16 <USBH_LL_NotifyURBChange>
#endif
}
 8011388:	bf00      	nop
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fb fd25 	bl	800cdee <USBH_LL_PortEnabled>
}
 80113a4:	bf00      	nop
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7fb fd31 	bl	800ce22 <USBH_LL_PortDisabled>
}
 80113c0:	bf00      	nop
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d12a      	bne.n	8011430 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80113da:	4a18      	ldr	r2, [pc, #96]	; (801143c <USBH_LL_Init+0x74>)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4a15      	ldr	r2, [pc, #84]	; (801143c <USBH_LL_Init+0x74>)
 80113e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80113ea:	4b14      	ldr	r3, [pc, #80]	; (801143c <USBH_LL_Init+0x74>)
 80113ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80113f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80113f2:	4b12      	ldr	r3, [pc, #72]	; (801143c <USBH_LL_Init+0x74>)
 80113f4:	2208      	movs	r2, #8
 80113f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80113f8:	4b10      	ldr	r3, [pc, #64]	; (801143c <USBH_LL_Init+0x74>)
 80113fa:	2201      	movs	r2, #1
 80113fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80113fe:	4b0f      	ldr	r3, [pc, #60]	; (801143c <USBH_LL_Init+0x74>)
 8011400:	2200      	movs	r2, #0
 8011402:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011404:	4b0d      	ldr	r3, [pc, #52]	; (801143c <USBH_LL_Init+0x74>)
 8011406:	2202      	movs	r2, #2
 8011408:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801140a:	4b0c      	ldr	r3, [pc, #48]	; (801143c <USBH_LL_Init+0x74>)
 801140c:	2200      	movs	r2, #0
 801140e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011410:	480a      	ldr	r0, [pc, #40]	; (801143c <USBH_LL_Init+0x74>)
 8011412:	f7f3 fa46 	bl	80048a2 <HAL_HCD_Init>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d001      	beq.n	8011420 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801141c:	f7f1 feb4 	bl	8003188 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011420:	4806      	ldr	r0, [pc, #24]	; (801143c <USBH_LL_Init+0x74>)
 8011422:	f7f3 fe2a 	bl	800507a <HAL_HCD_GetCurrentFrame>
 8011426:	4603      	mov	r3, r0
 8011428:	4619      	mov	r1, r3
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f7fb fca6 	bl	800cd7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011430:	2300      	movs	r3, #0
}
 8011432:	4618      	mov	r0, r3
 8011434:	3708      	adds	r7, #8
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	20005428 	.word	0x20005428

08011440 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011448:	2300      	movs	r3, #0
 801144a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011456:	4618      	mov	r0, r3
 8011458:	f7f3 fd99 	bl	8004f8e <HAL_HCD_Start>
 801145c:	4603      	mov	r3, r0
 801145e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011460:	7bfb      	ldrb	r3, [r7, #15]
 8011462:	4618      	mov	r0, r3
 8011464:	f000 f95c 	bl	8011720 <USBH_Get_USB_Status>
 8011468:	4603      	mov	r3, r0
 801146a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801146c:	7bbb      	ldrb	r3, [r7, #14]
}
 801146e:	4618      	mov	r0, r3
 8011470:	3710      	adds	r7, #16
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011476:	b580      	push	{r7, lr}
 8011478:	b084      	sub	sp, #16
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801147e:	2300      	movs	r3, #0
 8011480:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011482:	2300      	movs	r3, #0
 8011484:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801148c:	4618      	mov	r0, r3
 801148e:	f7f3 fda1 	bl	8004fd4 <HAL_HCD_Stop>
 8011492:	4603      	mov	r3, r0
 8011494:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011496:	7bfb      	ldrb	r3, [r7, #15]
 8011498:	4618      	mov	r0, r3
 801149a:	f000 f941 	bl	8011720 <USBH_Get_USB_Status>
 801149e:	4603      	mov	r3, r0
 80114a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3710      	adds	r7, #16
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80114b4:	2301      	movs	r3, #1
 80114b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80114be:	4618      	mov	r0, r3
 80114c0:	f7f3 fde9 	bl	8005096 <HAL_HCD_GetCurrentSpeed>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d00c      	beq.n	80114e4 <USBH_LL_GetSpeed+0x38>
 80114ca:	2b02      	cmp	r3, #2
 80114cc:	d80d      	bhi.n	80114ea <USBH_LL_GetSpeed+0x3e>
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d002      	beq.n	80114d8 <USBH_LL_GetSpeed+0x2c>
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d003      	beq.n	80114de <USBH_LL_GetSpeed+0x32>
 80114d6:	e008      	b.n	80114ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80114d8:	2300      	movs	r3, #0
 80114da:	73fb      	strb	r3, [r7, #15]
    break;
 80114dc:	e008      	b.n	80114f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80114de:	2301      	movs	r3, #1
 80114e0:	73fb      	strb	r3, [r7, #15]
    break;
 80114e2:	e005      	b.n	80114f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80114e4:	2302      	movs	r3, #2
 80114e6:	73fb      	strb	r3, [r7, #15]
    break;
 80114e8:	e002      	b.n	80114f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80114ea:	2301      	movs	r3, #1
 80114ec:	73fb      	strb	r3, [r7, #15]
    break;
 80114ee:	bf00      	nop
  }
  return  speed;
 80114f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b084      	sub	sp, #16
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011502:	2300      	movs	r3, #0
 8011504:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011506:	2300      	movs	r3, #0
 8011508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011510:	4618      	mov	r0, r3
 8011512:	f7f3 fd7c 	bl	800500e <HAL_HCD_ResetPort>
 8011516:	4603      	mov	r3, r0
 8011518:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801151a:	7bfb      	ldrb	r3, [r7, #15]
 801151c:	4618      	mov	r0, r3
 801151e:	f000 f8ff 	bl	8011720 <USBH_Get_USB_Status>
 8011522:	4603      	mov	r3, r0
 8011524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011526:	7bbb      	ldrb	r3, [r7, #14]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3710      	adds	r7, #16
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	460b      	mov	r3, r1
 801153a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011542:	78fa      	ldrb	r2, [r7, #3]
 8011544:	4611      	mov	r1, r2
 8011546:	4618      	mov	r0, r3
 8011548:	f7f3 fd83 	bl	8005052 <HAL_HCD_HC_GetXferCount>
 801154c:	4603      	mov	r3, r0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3708      	adds	r7, #8
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}

08011556 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011556:	b590      	push	{r4, r7, lr}
 8011558:	b089      	sub	sp, #36	; 0x24
 801155a:	af04      	add	r7, sp, #16
 801155c:	6078      	str	r0, [r7, #4]
 801155e:	4608      	mov	r0, r1
 8011560:	4611      	mov	r1, r2
 8011562:	461a      	mov	r2, r3
 8011564:	4603      	mov	r3, r0
 8011566:	70fb      	strb	r3, [r7, #3]
 8011568:	460b      	mov	r3, r1
 801156a:	70bb      	strb	r3, [r7, #2]
 801156c:	4613      	mov	r3, r2
 801156e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011570:	2300      	movs	r3, #0
 8011572:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011574:	2300      	movs	r3, #0
 8011576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801157e:	787c      	ldrb	r4, [r7, #1]
 8011580:	78ba      	ldrb	r2, [r7, #2]
 8011582:	78f9      	ldrb	r1, [r7, #3]
 8011584:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011586:	9302      	str	r3, [sp, #8]
 8011588:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801158c:	9301      	str	r3, [sp, #4]
 801158e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	4623      	mov	r3, r4
 8011596:	f7f3 f9e6 	bl	8004966 <HAL_HCD_HC_Init>
 801159a:	4603      	mov	r3, r0
 801159c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801159e:	7bfb      	ldrb	r3, [r7, #15]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f000 f8bd 	bl	8011720 <USBH_Get_USB_Status>
 80115a6:	4603      	mov	r3, r0
 80115a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3714      	adds	r7, #20
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd90      	pop	{r4, r7, pc}

080115b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	460b      	mov	r3, r1
 80115be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115c4:	2300      	movs	r3, #0
 80115c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80115ce:	78fa      	ldrb	r2, [r7, #3]
 80115d0:	4611      	mov	r1, r2
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7f3 fa56 	bl	8004a84 <HAL_HCD_HC_Halt>
 80115d8:	4603      	mov	r3, r0
 80115da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80115dc:	7bfb      	ldrb	r3, [r7, #15]
 80115de:	4618      	mov	r0, r3
 80115e0:	f000 f89e 	bl	8011720 <USBH_Get_USB_Status>
 80115e4:	4603      	mov	r3, r0
 80115e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80115f2:	b590      	push	{r4, r7, lr}
 80115f4:	b089      	sub	sp, #36	; 0x24
 80115f6:	af04      	add	r7, sp, #16
 80115f8:	6078      	str	r0, [r7, #4]
 80115fa:	4608      	mov	r0, r1
 80115fc:	4611      	mov	r1, r2
 80115fe:	461a      	mov	r2, r3
 8011600:	4603      	mov	r3, r0
 8011602:	70fb      	strb	r3, [r7, #3]
 8011604:	460b      	mov	r3, r1
 8011606:	70bb      	strb	r3, [r7, #2]
 8011608:	4613      	mov	r3, r2
 801160a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801160c:	2300      	movs	r3, #0
 801160e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011610:	2300      	movs	r3, #0
 8011612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801161a:	787c      	ldrb	r4, [r7, #1]
 801161c:	78ba      	ldrb	r2, [r7, #2]
 801161e:	78f9      	ldrb	r1, [r7, #3]
 8011620:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011624:	9303      	str	r3, [sp, #12]
 8011626:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011628:	9302      	str	r3, [sp, #8]
 801162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011632:	9300      	str	r3, [sp, #0]
 8011634:	4623      	mov	r3, r4
 8011636:	f7f3 fa49 	bl	8004acc <HAL_HCD_HC_SubmitRequest>
 801163a:	4603      	mov	r3, r0
 801163c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801163e:	7bfb      	ldrb	r3, [r7, #15]
 8011640:	4618      	mov	r0, r3
 8011642:	f000 f86d 	bl	8011720 <USBH_Get_USB_Status>
 8011646:	4603      	mov	r3, r0
 8011648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801164a:	7bbb      	ldrb	r3, [r7, #14]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3714      	adds	r7, #20
 8011650:	46bd      	mov	sp, r7
 8011652:	bd90      	pop	{r4, r7, pc}

08011654 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	460b      	mov	r3, r1
 801165e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011666:	78fa      	ldrb	r2, [r7, #3]
 8011668:	4611      	mov	r1, r2
 801166a:	4618      	mov	r0, r3
 801166c:	f7f3 fcdd 	bl	800502a <HAL_HCD_HC_GetURBState>
 8011670:	4603      	mov	r3, r0
}
 8011672:	4618      	mov	r0, r3
 8011674:	3708      	adds	r7, #8
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}

0801167a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801167a:	b580      	push	{r7, lr}
 801167c:	b082      	sub	sp, #8
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
 8011682:	460b      	mov	r3, r1
 8011684:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801168c:	2b01      	cmp	r3, #1
 801168e:	d103      	bne.n	8011698 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011690:	78fb      	ldrb	r3, [r7, #3]
 8011692:	4618      	mov	r0, r3
 8011694:	f000 f870 	bl	8011778 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011698:	20c8      	movs	r0, #200	; 0xc8
 801169a:	f7f2 fd79 	bl	8004190 <HAL_Delay>
  return USBH_OK;
 801169e:	2300      	movs	r3, #0
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3708      	adds	r7, #8
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80116a8:	b480      	push	{r7}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	460b      	mov	r3, r1
 80116b2:	70fb      	strb	r3, [r7, #3]
 80116b4:	4613      	mov	r3, r2
 80116b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80116be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80116c0:	78fb      	ldrb	r3, [r7, #3]
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	212c      	movs	r1, #44	; 0x2c
 80116c6:	fb01 f303 	mul.w	r3, r1, r3
 80116ca:	4413      	add	r3, r2
 80116cc:	333b      	adds	r3, #59	; 0x3b
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d009      	beq.n	80116e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80116d4:	78fb      	ldrb	r3, [r7, #3]
 80116d6:	68fa      	ldr	r2, [r7, #12]
 80116d8:	212c      	movs	r1, #44	; 0x2c
 80116da:	fb01 f303 	mul.w	r3, r1, r3
 80116de:	4413      	add	r3, r2
 80116e0:	3354      	adds	r3, #84	; 0x54
 80116e2:	78ba      	ldrb	r2, [r7, #2]
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	e008      	b.n	80116fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80116e8:	78fb      	ldrb	r3, [r7, #3]
 80116ea:	68fa      	ldr	r2, [r7, #12]
 80116ec:	212c      	movs	r1, #44	; 0x2c
 80116ee:	fb01 f303 	mul.w	r3, r1, r3
 80116f2:	4413      	add	r3, r2
 80116f4:	3355      	adds	r3, #85	; 0x55
 80116f6:	78ba      	ldrb	r2, [r7, #2]
 80116f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80116fa:	2300      	movs	r3, #0
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3714      	adds	r7, #20
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr

08011708 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7f2 fd3d 	bl	8004190 <HAL_Delay>
}
 8011716:	bf00      	nop
 8011718:	3708      	adds	r7, #8
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
	...

08011720 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011720:	b480      	push	{r7}
 8011722:	b085      	sub	sp, #20
 8011724:	af00      	add	r7, sp, #0
 8011726:	4603      	mov	r3, r0
 8011728:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801172a:	2300      	movs	r3, #0
 801172c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801172e:	79fb      	ldrb	r3, [r7, #7]
 8011730:	2b03      	cmp	r3, #3
 8011732:	d817      	bhi.n	8011764 <USBH_Get_USB_Status+0x44>
 8011734:	a201      	add	r2, pc, #4	; (adr r2, 801173c <USBH_Get_USB_Status+0x1c>)
 8011736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801173a:	bf00      	nop
 801173c:	0801174d 	.word	0x0801174d
 8011740:	08011753 	.word	0x08011753
 8011744:	08011759 	.word	0x08011759
 8011748:	0801175f 	.word	0x0801175f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801174c:	2300      	movs	r3, #0
 801174e:	73fb      	strb	r3, [r7, #15]
    break;
 8011750:	e00b      	b.n	801176a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011752:	2302      	movs	r3, #2
 8011754:	73fb      	strb	r3, [r7, #15]
    break;
 8011756:	e008      	b.n	801176a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011758:	2301      	movs	r3, #1
 801175a:	73fb      	strb	r3, [r7, #15]
    break;
 801175c:	e005      	b.n	801176a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801175e:	2302      	movs	r3, #2
 8011760:	73fb      	strb	r3, [r7, #15]
    break;
 8011762:	e002      	b.n	801176a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011764:	2302      	movs	r3, #2
 8011766:	73fb      	strb	r3, [r7, #15]
    break;
 8011768:	bf00      	nop
  }
  return usb_status;
 801176a:	7bfb      	ldrb	r3, [r7, #15]
}
 801176c:	4618      	mov	r0, r3
 801176e:	3714      	adds	r7, #20
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr

08011778 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	4603      	mov	r3, r0
 8011780:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011782:	79fb      	ldrb	r3, [r7, #7]
 8011784:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011786:	79fb      	ldrb	r3, [r7, #7]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801178c:	2300      	movs	r3, #0
 801178e:	73fb      	strb	r3, [r7, #15]
 8011790:	e001      	b.n	8011796 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011792:	2301      	movs	r3, #1
 8011794:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8011796:	7bfb      	ldrb	r3, [r7, #15]
 8011798:	461a      	mov	r2, r3
 801179a:	2101      	movs	r1, #1
 801179c:	4803      	ldr	r0, [pc, #12]	; (80117ac <MX_DriverVbusFS+0x34>)
 801179e:	f7f3 f843 	bl	8004828 <HAL_GPIO_WritePin>
}
 80117a2:	bf00      	nop
 80117a4:	3710      	adds	r7, #16
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	bf00      	nop
 80117ac:	40020800 	.word	0x40020800

080117b0 <__errno>:
 80117b0:	4b01      	ldr	r3, [pc, #4]	; (80117b8 <__errno+0x8>)
 80117b2:	6818      	ldr	r0, [r3, #0]
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	20000044 	.word	0x20000044

080117bc <__libc_init_array>:
 80117bc:	b570      	push	{r4, r5, r6, lr}
 80117be:	4d0d      	ldr	r5, [pc, #52]	; (80117f4 <__libc_init_array+0x38>)
 80117c0:	4c0d      	ldr	r4, [pc, #52]	; (80117f8 <__libc_init_array+0x3c>)
 80117c2:	1b64      	subs	r4, r4, r5
 80117c4:	10a4      	asrs	r4, r4, #2
 80117c6:	2600      	movs	r6, #0
 80117c8:	42a6      	cmp	r6, r4
 80117ca:	d109      	bne.n	80117e0 <__libc_init_array+0x24>
 80117cc:	4d0b      	ldr	r5, [pc, #44]	; (80117fc <__libc_init_array+0x40>)
 80117ce:	4c0c      	ldr	r4, [pc, #48]	; (8011800 <__libc_init_array+0x44>)
 80117d0:	f000 fcd8 	bl	8012184 <_init>
 80117d4:	1b64      	subs	r4, r4, r5
 80117d6:	10a4      	asrs	r4, r4, #2
 80117d8:	2600      	movs	r6, #0
 80117da:	42a6      	cmp	r6, r4
 80117dc:	d105      	bne.n	80117ea <__libc_init_array+0x2e>
 80117de:	bd70      	pop	{r4, r5, r6, pc}
 80117e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80117e4:	4798      	blx	r3
 80117e6:	3601      	adds	r6, #1
 80117e8:	e7ee      	b.n	80117c8 <__libc_init_array+0xc>
 80117ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80117ee:	4798      	blx	r3
 80117f0:	3601      	adds	r6, #1
 80117f2:	e7f2      	b.n	80117da <__libc_init_array+0x1e>
 80117f4:	08014d20 	.word	0x08014d20
 80117f8:	08014d20 	.word	0x08014d20
 80117fc:	08014d20 	.word	0x08014d20
 8011800:	08014d24 	.word	0x08014d24

08011804 <__retarget_lock_acquire_recursive>:
 8011804:	4770      	bx	lr

08011806 <__retarget_lock_release_recursive>:
 8011806:	4770      	bx	lr

08011808 <malloc>:
 8011808:	4b02      	ldr	r3, [pc, #8]	; (8011814 <malloc+0xc>)
 801180a:	4601      	mov	r1, r0
 801180c:	6818      	ldr	r0, [r3, #0]
 801180e:	f000 b871 	b.w	80118f4 <_malloc_r>
 8011812:	bf00      	nop
 8011814:	20000044 	.word	0x20000044

08011818 <free>:
 8011818:	4b02      	ldr	r3, [pc, #8]	; (8011824 <free+0xc>)
 801181a:	4601      	mov	r1, r0
 801181c:	6818      	ldr	r0, [r3, #0]
 801181e:	f000 b819 	b.w	8011854 <_free_r>
 8011822:	bf00      	nop
 8011824:	20000044 	.word	0x20000044

08011828 <memcpy>:
 8011828:	440a      	add	r2, r1
 801182a:	4291      	cmp	r1, r2
 801182c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011830:	d100      	bne.n	8011834 <memcpy+0xc>
 8011832:	4770      	bx	lr
 8011834:	b510      	push	{r4, lr}
 8011836:	f811 4b01 	ldrb.w	r4, [r1], #1
 801183a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801183e:	4291      	cmp	r1, r2
 8011840:	d1f9      	bne.n	8011836 <memcpy+0xe>
 8011842:	bd10      	pop	{r4, pc}

08011844 <memset>:
 8011844:	4402      	add	r2, r0
 8011846:	4603      	mov	r3, r0
 8011848:	4293      	cmp	r3, r2
 801184a:	d100      	bne.n	801184e <memset+0xa>
 801184c:	4770      	bx	lr
 801184e:	f803 1b01 	strb.w	r1, [r3], #1
 8011852:	e7f9      	b.n	8011848 <memset+0x4>

08011854 <_free_r>:
 8011854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011856:	2900      	cmp	r1, #0
 8011858:	d048      	beq.n	80118ec <_free_r+0x98>
 801185a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801185e:	9001      	str	r0, [sp, #4]
 8011860:	2b00      	cmp	r3, #0
 8011862:	f1a1 0404 	sub.w	r4, r1, #4
 8011866:	bfb8      	it	lt
 8011868:	18e4      	addlt	r4, r4, r3
 801186a:	f000 f947 	bl	8011afc <__malloc_lock>
 801186e:	4a20      	ldr	r2, [pc, #128]	; (80118f0 <_free_r+0x9c>)
 8011870:	9801      	ldr	r0, [sp, #4]
 8011872:	6813      	ldr	r3, [r2, #0]
 8011874:	4615      	mov	r5, r2
 8011876:	b933      	cbnz	r3, 8011886 <_free_r+0x32>
 8011878:	6063      	str	r3, [r4, #4]
 801187a:	6014      	str	r4, [r2, #0]
 801187c:	b003      	add	sp, #12
 801187e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011882:	f000 b941 	b.w	8011b08 <__malloc_unlock>
 8011886:	42a3      	cmp	r3, r4
 8011888:	d90b      	bls.n	80118a2 <_free_r+0x4e>
 801188a:	6821      	ldr	r1, [r4, #0]
 801188c:	1862      	adds	r2, r4, r1
 801188e:	4293      	cmp	r3, r2
 8011890:	bf04      	itt	eq
 8011892:	681a      	ldreq	r2, [r3, #0]
 8011894:	685b      	ldreq	r3, [r3, #4]
 8011896:	6063      	str	r3, [r4, #4]
 8011898:	bf04      	itt	eq
 801189a:	1852      	addeq	r2, r2, r1
 801189c:	6022      	streq	r2, [r4, #0]
 801189e:	602c      	str	r4, [r5, #0]
 80118a0:	e7ec      	b.n	801187c <_free_r+0x28>
 80118a2:	461a      	mov	r2, r3
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	b10b      	cbz	r3, 80118ac <_free_r+0x58>
 80118a8:	42a3      	cmp	r3, r4
 80118aa:	d9fa      	bls.n	80118a2 <_free_r+0x4e>
 80118ac:	6811      	ldr	r1, [r2, #0]
 80118ae:	1855      	adds	r5, r2, r1
 80118b0:	42a5      	cmp	r5, r4
 80118b2:	d10b      	bne.n	80118cc <_free_r+0x78>
 80118b4:	6824      	ldr	r4, [r4, #0]
 80118b6:	4421      	add	r1, r4
 80118b8:	1854      	adds	r4, r2, r1
 80118ba:	42a3      	cmp	r3, r4
 80118bc:	6011      	str	r1, [r2, #0]
 80118be:	d1dd      	bne.n	801187c <_free_r+0x28>
 80118c0:	681c      	ldr	r4, [r3, #0]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	6053      	str	r3, [r2, #4]
 80118c6:	4421      	add	r1, r4
 80118c8:	6011      	str	r1, [r2, #0]
 80118ca:	e7d7      	b.n	801187c <_free_r+0x28>
 80118cc:	d902      	bls.n	80118d4 <_free_r+0x80>
 80118ce:	230c      	movs	r3, #12
 80118d0:	6003      	str	r3, [r0, #0]
 80118d2:	e7d3      	b.n	801187c <_free_r+0x28>
 80118d4:	6825      	ldr	r5, [r4, #0]
 80118d6:	1961      	adds	r1, r4, r5
 80118d8:	428b      	cmp	r3, r1
 80118da:	bf04      	itt	eq
 80118dc:	6819      	ldreq	r1, [r3, #0]
 80118de:	685b      	ldreq	r3, [r3, #4]
 80118e0:	6063      	str	r3, [r4, #4]
 80118e2:	bf04      	itt	eq
 80118e4:	1949      	addeq	r1, r1, r5
 80118e6:	6021      	streq	r1, [r4, #0]
 80118e8:	6054      	str	r4, [r2, #4]
 80118ea:	e7c7      	b.n	801187c <_free_r+0x28>
 80118ec:	b003      	add	sp, #12
 80118ee:	bd30      	pop	{r4, r5, pc}
 80118f0:	20004b18 	.word	0x20004b18

080118f4 <_malloc_r>:
 80118f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f6:	1ccd      	adds	r5, r1, #3
 80118f8:	f025 0503 	bic.w	r5, r5, #3
 80118fc:	3508      	adds	r5, #8
 80118fe:	2d0c      	cmp	r5, #12
 8011900:	bf38      	it	cc
 8011902:	250c      	movcc	r5, #12
 8011904:	2d00      	cmp	r5, #0
 8011906:	4606      	mov	r6, r0
 8011908:	db01      	blt.n	801190e <_malloc_r+0x1a>
 801190a:	42a9      	cmp	r1, r5
 801190c:	d903      	bls.n	8011916 <_malloc_r+0x22>
 801190e:	230c      	movs	r3, #12
 8011910:	6033      	str	r3, [r6, #0]
 8011912:	2000      	movs	r0, #0
 8011914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011916:	f000 f8f1 	bl	8011afc <__malloc_lock>
 801191a:	4921      	ldr	r1, [pc, #132]	; (80119a0 <_malloc_r+0xac>)
 801191c:	680a      	ldr	r2, [r1, #0]
 801191e:	4614      	mov	r4, r2
 8011920:	b99c      	cbnz	r4, 801194a <_malloc_r+0x56>
 8011922:	4f20      	ldr	r7, [pc, #128]	; (80119a4 <_malloc_r+0xb0>)
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	b923      	cbnz	r3, 8011932 <_malloc_r+0x3e>
 8011928:	4621      	mov	r1, r4
 801192a:	4630      	mov	r0, r6
 801192c:	f000 f8a6 	bl	8011a7c <_sbrk_r>
 8011930:	6038      	str	r0, [r7, #0]
 8011932:	4629      	mov	r1, r5
 8011934:	4630      	mov	r0, r6
 8011936:	f000 f8a1 	bl	8011a7c <_sbrk_r>
 801193a:	1c43      	adds	r3, r0, #1
 801193c:	d123      	bne.n	8011986 <_malloc_r+0x92>
 801193e:	230c      	movs	r3, #12
 8011940:	6033      	str	r3, [r6, #0]
 8011942:	4630      	mov	r0, r6
 8011944:	f000 f8e0 	bl	8011b08 <__malloc_unlock>
 8011948:	e7e3      	b.n	8011912 <_malloc_r+0x1e>
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	1b5b      	subs	r3, r3, r5
 801194e:	d417      	bmi.n	8011980 <_malloc_r+0x8c>
 8011950:	2b0b      	cmp	r3, #11
 8011952:	d903      	bls.n	801195c <_malloc_r+0x68>
 8011954:	6023      	str	r3, [r4, #0]
 8011956:	441c      	add	r4, r3
 8011958:	6025      	str	r5, [r4, #0]
 801195a:	e004      	b.n	8011966 <_malloc_r+0x72>
 801195c:	6863      	ldr	r3, [r4, #4]
 801195e:	42a2      	cmp	r2, r4
 8011960:	bf0c      	ite	eq
 8011962:	600b      	streq	r3, [r1, #0]
 8011964:	6053      	strne	r3, [r2, #4]
 8011966:	4630      	mov	r0, r6
 8011968:	f000 f8ce 	bl	8011b08 <__malloc_unlock>
 801196c:	f104 000b 	add.w	r0, r4, #11
 8011970:	1d23      	adds	r3, r4, #4
 8011972:	f020 0007 	bic.w	r0, r0, #7
 8011976:	1ac2      	subs	r2, r0, r3
 8011978:	d0cc      	beq.n	8011914 <_malloc_r+0x20>
 801197a:	1a1b      	subs	r3, r3, r0
 801197c:	50a3      	str	r3, [r4, r2]
 801197e:	e7c9      	b.n	8011914 <_malloc_r+0x20>
 8011980:	4622      	mov	r2, r4
 8011982:	6864      	ldr	r4, [r4, #4]
 8011984:	e7cc      	b.n	8011920 <_malloc_r+0x2c>
 8011986:	1cc4      	adds	r4, r0, #3
 8011988:	f024 0403 	bic.w	r4, r4, #3
 801198c:	42a0      	cmp	r0, r4
 801198e:	d0e3      	beq.n	8011958 <_malloc_r+0x64>
 8011990:	1a21      	subs	r1, r4, r0
 8011992:	4630      	mov	r0, r6
 8011994:	f000 f872 	bl	8011a7c <_sbrk_r>
 8011998:	3001      	adds	r0, #1
 801199a:	d1dd      	bne.n	8011958 <_malloc_r+0x64>
 801199c:	e7cf      	b.n	801193e <_malloc_r+0x4a>
 801199e:	bf00      	nop
 80119a0:	20004b18 	.word	0x20004b18
 80119a4:	20004b1c 	.word	0x20004b1c

080119a8 <cleanup_glue>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	460c      	mov	r4, r1
 80119ac:	6809      	ldr	r1, [r1, #0]
 80119ae:	4605      	mov	r5, r0
 80119b0:	b109      	cbz	r1, 80119b6 <cleanup_glue+0xe>
 80119b2:	f7ff fff9 	bl	80119a8 <cleanup_glue>
 80119b6:	4621      	mov	r1, r4
 80119b8:	4628      	mov	r0, r5
 80119ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119be:	f7ff bf49 	b.w	8011854 <_free_r>
	...

080119c4 <_reclaim_reent>:
 80119c4:	4b2c      	ldr	r3, [pc, #176]	; (8011a78 <_reclaim_reent+0xb4>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	4283      	cmp	r3, r0
 80119ca:	b570      	push	{r4, r5, r6, lr}
 80119cc:	4604      	mov	r4, r0
 80119ce:	d051      	beq.n	8011a74 <_reclaim_reent+0xb0>
 80119d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80119d2:	b143      	cbz	r3, 80119e6 <_reclaim_reent+0x22>
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d14a      	bne.n	8011a70 <_reclaim_reent+0xac>
 80119da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119dc:	6819      	ldr	r1, [r3, #0]
 80119de:	b111      	cbz	r1, 80119e6 <_reclaim_reent+0x22>
 80119e0:	4620      	mov	r0, r4
 80119e2:	f7ff ff37 	bl	8011854 <_free_r>
 80119e6:	6961      	ldr	r1, [r4, #20]
 80119e8:	b111      	cbz	r1, 80119f0 <_reclaim_reent+0x2c>
 80119ea:	4620      	mov	r0, r4
 80119ec:	f7ff ff32 	bl	8011854 <_free_r>
 80119f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80119f2:	b111      	cbz	r1, 80119fa <_reclaim_reent+0x36>
 80119f4:	4620      	mov	r0, r4
 80119f6:	f7ff ff2d 	bl	8011854 <_free_r>
 80119fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80119fc:	b111      	cbz	r1, 8011a04 <_reclaim_reent+0x40>
 80119fe:	4620      	mov	r0, r4
 8011a00:	f7ff ff28 	bl	8011854 <_free_r>
 8011a04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011a06:	b111      	cbz	r1, 8011a0e <_reclaim_reent+0x4a>
 8011a08:	4620      	mov	r0, r4
 8011a0a:	f7ff ff23 	bl	8011854 <_free_r>
 8011a0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011a10:	b111      	cbz	r1, 8011a18 <_reclaim_reent+0x54>
 8011a12:	4620      	mov	r0, r4
 8011a14:	f7ff ff1e 	bl	8011854 <_free_r>
 8011a18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011a1a:	b111      	cbz	r1, 8011a22 <_reclaim_reent+0x5e>
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f7ff ff19 	bl	8011854 <_free_r>
 8011a22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011a24:	b111      	cbz	r1, 8011a2c <_reclaim_reent+0x68>
 8011a26:	4620      	mov	r0, r4
 8011a28:	f7ff ff14 	bl	8011854 <_free_r>
 8011a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a2e:	b111      	cbz	r1, 8011a36 <_reclaim_reent+0x72>
 8011a30:	4620      	mov	r0, r4
 8011a32:	f7ff ff0f 	bl	8011854 <_free_r>
 8011a36:	69a3      	ldr	r3, [r4, #24]
 8011a38:	b1e3      	cbz	r3, 8011a74 <_reclaim_reent+0xb0>
 8011a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	4798      	blx	r3
 8011a40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011a42:	b1b9      	cbz	r1, 8011a74 <_reclaim_reent+0xb0>
 8011a44:	4620      	mov	r0, r4
 8011a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a4a:	f7ff bfad 	b.w	80119a8 <cleanup_glue>
 8011a4e:	5949      	ldr	r1, [r1, r5]
 8011a50:	b941      	cbnz	r1, 8011a64 <_reclaim_reent+0xa0>
 8011a52:	3504      	adds	r5, #4
 8011a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a56:	2d80      	cmp	r5, #128	; 0x80
 8011a58:	68d9      	ldr	r1, [r3, #12]
 8011a5a:	d1f8      	bne.n	8011a4e <_reclaim_reent+0x8a>
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f7ff fef9 	bl	8011854 <_free_r>
 8011a62:	e7ba      	b.n	80119da <_reclaim_reent+0x16>
 8011a64:	680e      	ldr	r6, [r1, #0]
 8011a66:	4620      	mov	r0, r4
 8011a68:	f7ff fef4 	bl	8011854 <_free_r>
 8011a6c:	4631      	mov	r1, r6
 8011a6e:	e7ef      	b.n	8011a50 <_reclaim_reent+0x8c>
 8011a70:	2500      	movs	r5, #0
 8011a72:	e7ef      	b.n	8011a54 <_reclaim_reent+0x90>
 8011a74:	bd70      	pop	{r4, r5, r6, pc}
 8011a76:	bf00      	nop
 8011a78:	20000044 	.word	0x20000044

08011a7c <_sbrk_r>:
 8011a7c:	b538      	push	{r3, r4, r5, lr}
 8011a7e:	4d06      	ldr	r5, [pc, #24]	; (8011a98 <_sbrk_r+0x1c>)
 8011a80:	2300      	movs	r3, #0
 8011a82:	4604      	mov	r4, r0
 8011a84:	4608      	mov	r0, r1
 8011a86:	602b      	str	r3, [r5, #0]
 8011a88:	f7f1 fee6 	bl	8003858 <_sbrk>
 8011a8c:	1c43      	adds	r3, r0, #1
 8011a8e:	d102      	bne.n	8011a96 <_sbrk_r+0x1a>
 8011a90:	682b      	ldr	r3, [r5, #0]
 8011a92:	b103      	cbz	r3, 8011a96 <_sbrk_r+0x1a>
 8011a94:	6023      	str	r3, [r4, #0]
 8011a96:	bd38      	pop	{r3, r4, r5, pc}
 8011a98:	20005738 	.word	0x20005738

08011a9c <siprintf>:
 8011a9c:	b40e      	push	{r1, r2, r3}
 8011a9e:	b500      	push	{lr}
 8011aa0:	b09c      	sub	sp, #112	; 0x70
 8011aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8011aa4:	9002      	str	r0, [sp, #8]
 8011aa6:	9006      	str	r0, [sp, #24]
 8011aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011aac:	4809      	ldr	r0, [pc, #36]	; (8011ad4 <siprintf+0x38>)
 8011aae:	9107      	str	r1, [sp, #28]
 8011ab0:	9104      	str	r1, [sp, #16]
 8011ab2:	4909      	ldr	r1, [pc, #36]	; (8011ad8 <siprintf+0x3c>)
 8011ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ab8:	9105      	str	r1, [sp, #20]
 8011aba:	6800      	ldr	r0, [r0, #0]
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	a902      	add	r1, sp, #8
 8011ac0:	f000 f884 	bl	8011bcc <_svfiprintf_r>
 8011ac4:	9b02      	ldr	r3, [sp, #8]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	701a      	strb	r2, [r3, #0]
 8011aca:	b01c      	add	sp, #112	; 0x70
 8011acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ad0:	b003      	add	sp, #12
 8011ad2:	4770      	bx	lr
 8011ad4:	20000044 	.word	0x20000044
 8011ad8:	ffff0208 	.word	0xffff0208

08011adc <strcat>:
 8011adc:	b510      	push	{r4, lr}
 8011ade:	4602      	mov	r2, r0
 8011ae0:	7814      	ldrb	r4, [r2, #0]
 8011ae2:	4613      	mov	r3, r2
 8011ae4:	3201      	adds	r2, #1
 8011ae6:	2c00      	cmp	r4, #0
 8011ae8:	d1fa      	bne.n	8011ae0 <strcat+0x4>
 8011aea:	3b01      	subs	r3, #1
 8011aec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011af0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011af4:	2a00      	cmp	r2, #0
 8011af6:	d1f9      	bne.n	8011aec <strcat+0x10>
 8011af8:	bd10      	pop	{r4, pc}
	...

08011afc <__malloc_lock>:
 8011afc:	4801      	ldr	r0, [pc, #4]	; (8011b04 <__malloc_lock+0x8>)
 8011afe:	f7ff be81 	b.w	8011804 <__retarget_lock_acquire_recursive>
 8011b02:	bf00      	nop
 8011b04:	20005730 	.word	0x20005730

08011b08 <__malloc_unlock>:
 8011b08:	4801      	ldr	r0, [pc, #4]	; (8011b10 <__malloc_unlock+0x8>)
 8011b0a:	f7ff be7c 	b.w	8011806 <__retarget_lock_release_recursive>
 8011b0e:	bf00      	nop
 8011b10:	20005730 	.word	0x20005730

08011b14 <__ssputs_r>:
 8011b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b18:	688e      	ldr	r6, [r1, #8]
 8011b1a:	429e      	cmp	r6, r3
 8011b1c:	4682      	mov	sl, r0
 8011b1e:	460c      	mov	r4, r1
 8011b20:	4690      	mov	r8, r2
 8011b22:	461f      	mov	r7, r3
 8011b24:	d838      	bhi.n	8011b98 <__ssputs_r+0x84>
 8011b26:	898a      	ldrh	r2, [r1, #12]
 8011b28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b2c:	d032      	beq.n	8011b94 <__ssputs_r+0x80>
 8011b2e:	6825      	ldr	r5, [r4, #0]
 8011b30:	6909      	ldr	r1, [r1, #16]
 8011b32:	eba5 0901 	sub.w	r9, r5, r1
 8011b36:	6965      	ldr	r5, [r4, #20]
 8011b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b40:	3301      	adds	r3, #1
 8011b42:	444b      	add	r3, r9
 8011b44:	106d      	asrs	r5, r5, #1
 8011b46:	429d      	cmp	r5, r3
 8011b48:	bf38      	it	cc
 8011b4a:	461d      	movcc	r5, r3
 8011b4c:	0553      	lsls	r3, r2, #21
 8011b4e:	d531      	bpl.n	8011bb4 <__ssputs_r+0xa0>
 8011b50:	4629      	mov	r1, r5
 8011b52:	f7ff fecf 	bl	80118f4 <_malloc_r>
 8011b56:	4606      	mov	r6, r0
 8011b58:	b950      	cbnz	r0, 8011b70 <__ssputs_r+0x5c>
 8011b5a:	230c      	movs	r3, #12
 8011b5c:	f8ca 3000 	str.w	r3, [sl]
 8011b60:	89a3      	ldrh	r3, [r4, #12]
 8011b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b66:	81a3      	strh	r3, [r4, #12]
 8011b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b70:	6921      	ldr	r1, [r4, #16]
 8011b72:	464a      	mov	r2, r9
 8011b74:	f7ff fe58 	bl	8011828 <memcpy>
 8011b78:	89a3      	ldrh	r3, [r4, #12]
 8011b7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b82:	81a3      	strh	r3, [r4, #12]
 8011b84:	6126      	str	r6, [r4, #16]
 8011b86:	6165      	str	r5, [r4, #20]
 8011b88:	444e      	add	r6, r9
 8011b8a:	eba5 0509 	sub.w	r5, r5, r9
 8011b8e:	6026      	str	r6, [r4, #0]
 8011b90:	60a5      	str	r5, [r4, #8]
 8011b92:	463e      	mov	r6, r7
 8011b94:	42be      	cmp	r6, r7
 8011b96:	d900      	bls.n	8011b9a <__ssputs_r+0x86>
 8011b98:	463e      	mov	r6, r7
 8011b9a:	4632      	mov	r2, r6
 8011b9c:	6820      	ldr	r0, [r4, #0]
 8011b9e:	4641      	mov	r1, r8
 8011ba0:	f000 faa8 	bl	80120f4 <memmove>
 8011ba4:	68a3      	ldr	r3, [r4, #8]
 8011ba6:	6822      	ldr	r2, [r4, #0]
 8011ba8:	1b9b      	subs	r3, r3, r6
 8011baa:	4432      	add	r2, r6
 8011bac:	60a3      	str	r3, [r4, #8]
 8011bae:	6022      	str	r2, [r4, #0]
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	e7db      	b.n	8011b6c <__ssputs_r+0x58>
 8011bb4:	462a      	mov	r2, r5
 8011bb6:	f000 fab7 	bl	8012128 <_realloc_r>
 8011bba:	4606      	mov	r6, r0
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d1e1      	bne.n	8011b84 <__ssputs_r+0x70>
 8011bc0:	6921      	ldr	r1, [r4, #16]
 8011bc2:	4650      	mov	r0, sl
 8011bc4:	f7ff fe46 	bl	8011854 <_free_r>
 8011bc8:	e7c7      	b.n	8011b5a <__ssputs_r+0x46>
	...

08011bcc <_svfiprintf_r>:
 8011bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd0:	4698      	mov	r8, r3
 8011bd2:	898b      	ldrh	r3, [r1, #12]
 8011bd4:	061b      	lsls	r3, r3, #24
 8011bd6:	b09d      	sub	sp, #116	; 0x74
 8011bd8:	4607      	mov	r7, r0
 8011bda:	460d      	mov	r5, r1
 8011bdc:	4614      	mov	r4, r2
 8011bde:	d50e      	bpl.n	8011bfe <_svfiprintf_r+0x32>
 8011be0:	690b      	ldr	r3, [r1, #16]
 8011be2:	b963      	cbnz	r3, 8011bfe <_svfiprintf_r+0x32>
 8011be4:	2140      	movs	r1, #64	; 0x40
 8011be6:	f7ff fe85 	bl	80118f4 <_malloc_r>
 8011bea:	6028      	str	r0, [r5, #0]
 8011bec:	6128      	str	r0, [r5, #16]
 8011bee:	b920      	cbnz	r0, 8011bfa <_svfiprintf_r+0x2e>
 8011bf0:	230c      	movs	r3, #12
 8011bf2:	603b      	str	r3, [r7, #0]
 8011bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bf8:	e0d1      	b.n	8011d9e <_svfiprintf_r+0x1d2>
 8011bfa:	2340      	movs	r3, #64	; 0x40
 8011bfc:	616b      	str	r3, [r5, #20]
 8011bfe:	2300      	movs	r3, #0
 8011c00:	9309      	str	r3, [sp, #36]	; 0x24
 8011c02:	2320      	movs	r3, #32
 8011c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c0c:	2330      	movs	r3, #48	; 0x30
 8011c0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011db8 <_svfiprintf_r+0x1ec>
 8011c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c16:	f04f 0901 	mov.w	r9, #1
 8011c1a:	4623      	mov	r3, r4
 8011c1c:	469a      	mov	sl, r3
 8011c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c22:	b10a      	cbz	r2, 8011c28 <_svfiprintf_r+0x5c>
 8011c24:	2a25      	cmp	r2, #37	; 0x25
 8011c26:	d1f9      	bne.n	8011c1c <_svfiprintf_r+0x50>
 8011c28:	ebba 0b04 	subs.w	fp, sl, r4
 8011c2c:	d00b      	beq.n	8011c46 <_svfiprintf_r+0x7a>
 8011c2e:	465b      	mov	r3, fp
 8011c30:	4622      	mov	r2, r4
 8011c32:	4629      	mov	r1, r5
 8011c34:	4638      	mov	r0, r7
 8011c36:	f7ff ff6d 	bl	8011b14 <__ssputs_r>
 8011c3a:	3001      	adds	r0, #1
 8011c3c:	f000 80aa 	beq.w	8011d94 <_svfiprintf_r+0x1c8>
 8011c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c42:	445a      	add	r2, fp
 8011c44:	9209      	str	r2, [sp, #36]	; 0x24
 8011c46:	f89a 3000 	ldrb.w	r3, [sl]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	f000 80a2 	beq.w	8011d94 <_svfiprintf_r+0x1c8>
 8011c50:	2300      	movs	r3, #0
 8011c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c5a:	f10a 0a01 	add.w	sl, sl, #1
 8011c5e:	9304      	str	r3, [sp, #16]
 8011c60:	9307      	str	r3, [sp, #28]
 8011c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c66:	931a      	str	r3, [sp, #104]	; 0x68
 8011c68:	4654      	mov	r4, sl
 8011c6a:	2205      	movs	r2, #5
 8011c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c70:	4851      	ldr	r0, [pc, #324]	; (8011db8 <_svfiprintf_r+0x1ec>)
 8011c72:	f7ee fac5 	bl	8000200 <memchr>
 8011c76:	9a04      	ldr	r2, [sp, #16]
 8011c78:	b9d8      	cbnz	r0, 8011cb2 <_svfiprintf_r+0xe6>
 8011c7a:	06d0      	lsls	r0, r2, #27
 8011c7c:	bf44      	itt	mi
 8011c7e:	2320      	movmi	r3, #32
 8011c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c84:	0711      	lsls	r1, r2, #28
 8011c86:	bf44      	itt	mi
 8011c88:	232b      	movmi	r3, #43	; 0x2b
 8011c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c92:	2b2a      	cmp	r3, #42	; 0x2a
 8011c94:	d015      	beq.n	8011cc2 <_svfiprintf_r+0xf6>
 8011c96:	9a07      	ldr	r2, [sp, #28]
 8011c98:	4654      	mov	r4, sl
 8011c9a:	2000      	movs	r0, #0
 8011c9c:	f04f 0c0a 	mov.w	ip, #10
 8011ca0:	4621      	mov	r1, r4
 8011ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ca6:	3b30      	subs	r3, #48	; 0x30
 8011ca8:	2b09      	cmp	r3, #9
 8011caa:	d94e      	bls.n	8011d4a <_svfiprintf_r+0x17e>
 8011cac:	b1b0      	cbz	r0, 8011cdc <_svfiprintf_r+0x110>
 8011cae:	9207      	str	r2, [sp, #28]
 8011cb0:	e014      	b.n	8011cdc <_svfiprintf_r+0x110>
 8011cb2:	eba0 0308 	sub.w	r3, r0, r8
 8011cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8011cba:	4313      	orrs	r3, r2
 8011cbc:	9304      	str	r3, [sp, #16]
 8011cbe:	46a2      	mov	sl, r4
 8011cc0:	e7d2      	b.n	8011c68 <_svfiprintf_r+0x9c>
 8011cc2:	9b03      	ldr	r3, [sp, #12]
 8011cc4:	1d19      	adds	r1, r3, #4
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	9103      	str	r1, [sp, #12]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	bfbb      	ittet	lt
 8011cce:	425b      	neglt	r3, r3
 8011cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8011cd4:	9307      	strge	r3, [sp, #28]
 8011cd6:	9307      	strlt	r3, [sp, #28]
 8011cd8:	bfb8      	it	lt
 8011cda:	9204      	strlt	r2, [sp, #16]
 8011cdc:	7823      	ldrb	r3, [r4, #0]
 8011cde:	2b2e      	cmp	r3, #46	; 0x2e
 8011ce0:	d10c      	bne.n	8011cfc <_svfiprintf_r+0x130>
 8011ce2:	7863      	ldrb	r3, [r4, #1]
 8011ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8011ce6:	d135      	bne.n	8011d54 <_svfiprintf_r+0x188>
 8011ce8:	9b03      	ldr	r3, [sp, #12]
 8011cea:	1d1a      	adds	r2, r3, #4
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	9203      	str	r2, [sp, #12]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	bfb8      	it	lt
 8011cf4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011cf8:	3402      	adds	r4, #2
 8011cfa:	9305      	str	r3, [sp, #20]
 8011cfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011dc8 <_svfiprintf_r+0x1fc>
 8011d00:	7821      	ldrb	r1, [r4, #0]
 8011d02:	2203      	movs	r2, #3
 8011d04:	4650      	mov	r0, sl
 8011d06:	f7ee fa7b 	bl	8000200 <memchr>
 8011d0a:	b140      	cbz	r0, 8011d1e <_svfiprintf_r+0x152>
 8011d0c:	2340      	movs	r3, #64	; 0x40
 8011d0e:	eba0 000a 	sub.w	r0, r0, sl
 8011d12:	fa03 f000 	lsl.w	r0, r3, r0
 8011d16:	9b04      	ldr	r3, [sp, #16]
 8011d18:	4303      	orrs	r3, r0
 8011d1a:	3401      	adds	r4, #1
 8011d1c:	9304      	str	r3, [sp, #16]
 8011d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d22:	4826      	ldr	r0, [pc, #152]	; (8011dbc <_svfiprintf_r+0x1f0>)
 8011d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d28:	2206      	movs	r2, #6
 8011d2a:	f7ee fa69 	bl	8000200 <memchr>
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	d038      	beq.n	8011da4 <_svfiprintf_r+0x1d8>
 8011d32:	4b23      	ldr	r3, [pc, #140]	; (8011dc0 <_svfiprintf_r+0x1f4>)
 8011d34:	bb1b      	cbnz	r3, 8011d7e <_svfiprintf_r+0x1b2>
 8011d36:	9b03      	ldr	r3, [sp, #12]
 8011d38:	3307      	adds	r3, #7
 8011d3a:	f023 0307 	bic.w	r3, r3, #7
 8011d3e:	3308      	adds	r3, #8
 8011d40:	9303      	str	r3, [sp, #12]
 8011d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d44:	4433      	add	r3, r6
 8011d46:	9309      	str	r3, [sp, #36]	; 0x24
 8011d48:	e767      	b.n	8011c1a <_svfiprintf_r+0x4e>
 8011d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d4e:	460c      	mov	r4, r1
 8011d50:	2001      	movs	r0, #1
 8011d52:	e7a5      	b.n	8011ca0 <_svfiprintf_r+0xd4>
 8011d54:	2300      	movs	r3, #0
 8011d56:	3401      	adds	r4, #1
 8011d58:	9305      	str	r3, [sp, #20]
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	f04f 0c0a 	mov.w	ip, #10
 8011d60:	4620      	mov	r0, r4
 8011d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d66:	3a30      	subs	r2, #48	; 0x30
 8011d68:	2a09      	cmp	r2, #9
 8011d6a:	d903      	bls.n	8011d74 <_svfiprintf_r+0x1a8>
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d0c5      	beq.n	8011cfc <_svfiprintf_r+0x130>
 8011d70:	9105      	str	r1, [sp, #20]
 8011d72:	e7c3      	b.n	8011cfc <_svfiprintf_r+0x130>
 8011d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d78:	4604      	mov	r4, r0
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	e7f0      	b.n	8011d60 <_svfiprintf_r+0x194>
 8011d7e:	ab03      	add	r3, sp, #12
 8011d80:	9300      	str	r3, [sp, #0]
 8011d82:	462a      	mov	r2, r5
 8011d84:	4b0f      	ldr	r3, [pc, #60]	; (8011dc4 <_svfiprintf_r+0x1f8>)
 8011d86:	a904      	add	r1, sp, #16
 8011d88:	4638      	mov	r0, r7
 8011d8a:	f3af 8000 	nop.w
 8011d8e:	1c42      	adds	r2, r0, #1
 8011d90:	4606      	mov	r6, r0
 8011d92:	d1d6      	bne.n	8011d42 <_svfiprintf_r+0x176>
 8011d94:	89ab      	ldrh	r3, [r5, #12]
 8011d96:	065b      	lsls	r3, r3, #25
 8011d98:	f53f af2c 	bmi.w	8011bf4 <_svfiprintf_r+0x28>
 8011d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d9e:	b01d      	add	sp, #116	; 0x74
 8011da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da4:	ab03      	add	r3, sp, #12
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	462a      	mov	r2, r5
 8011daa:	4b06      	ldr	r3, [pc, #24]	; (8011dc4 <_svfiprintf_r+0x1f8>)
 8011dac:	a904      	add	r1, sp, #16
 8011dae:	4638      	mov	r0, r7
 8011db0:	f000 f87a 	bl	8011ea8 <_printf_i>
 8011db4:	e7eb      	b.n	8011d8e <_svfiprintf_r+0x1c2>
 8011db6:	bf00      	nop
 8011db8:	08014ce4 	.word	0x08014ce4
 8011dbc:	08014cee 	.word	0x08014cee
 8011dc0:	00000000 	.word	0x00000000
 8011dc4:	08011b15 	.word	0x08011b15
 8011dc8:	08014cea 	.word	0x08014cea

08011dcc <_printf_common>:
 8011dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd0:	4616      	mov	r6, r2
 8011dd2:	4699      	mov	r9, r3
 8011dd4:	688a      	ldr	r2, [r1, #8]
 8011dd6:	690b      	ldr	r3, [r1, #16]
 8011dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	bfb8      	it	lt
 8011de0:	4613      	movlt	r3, r2
 8011de2:	6033      	str	r3, [r6, #0]
 8011de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011de8:	4607      	mov	r7, r0
 8011dea:	460c      	mov	r4, r1
 8011dec:	b10a      	cbz	r2, 8011df2 <_printf_common+0x26>
 8011dee:	3301      	adds	r3, #1
 8011df0:	6033      	str	r3, [r6, #0]
 8011df2:	6823      	ldr	r3, [r4, #0]
 8011df4:	0699      	lsls	r1, r3, #26
 8011df6:	bf42      	ittt	mi
 8011df8:	6833      	ldrmi	r3, [r6, #0]
 8011dfa:	3302      	addmi	r3, #2
 8011dfc:	6033      	strmi	r3, [r6, #0]
 8011dfe:	6825      	ldr	r5, [r4, #0]
 8011e00:	f015 0506 	ands.w	r5, r5, #6
 8011e04:	d106      	bne.n	8011e14 <_printf_common+0x48>
 8011e06:	f104 0a19 	add.w	sl, r4, #25
 8011e0a:	68e3      	ldr	r3, [r4, #12]
 8011e0c:	6832      	ldr	r2, [r6, #0]
 8011e0e:	1a9b      	subs	r3, r3, r2
 8011e10:	42ab      	cmp	r3, r5
 8011e12:	dc26      	bgt.n	8011e62 <_printf_common+0x96>
 8011e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e18:	1e13      	subs	r3, r2, #0
 8011e1a:	6822      	ldr	r2, [r4, #0]
 8011e1c:	bf18      	it	ne
 8011e1e:	2301      	movne	r3, #1
 8011e20:	0692      	lsls	r2, r2, #26
 8011e22:	d42b      	bmi.n	8011e7c <_printf_common+0xb0>
 8011e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e28:	4649      	mov	r1, r9
 8011e2a:	4638      	mov	r0, r7
 8011e2c:	47c0      	blx	r8
 8011e2e:	3001      	adds	r0, #1
 8011e30:	d01e      	beq.n	8011e70 <_printf_common+0xa4>
 8011e32:	6823      	ldr	r3, [r4, #0]
 8011e34:	68e5      	ldr	r5, [r4, #12]
 8011e36:	6832      	ldr	r2, [r6, #0]
 8011e38:	f003 0306 	and.w	r3, r3, #6
 8011e3c:	2b04      	cmp	r3, #4
 8011e3e:	bf08      	it	eq
 8011e40:	1aad      	subeq	r5, r5, r2
 8011e42:	68a3      	ldr	r3, [r4, #8]
 8011e44:	6922      	ldr	r2, [r4, #16]
 8011e46:	bf0c      	ite	eq
 8011e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e4c:	2500      	movne	r5, #0
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	bfc4      	itt	gt
 8011e52:	1a9b      	subgt	r3, r3, r2
 8011e54:	18ed      	addgt	r5, r5, r3
 8011e56:	2600      	movs	r6, #0
 8011e58:	341a      	adds	r4, #26
 8011e5a:	42b5      	cmp	r5, r6
 8011e5c:	d11a      	bne.n	8011e94 <_printf_common+0xc8>
 8011e5e:	2000      	movs	r0, #0
 8011e60:	e008      	b.n	8011e74 <_printf_common+0xa8>
 8011e62:	2301      	movs	r3, #1
 8011e64:	4652      	mov	r2, sl
 8011e66:	4649      	mov	r1, r9
 8011e68:	4638      	mov	r0, r7
 8011e6a:	47c0      	blx	r8
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	d103      	bne.n	8011e78 <_printf_common+0xac>
 8011e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e78:	3501      	adds	r5, #1
 8011e7a:	e7c6      	b.n	8011e0a <_printf_common+0x3e>
 8011e7c:	18e1      	adds	r1, r4, r3
 8011e7e:	1c5a      	adds	r2, r3, #1
 8011e80:	2030      	movs	r0, #48	; 0x30
 8011e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e86:	4422      	add	r2, r4
 8011e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e90:	3302      	adds	r3, #2
 8011e92:	e7c7      	b.n	8011e24 <_printf_common+0x58>
 8011e94:	2301      	movs	r3, #1
 8011e96:	4622      	mov	r2, r4
 8011e98:	4649      	mov	r1, r9
 8011e9a:	4638      	mov	r0, r7
 8011e9c:	47c0      	blx	r8
 8011e9e:	3001      	adds	r0, #1
 8011ea0:	d0e6      	beq.n	8011e70 <_printf_common+0xa4>
 8011ea2:	3601      	adds	r6, #1
 8011ea4:	e7d9      	b.n	8011e5a <_printf_common+0x8e>
	...

08011ea8 <_printf_i>:
 8011ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011eac:	460c      	mov	r4, r1
 8011eae:	4691      	mov	r9, r2
 8011eb0:	7e27      	ldrb	r7, [r4, #24]
 8011eb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011eb4:	2f78      	cmp	r7, #120	; 0x78
 8011eb6:	4680      	mov	r8, r0
 8011eb8:	469a      	mov	sl, r3
 8011eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ebe:	d807      	bhi.n	8011ed0 <_printf_i+0x28>
 8011ec0:	2f62      	cmp	r7, #98	; 0x62
 8011ec2:	d80a      	bhi.n	8011eda <_printf_i+0x32>
 8011ec4:	2f00      	cmp	r7, #0
 8011ec6:	f000 80d8 	beq.w	801207a <_printf_i+0x1d2>
 8011eca:	2f58      	cmp	r7, #88	; 0x58
 8011ecc:	f000 80a3 	beq.w	8012016 <_printf_i+0x16e>
 8011ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ed8:	e03a      	b.n	8011f50 <_printf_i+0xa8>
 8011eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ede:	2b15      	cmp	r3, #21
 8011ee0:	d8f6      	bhi.n	8011ed0 <_printf_i+0x28>
 8011ee2:	a001      	add	r0, pc, #4	; (adr r0, 8011ee8 <_printf_i+0x40>)
 8011ee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011ee8:	08011f41 	.word	0x08011f41
 8011eec:	08011f55 	.word	0x08011f55
 8011ef0:	08011ed1 	.word	0x08011ed1
 8011ef4:	08011ed1 	.word	0x08011ed1
 8011ef8:	08011ed1 	.word	0x08011ed1
 8011efc:	08011ed1 	.word	0x08011ed1
 8011f00:	08011f55 	.word	0x08011f55
 8011f04:	08011ed1 	.word	0x08011ed1
 8011f08:	08011ed1 	.word	0x08011ed1
 8011f0c:	08011ed1 	.word	0x08011ed1
 8011f10:	08011ed1 	.word	0x08011ed1
 8011f14:	08012061 	.word	0x08012061
 8011f18:	08011f85 	.word	0x08011f85
 8011f1c:	08012043 	.word	0x08012043
 8011f20:	08011ed1 	.word	0x08011ed1
 8011f24:	08011ed1 	.word	0x08011ed1
 8011f28:	08012083 	.word	0x08012083
 8011f2c:	08011ed1 	.word	0x08011ed1
 8011f30:	08011f85 	.word	0x08011f85
 8011f34:	08011ed1 	.word	0x08011ed1
 8011f38:	08011ed1 	.word	0x08011ed1
 8011f3c:	0801204b 	.word	0x0801204b
 8011f40:	680b      	ldr	r3, [r1, #0]
 8011f42:	1d1a      	adds	r2, r3, #4
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	600a      	str	r2, [r1, #0]
 8011f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f50:	2301      	movs	r3, #1
 8011f52:	e0a3      	b.n	801209c <_printf_i+0x1f4>
 8011f54:	6825      	ldr	r5, [r4, #0]
 8011f56:	6808      	ldr	r0, [r1, #0]
 8011f58:	062e      	lsls	r6, r5, #24
 8011f5a:	f100 0304 	add.w	r3, r0, #4
 8011f5e:	d50a      	bpl.n	8011f76 <_printf_i+0xce>
 8011f60:	6805      	ldr	r5, [r0, #0]
 8011f62:	600b      	str	r3, [r1, #0]
 8011f64:	2d00      	cmp	r5, #0
 8011f66:	da03      	bge.n	8011f70 <_printf_i+0xc8>
 8011f68:	232d      	movs	r3, #45	; 0x2d
 8011f6a:	426d      	negs	r5, r5
 8011f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f70:	485e      	ldr	r0, [pc, #376]	; (80120ec <_printf_i+0x244>)
 8011f72:	230a      	movs	r3, #10
 8011f74:	e019      	b.n	8011faa <_printf_i+0x102>
 8011f76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011f7a:	6805      	ldr	r5, [r0, #0]
 8011f7c:	600b      	str	r3, [r1, #0]
 8011f7e:	bf18      	it	ne
 8011f80:	b22d      	sxthne	r5, r5
 8011f82:	e7ef      	b.n	8011f64 <_printf_i+0xbc>
 8011f84:	680b      	ldr	r3, [r1, #0]
 8011f86:	6825      	ldr	r5, [r4, #0]
 8011f88:	1d18      	adds	r0, r3, #4
 8011f8a:	6008      	str	r0, [r1, #0]
 8011f8c:	0628      	lsls	r0, r5, #24
 8011f8e:	d501      	bpl.n	8011f94 <_printf_i+0xec>
 8011f90:	681d      	ldr	r5, [r3, #0]
 8011f92:	e002      	b.n	8011f9a <_printf_i+0xf2>
 8011f94:	0669      	lsls	r1, r5, #25
 8011f96:	d5fb      	bpl.n	8011f90 <_printf_i+0xe8>
 8011f98:	881d      	ldrh	r5, [r3, #0]
 8011f9a:	4854      	ldr	r0, [pc, #336]	; (80120ec <_printf_i+0x244>)
 8011f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8011f9e:	bf0c      	ite	eq
 8011fa0:	2308      	moveq	r3, #8
 8011fa2:	230a      	movne	r3, #10
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011faa:	6866      	ldr	r6, [r4, #4]
 8011fac:	60a6      	str	r6, [r4, #8]
 8011fae:	2e00      	cmp	r6, #0
 8011fb0:	bfa2      	ittt	ge
 8011fb2:	6821      	ldrge	r1, [r4, #0]
 8011fb4:	f021 0104 	bicge.w	r1, r1, #4
 8011fb8:	6021      	strge	r1, [r4, #0]
 8011fba:	b90d      	cbnz	r5, 8011fc0 <_printf_i+0x118>
 8011fbc:	2e00      	cmp	r6, #0
 8011fbe:	d04d      	beq.n	801205c <_printf_i+0x1b4>
 8011fc0:	4616      	mov	r6, r2
 8011fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8011fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8011fca:	5dc7      	ldrb	r7, [r0, r7]
 8011fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011fd0:	462f      	mov	r7, r5
 8011fd2:	42bb      	cmp	r3, r7
 8011fd4:	460d      	mov	r5, r1
 8011fd6:	d9f4      	bls.n	8011fc2 <_printf_i+0x11a>
 8011fd8:	2b08      	cmp	r3, #8
 8011fda:	d10b      	bne.n	8011ff4 <_printf_i+0x14c>
 8011fdc:	6823      	ldr	r3, [r4, #0]
 8011fde:	07df      	lsls	r7, r3, #31
 8011fe0:	d508      	bpl.n	8011ff4 <_printf_i+0x14c>
 8011fe2:	6923      	ldr	r3, [r4, #16]
 8011fe4:	6861      	ldr	r1, [r4, #4]
 8011fe6:	4299      	cmp	r1, r3
 8011fe8:	bfde      	ittt	le
 8011fea:	2330      	movle	r3, #48	; 0x30
 8011fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011ff0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011ff4:	1b92      	subs	r2, r2, r6
 8011ff6:	6122      	str	r2, [r4, #16]
 8011ff8:	f8cd a000 	str.w	sl, [sp]
 8011ffc:	464b      	mov	r3, r9
 8011ffe:	aa03      	add	r2, sp, #12
 8012000:	4621      	mov	r1, r4
 8012002:	4640      	mov	r0, r8
 8012004:	f7ff fee2 	bl	8011dcc <_printf_common>
 8012008:	3001      	adds	r0, #1
 801200a:	d14c      	bne.n	80120a6 <_printf_i+0x1fe>
 801200c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012010:	b004      	add	sp, #16
 8012012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012016:	4835      	ldr	r0, [pc, #212]	; (80120ec <_printf_i+0x244>)
 8012018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801201c:	6823      	ldr	r3, [r4, #0]
 801201e:	680e      	ldr	r6, [r1, #0]
 8012020:	061f      	lsls	r7, r3, #24
 8012022:	f856 5b04 	ldr.w	r5, [r6], #4
 8012026:	600e      	str	r6, [r1, #0]
 8012028:	d514      	bpl.n	8012054 <_printf_i+0x1ac>
 801202a:	07d9      	lsls	r1, r3, #31
 801202c:	bf44      	itt	mi
 801202e:	f043 0320 	orrmi.w	r3, r3, #32
 8012032:	6023      	strmi	r3, [r4, #0]
 8012034:	b91d      	cbnz	r5, 801203e <_printf_i+0x196>
 8012036:	6823      	ldr	r3, [r4, #0]
 8012038:	f023 0320 	bic.w	r3, r3, #32
 801203c:	6023      	str	r3, [r4, #0]
 801203e:	2310      	movs	r3, #16
 8012040:	e7b0      	b.n	8011fa4 <_printf_i+0xfc>
 8012042:	6823      	ldr	r3, [r4, #0]
 8012044:	f043 0320 	orr.w	r3, r3, #32
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	2378      	movs	r3, #120	; 0x78
 801204c:	4828      	ldr	r0, [pc, #160]	; (80120f0 <_printf_i+0x248>)
 801204e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012052:	e7e3      	b.n	801201c <_printf_i+0x174>
 8012054:	065e      	lsls	r6, r3, #25
 8012056:	bf48      	it	mi
 8012058:	b2ad      	uxthmi	r5, r5
 801205a:	e7e6      	b.n	801202a <_printf_i+0x182>
 801205c:	4616      	mov	r6, r2
 801205e:	e7bb      	b.n	8011fd8 <_printf_i+0x130>
 8012060:	680b      	ldr	r3, [r1, #0]
 8012062:	6826      	ldr	r6, [r4, #0]
 8012064:	6960      	ldr	r0, [r4, #20]
 8012066:	1d1d      	adds	r5, r3, #4
 8012068:	600d      	str	r5, [r1, #0]
 801206a:	0635      	lsls	r5, r6, #24
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	d501      	bpl.n	8012074 <_printf_i+0x1cc>
 8012070:	6018      	str	r0, [r3, #0]
 8012072:	e002      	b.n	801207a <_printf_i+0x1d2>
 8012074:	0671      	lsls	r1, r6, #25
 8012076:	d5fb      	bpl.n	8012070 <_printf_i+0x1c8>
 8012078:	8018      	strh	r0, [r3, #0]
 801207a:	2300      	movs	r3, #0
 801207c:	6123      	str	r3, [r4, #16]
 801207e:	4616      	mov	r6, r2
 8012080:	e7ba      	b.n	8011ff8 <_printf_i+0x150>
 8012082:	680b      	ldr	r3, [r1, #0]
 8012084:	1d1a      	adds	r2, r3, #4
 8012086:	600a      	str	r2, [r1, #0]
 8012088:	681e      	ldr	r6, [r3, #0]
 801208a:	6862      	ldr	r2, [r4, #4]
 801208c:	2100      	movs	r1, #0
 801208e:	4630      	mov	r0, r6
 8012090:	f7ee f8b6 	bl	8000200 <memchr>
 8012094:	b108      	cbz	r0, 801209a <_printf_i+0x1f2>
 8012096:	1b80      	subs	r0, r0, r6
 8012098:	6060      	str	r0, [r4, #4]
 801209a:	6863      	ldr	r3, [r4, #4]
 801209c:	6123      	str	r3, [r4, #16]
 801209e:	2300      	movs	r3, #0
 80120a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120a4:	e7a8      	b.n	8011ff8 <_printf_i+0x150>
 80120a6:	6923      	ldr	r3, [r4, #16]
 80120a8:	4632      	mov	r2, r6
 80120aa:	4649      	mov	r1, r9
 80120ac:	4640      	mov	r0, r8
 80120ae:	47d0      	blx	sl
 80120b0:	3001      	adds	r0, #1
 80120b2:	d0ab      	beq.n	801200c <_printf_i+0x164>
 80120b4:	6823      	ldr	r3, [r4, #0]
 80120b6:	079b      	lsls	r3, r3, #30
 80120b8:	d413      	bmi.n	80120e2 <_printf_i+0x23a>
 80120ba:	68e0      	ldr	r0, [r4, #12]
 80120bc:	9b03      	ldr	r3, [sp, #12]
 80120be:	4298      	cmp	r0, r3
 80120c0:	bfb8      	it	lt
 80120c2:	4618      	movlt	r0, r3
 80120c4:	e7a4      	b.n	8012010 <_printf_i+0x168>
 80120c6:	2301      	movs	r3, #1
 80120c8:	4632      	mov	r2, r6
 80120ca:	4649      	mov	r1, r9
 80120cc:	4640      	mov	r0, r8
 80120ce:	47d0      	blx	sl
 80120d0:	3001      	adds	r0, #1
 80120d2:	d09b      	beq.n	801200c <_printf_i+0x164>
 80120d4:	3501      	adds	r5, #1
 80120d6:	68e3      	ldr	r3, [r4, #12]
 80120d8:	9903      	ldr	r1, [sp, #12]
 80120da:	1a5b      	subs	r3, r3, r1
 80120dc:	42ab      	cmp	r3, r5
 80120de:	dcf2      	bgt.n	80120c6 <_printf_i+0x21e>
 80120e0:	e7eb      	b.n	80120ba <_printf_i+0x212>
 80120e2:	2500      	movs	r5, #0
 80120e4:	f104 0619 	add.w	r6, r4, #25
 80120e8:	e7f5      	b.n	80120d6 <_printf_i+0x22e>
 80120ea:	bf00      	nop
 80120ec:	08014cf5 	.word	0x08014cf5
 80120f0:	08014d06 	.word	0x08014d06

080120f4 <memmove>:
 80120f4:	4288      	cmp	r0, r1
 80120f6:	b510      	push	{r4, lr}
 80120f8:	eb01 0402 	add.w	r4, r1, r2
 80120fc:	d902      	bls.n	8012104 <memmove+0x10>
 80120fe:	4284      	cmp	r4, r0
 8012100:	4623      	mov	r3, r4
 8012102:	d807      	bhi.n	8012114 <memmove+0x20>
 8012104:	1e43      	subs	r3, r0, #1
 8012106:	42a1      	cmp	r1, r4
 8012108:	d008      	beq.n	801211c <memmove+0x28>
 801210a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801210e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012112:	e7f8      	b.n	8012106 <memmove+0x12>
 8012114:	4402      	add	r2, r0
 8012116:	4601      	mov	r1, r0
 8012118:	428a      	cmp	r2, r1
 801211a:	d100      	bne.n	801211e <memmove+0x2a>
 801211c:	bd10      	pop	{r4, pc}
 801211e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012126:	e7f7      	b.n	8012118 <memmove+0x24>

08012128 <_realloc_r>:
 8012128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801212a:	4607      	mov	r7, r0
 801212c:	4614      	mov	r4, r2
 801212e:	460e      	mov	r6, r1
 8012130:	b921      	cbnz	r1, 801213c <_realloc_r+0x14>
 8012132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012136:	4611      	mov	r1, r2
 8012138:	f7ff bbdc 	b.w	80118f4 <_malloc_r>
 801213c:	b922      	cbnz	r2, 8012148 <_realloc_r+0x20>
 801213e:	f7ff fb89 	bl	8011854 <_free_r>
 8012142:	4625      	mov	r5, r4
 8012144:	4628      	mov	r0, r5
 8012146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012148:	f000 f814 	bl	8012174 <_malloc_usable_size_r>
 801214c:	42a0      	cmp	r0, r4
 801214e:	d20f      	bcs.n	8012170 <_realloc_r+0x48>
 8012150:	4621      	mov	r1, r4
 8012152:	4638      	mov	r0, r7
 8012154:	f7ff fbce 	bl	80118f4 <_malloc_r>
 8012158:	4605      	mov	r5, r0
 801215a:	2800      	cmp	r0, #0
 801215c:	d0f2      	beq.n	8012144 <_realloc_r+0x1c>
 801215e:	4631      	mov	r1, r6
 8012160:	4622      	mov	r2, r4
 8012162:	f7ff fb61 	bl	8011828 <memcpy>
 8012166:	4631      	mov	r1, r6
 8012168:	4638      	mov	r0, r7
 801216a:	f7ff fb73 	bl	8011854 <_free_r>
 801216e:	e7e9      	b.n	8012144 <_realloc_r+0x1c>
 8012170:	4635      	mov	r5, r6
 8012172:	e7e7      	b.n	8012144 <_realloc_r+0x1c>

08012174 <_malloc_usable_size_r>:
 8012174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012178:	1f18      	subs	r0, r3, #4
 801217a:	2b00      	cmp	r3, #0
 801217c:	bfbc      	itt	lt
 801217e:	580b      	ldrlt	r3, [r1, r0]
 8012180:	18c0      	addlt	r0, r0, r3
 8012182:	4770      	bx	lr

08012184 <_init>:
 8012184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012186:	bf00      	nop
 8012188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801218a:	bc08      	pop	{r3}
 801218c:	469e      	mov	lr, r3
 801218e:	4770      	bx	lr

08012190 <_fini>:
 8012190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012192:	bf00      	nop
 8012194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012196:	bc08      	pop	{r3}
 8012198:	469e      	mov	lr, r3
 801219a:	4770      	bx	lr
